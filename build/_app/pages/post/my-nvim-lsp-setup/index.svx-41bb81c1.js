import{S as Rr,i as Ur,s as Yr,C as Hl,w as $l,x as Ml,y as Nl,z as qr,A as vr,q as jl,o as Rl,B as Ul,U as _r,e as t,t as p,k as u,c as e,a as o,h as l,d as a,m as k,b as r,g as i,F as s}from"../../../chunks/vendor-a3554607.js";import{P as Wr}from"../../../chunks/post-84b6700e.js";import{U as gr}from"../../../chunks/Update-db150b7f.js";import"../../../chunks/stores-5109c37e.js";import"../../../chunks/Progress-da00dd34.js";import"../../../chunks/theme-4e4001f1.js";/* empty css                                      *//* empty css                                                           */function Jr(H){let f,v,m,y,d,h,_,I;return{c(){f=t("p"),v=p("I\u2019ve updated my config to use a "),m=t("em"),y=p("better"),d=p(" way to set them up. Basically, I have a key-value pair table, each item is a table with the server name as its key. This way, I wouldn\u2019t need to copy and paste "),h=t("code"),_=p("nvim_lsp.lsp_name.setup{...}"),I=p(".")},l(J){f=e(J,"P",{});var S=o(f);v=l(S,"I\u2019ve updated my config to use a "),m=e(S,"EM",{});var V=o(m);y=l(V,"better"),V.forEach(a),d=l(S," way to set them up. Basically, I have a key-value pair table, each item is a table with the server name as its key. This way, I wouldn\u2019t need to copy and paste "),h=e(S,"CODE",{});var z=o(h);_=l(z,"nvim_lsp.lsp_name.setup{...}"),z.forEach(a),I=l(S,"."),S.forEach(a)},m(J,S){i(J,f,S),s(f,v),s(f,m),s(m,y),s(f,d),s(f,h),s(h,_),s(f,I)},d(J){J&&a(f)}}}function Fr(H){let f,v,m,y,d;return{c(){f=t("p"),v=p("I\u2019ve found a better way from one of "),m=t("a"),y=p("TJ\u2019s"),d=p(" stream to do this which looks like this."),this.h()},l(h){f=e(h,"P",{});var _=o(f);v=l(_,"I\u2019ve found a better way from one of "),m=e(_,"A",{href:!0,rel:!0});var I=o(m);y=l(I,"TJ\u2019s"),I.forEach(a),d=l(_," stream to do this which looks like this."),_.forEach(a),this.h()},h(){r(m,"href","https://www.twitch.tv/teej_dv"),r(m,"rel","nofollow")},m(h,_){i(h,f,_),s(f,v),s(f,m),s(m,y),s(f,d)},d(h){h&&a(f)}}}function Xr(H){let f,v,m,y,d,h,_,I,J,S,V,z,ls,de,he,pn,Qs,cs,me,ve,g,Zs,na,is,_e,ge,sa,aa,rs,we,ye,ta,ea,us,Ee,be,ln,oa,ks,Le,Pe,F,pa,fs,Ie,Se,la,ds,Ce,Ae,ca,hs,De,xe,ia,ra,ms,Te,Oe,ua,ka,vs,He,$e,fa,da,_s,Me,Ne,ha,ma,gs,je,Re,va,_a,ws,Ue,ot,cn,ys,Ye,pt,Es,bs,ga,qe,We,lt,Ls,Je,ct,w,Fe,wa,Xe,Ve,ya,ze,Be,Ea,Ke,Ge,ba,Qe,Ze,La,no,so,Pa,ao,to,it,B,eo,Ia,oo,po,rt,$,Sa,rn,lo,co,Ca,un,io,ro,Aa,kn,uo,ut,fn,Ps,ko,kt,M,fo,Da,ho,mo,dn,vo,_o,ft,Is,go,dt,hn,Ss,wo,ht,mn,Cs,yo,mt,N,Eo,vn,bo,Lo,xa,Po,Io,vt,_n,So,gn,Co,_t,wn,yr=`<code class="language-lua"><span class="token function">use</span> <span class="token punctuation">&#123;</span><span class="token string">'neovim/nvim-lspconfig'</span><span class="token punctuation">,</span> opt <span class="token operator">=</span> <span class="token keyword">true</span><span class="token punctuation">&#125;</span> <span class="token comment">-- builtin lsp config</span></code>`,gt,yn,As,Ao,wt,Ds,Do,yt,En,Er=`<code class="language-lua"><span class="token keyword">local</span> custom_on_attach <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  mappings<span class="token punctuation">.</span><span class="token function">lsp_mappings</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token keyword">end</span>

<span class="token keyword">local</span> custom_on_init <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>client<span class="token punctuation">)</span>
  <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">'Language Server Protocol started!'</span><span class="token punctuation">)</span>

  <span class="token keyword">if</span> client<span class="token punctuation">.</span>config<span class="token punctuation">.</span>flags <span class="token keyword">then</span>
    client<span class="token punctuation">.</span>config<span class="token punctuation">.</span>flags<span class="token punctuation">.</span>allow_incremental_sync <span class="token operator">=</span> <span class="token keyword">true</span>
  <span class="token keyword">end</span>
<span class="token keyword">end</span>

nvim_lsp<span class="token punctuation">.</span>gopls<span class="token punctuation">.</span><span class="token function">setup</span><span class="token punctuation">&#123;</span>
  on_attach <span class="token operator">=</span> custom_on_attach<span class="token punctuation">,</span>
  on_init <span class="token operator">=</span> custom_on_init<span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span></code>`,Et,b,xo,Ta,To,Oo,Oa,Ho,$o,Ha,Mo,No,$a,jo,Ro,bt,K,Lt,bn,Uo,Ln,Yo,Pt,Pn,xs,qo,It,In,Wo,Sn,Jo,St,Cn,br=`<code class="language-lua"><span class="token keyword">local</span> remap <span class="token operator">=</span> vim<span class="token punctuation">.</span>api<span class="token punctuation">.</span>nvim_set_keymap
<span class="token keyword">local</span> M <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>

<span class="token keyword">local</span> signature <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"lspsaga.signaturehelp"</span><span class="token punctuation">)</span>
<span class="token comment">-- other LSP saga modules</span>

M<span class="token punctuation">.</span>lsp_mappings <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token keyword">if</span> type <span class="token operator">==</span> <span class="token string">"jdtls"</span> <span class="token keyword">then</span>
    <span class="token function">nnoremap</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token string">"ga"</span><span class="token punctuation">,</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"jdtls"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>code_action<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> silent <span class="token operator">=</span> <span class="token keyword">true</span> <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
  <span class="token keyword">else</span>
    <span class="token function">nnoremap</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token string">"ga"</span><span class="token punctuation">,</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"plugins._telescope"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>lsp_code_actions<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> silent <span class="token operator">=</span> <span class="token keyword">true</span> <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
  <span class="token keyword">end</span>

  <span class="token function">inoremap</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token string">"&lt;C-s>"</span><span class="token punctuation">,</span> signature<span class="token punctuation">.</span>signature_help<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> silent <span class="token operator">=</span> <span class="token keyword">true</span> <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
  <span class="token comment">-- some other mappings here</span>
<span class="token keyword">end</span>

<span class="token keyword">return</span> M</code>`,Ct,An,Ts,Fo,At,C,Xo,Ma,Vo,zo,Na,Bo,Ko,ja,Go,Qo,Dt,Dn,Os,Zo,xt,A,np,Ra,sp,ap,Ua,tp,ep,Ya,op,pp,Tt,xn,Lr=`<code class="language-lua">nvim_lsp<span class="token punctuation">.</span>tsserver<span class="token punctuation">.</span><span class="token function">setup</span><span class="token punctuation">&#123;</span>
<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span>
I have my &#96;tsserver&#96; to be started on every JS<span class="token operator">/</span>TS file regardless of its directory<span class="token punctuation">.</span> With the default config<span class="token punctuation">,</span> it will only start when it found &#96;package<span class="token punctuation">.</span>json&#96; <span class="token keyword">or</span> &#96;<span class="token punctuation">.</span>git&#96; which marks the root directory <span class="token keyword">for</span> the LSP<span class="token punctuation">.</span>

&#96;&#96;&#96;lua
<span class="token comment">-- inside the &#96;servers&#96; table</span>
tsserver <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
<span class="token operator">>></span><span class="token operator">>></span><span class="token operator">>></span><span class="token operator">></span> 06<span class="token function">f717c</span> <span class="token punctuation">(</span>I ACCIDENTALLY DELETED MY LOCAL REPOSITORY LMAO HELP<span class="token punctuation">)</span>
  filetypes <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token string">'javascript'</span><span class="token punctuation">,</span> <span class="token string">'typescript'</span><span class="token punctuation">,</span> <span class="token string">'typescriptreact'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  on_attach <span class="token operator">=</span> custom_on_attach<span class="token punctuation">,</span>
  on_init <span class="token operator">=</span> custom_on_init<span class="token punctuation">,</span>
  root_dir <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">return</span> vim<span class="token punctuation">.</span>loop<span class="token punctuation">.</span><span class="token function">cwd</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">end</span>
<span class="token punctuation">&#125;</span></code>`,Ot,Tn,Hs,lp,Ht,D,cp,qa,ip,rp,Wa,up,kp,Ja,fp,dp,$t,On,Pr=`<code class="language-lua"><span class="token comment">-- inside the &#96;servers&#96; table</span>
svelteserver <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
  on_attach <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>client<span class="token punctuation">)</span>
    mappings<span class="token punctuation">.</span><span class="token function">lsp_mappings</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

    client<span class="token punctuation">.</span>server_capabilities<span class="token punctuation">.</span>completionProvider<span class="token punctuation">.</span>triggerCharacters <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
      <span class="token string">"."</span><span class="token punctuation">,</span> <span class="token string">'"'</span><span class="token punctuation">,</span> <span class="token string">"'"</span><span class="token punctuation">,</span> <span class="token string">"&#96;"</span><span class="token punctuation">,</span> <span class="token string">"/"</span><span class="token punctuation">,</span> <span class="token string">"@"</span><span class="token punctuation">,</span> <span class="token string">"*"</span><span class="token punctuation">,</span>
      <span class="token string">"#"</span><span class="token punctuation">,</span> <span class="token string">"$"</span><span class="token punctuation">,</span> <span class="token string">"+"</span><span class="token punctuation">,</span> <span class="token string">"^"</span><span class="token punctuation">,</span> <span class="token string">"("</span><span class="token punctuation">,</span> <span class="token string">"["</span><span class="token punctuation">,</span> <span class="token string">"-"</span><span class="token punctuation">,</span> <span class="token string">":"</span>
    <span class="token punctuation">&#125;</span>
  <span class="token keyword">end</span><span class="token punctuation">,</span>
  on_init <span class="token operator">=</span> custom_on_init<span class="token punctuation">,</span>
  handlers <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
    <span class="token punctuation">[</span><span class="token string">"textDocument/publishDiagnostics"</span><span class="token punctuation">]</span> <span class="token operator">=</span> is_using_eslint<span class="token punctuation">,</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  filetypes <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token string">'html'</span><span class="token punctuation">,</span> <span class="token string">'svelte'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  settings <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
    svelte <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
      plugin <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
        <span class="token comment">-- some settings</span>
      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span></code>`,Mt,Hn,$s,hp,Nt,Ms,mp,jt,$n,Ir=`<code class="language-lua"><span class="token keyword">local</span> sumneko_root <span class="token operator">=</span> os<span class="token punctuation">.</span><span class="token function">getenv</span><span class="token punctuation">(</span><span class="token string">"HOME"</span><span class="token punctuation">)</span> <span class="token operator">..</span> <span class="token string">"/repos/lua-language-server"</span>

<span class="token comment">-- inside the &#96;servers&#96; table</span>
sumneko_lua <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
  cmd <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
    sumneko_root <span class="token operator">..</span> <span class="token string">"/bin/Linux/lua-language-server"</span><span class="token punctuation">,</span>
    <span class="token string">"-E"</span><span class="token punctuation">,</span>
    sumneko_root <span class="token operator">..</span> <span class="token string">"/main.lua"</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  on_attach <span class="token operator">=</span> custom_on_attach<span class="token punctuation">,</span>
  on_init <span class="token operator">=</span> custom_on_init<span class="token punctuation">,</span>
  settings <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
    Lua <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
      runtime <span class="token operator">=</span> <span class="token punctuation">&#123;</span> version <span class="token operator">=</span> <span class="token string">"LuaJIT"</span><span class="token punctuation">,</span> path <span class="token operator">=</span> vim<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span>package<span class="token punctuation">.</span>path<span class="token punctuation">,</span> <span class="token string">";"</span><span class="token punctuation">)</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
      diagnostics <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
        enable <span class="token operator">=</span> <span class="token keyword">true</span><span class="token punctuation">,</span>
        globals <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
          <span class="token string">"vim"</span><span class="token punctuation">,</span> <span class="token string">"describe"</span><span class="token punctuation">,</span> <span class="token string">"it"</span><span class="token punctuation">,</span> <span class="token string">"before_each"</span><span class="token punctuation">,</span> <span class="token string">"after_each"</span><span class="token punctuation">,</span>
          <span class="token string">"awesome"</span><span class="token punctuation">,</span> <span class="token string">"theme"</span><span class="token punctuation">,</span> <span class="token string">"client"</span><span class="token punctuation">,</span> <span class="token string">"P"</span><span class="token punctuation">,</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
      workspace <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
        preloadFileSize <span class="token operator">=</span> <span class="token number">400</span><span class="token punctuation">,</span>
      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span></code>`,Rt,Mn,Ns,vp,Ut,j,_p,Nn,gp,wp,jn,yp,Ep,Yt,Rn,Sr=`<code class="language-lua">vim<span class="token punctuation">.</span>lsp<span class="token punctuation">.</span>handlers<span class="token punctuation">[</span><span class="token string">"textDocument/publishDiagnostics"</span><span class="token punctuation">]</span> <span class="token operator">=</span> vim<span class="token punctuation">.</span>lsp<span class="token punctuation">.</span><span class="token function">with</span><span class="token punctuation">(</span>
  vim<span class="token punctuation">.</span>lsp<span class="token punctuation">.</span>diagnostic<span class="token punctuation">.</span>on_publish_diagnostics<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>
    virtual_text <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
      prefix <span class="token operator">=</span> <span class="token string">"\xBB"</span><span class="token punctuation">,</span>
      spacing <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">,</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    signs <span class="token operator">=</span> <span class="token keyword">true</span><span class="token punctuation">,</span>
    update_in_insert <span class="token operator">=</span> <span class="token keyword">false</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">)</span>

vim<span class="token punctuation">.</span>fn<span class="token punctuation">.</span><span class="token function">sign_define</span><span class="token punctuation">(</span><span class="token string">'LspDiagnosticsSignError'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> text <span class="token operator">=</span> <span class="token string">"\uF00D"</span><span class="token punctuation">,</span> texthl <span class="token operator">=</span> <span class="token string">"LspDiagnosticsDefaultError"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
vim<span class="token punctuation">.</span>fn<span class="token punctuation">.</span><span class="token function">sign_define</span><span class="token punctuation">(</span><span class="token string">'LspDiagnosticsSignWarning'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> text <span class="token operator">=</span> <span class="token string">"\uF12A"</span><span class="token punctuation">,</span> texthl <span class="token operator">=</span> <span class="token string">"LspDiagnosticsDefaultWarning"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
vim<span class="token punctuation">.</span>fn<span class="token punctuation">.</span><span class="token function">sign_define</span><span class="token punctuation">(</span><span class="token string">'LspDiagnosticsSignInformation'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> text <span class="token operator">=</span> <span class="token string">"\uF129"</span><span class="token punctuation">,</span> texthl <span class="token operator">=</span> <span class="token string">"LspDiagnosticsDefaultInformation"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
vim<span class="token punctuation">.</span>fn<span class="token punctuation">.</span><span class="token function">sign_define</span><span class="token punctuation">(</span><span class="token string">'LspDiagnosticsSignHint'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> text <span class="token operator">=</span> <span class="token string">"\uF834"</span><span class="token punctuation">,</span> texthl <span class="token operator">=</span> <span class="token string">"LspDiagnosticsDefaultHint"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span></code>`,qt,L,bp,Fa,Lp,Pp,Xa,Ip,Sp,Va,Cp,Ap,za,Dp,xp,Wt,Un,js,Tp,Jt,x,Op,Yn,Hp,$p,qn,Mp,Np,Wn,jp,Rp,Ft,X,Up,Ba,Yp,qp,Jn,Wp,Xt,Fn,Rs,Jp,Vt,R,Fp,Ka,Xp,Vp,Ga,zp,Bp,zt,G,Bt,Xn,Cr=`<code class="language-lua"><span class="token keyword">local</span> is_using_eslint <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>_<span class="token punctuation">,</span> _<span class="token punctuation">,</span> result<span class="token punctuation">,</span> client_id<span class="token punctuation">)</span>
  <span class="token keyword">if</span> <span class="token function">is_cfg_present</span><span class="token punctuation">(</span><span class="token string">"/.eslintrc.json"</span><span class="token punctuation">)</span> <span class="token keyword">or</span> <span class="token function">is_cfg_present</span><span class="token punctuation">(</span><span class="token string">"/.eslintrc.js"</span><span class="token punctuation">)</span> <span class="token keyword">then</span>
    <span class="token keyword">return</span>
  <span class="token keyword">end</span>

  <span class="token keyword">return</span> vim<span class="token punctuation">.</span>lsp<span class="token punctuation">.</span>handlers<span class="token punctuation">[</span><span class="token string">"textDocument/publishDiagnostics"</span><span class="token punctuation">]</span><span class="token punctuation">(</span>_<span class="token punctuation">,</span> _<span class="token punctuation">,</span> result<span class="token punctuation">,</span> client_id<span class="token punctuation">)</span>
<span class="token keyword">end</span></code>`,Kt,Q,Kp,Qa,Gp,Qp,Gt,Vn,Us,Zp,Qt,U,nl,zn,sl,al,Bn,tl,el,Zt,Y,ol,Kn,pl,ll,Gn,cl,il,ne,Z,rl,Za,ul,kl,se,Qn,Ar=`<code class="language-lua"><span class="token keyword">local</span> remap <span class="token operator">=</span> vim<span class="token punctuation">.</span>api<span class="token punctuation">.</span>nvim_set_keymap

vim<span class="token punctuation">.</span>g<span class="token punctuation">.</span>vsnip_snippet_dir <span class="token operator">=</span> vim<span class="token punctuation">.</span>fn<span class="token punctuation">.</span><span class="token function">stdpath</span><span class="token punctuation">(</span><span class="token string">"config"</span><span class="token punctuation">)</span><span class="token operator">..</span><span class="token string">"/snippets"</span>

<span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"compe"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
  enabled              <span class="token operator">=</span> <span class="token keyword">true</span><span class="token punctuation">,</span>
  debug                <span class="token operator">=</span> <span class="token keyword">false</span><span class="token punctuation">,</span>
  min_length           <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">,</span>
  preselect            <span class="token operator">=</span> <span class="token string">"disable"</span><span class="token punctuation">,</span>
  source_timeout       <span class="token operator">=</span> <span class="token number">200</span><span class="token punctuation">,</span>
  incomplete_delay     <span class="token operator">=</span> <span class="token number">400</span><span class="token punctuation">,</span>
  allow_prefix_unmatch <span class="token operator">=</span> <span class="token keyword">false</span><span class="token punctuation">,</span>

  source <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
    path     <span class="token operator">=</span> <span class="token keyword">true</span><span class="token punctuation">,</span>
    calc     <span class="token operator">=</span> <span class="token keyword">true</span><span class="token punctuation">,</span>
    buffer   <span class="token operator">=</span> <span class="token keyword">true</span><span class="token punctuation">,</span>
    vsnip    <span class="token operator">=</span> <span class="token keyword">true</span><span class="token punctuation">,</span>
    nvim_lsp <span class="token operator">=</span> <span class="token keyword">true</span><span class="token punctuation">,</span>
    nvim_lua <span class="token operator">=</span> <span class="token keyword">true</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>

Util<span class="token punctuation">.</span>trigger_completion <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token keyword">if</span> vim<span class="token punctuation">.</span>fn<span class="token punctuation">.</span><span class="token function">pumvisible</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">~=</span> <span class="token number">0</span> <span class="token keyword">then</span>
    <span class="token keyword">if</span> vim<span class="token punctuation">.</span>fn<span class="token punctuation">.</span><span class="token function">complete_info</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">"selected"</span><span class="token punctuation">]</span> <span class="token operator">~=</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token keyword">then</span>
      <span class="token keyword">return</span> vim<span class="token punctuation">.</span>fn<span class="token punctuation">[</span><span class="token string">"compe#confirm"</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">end</span>
  <span class="token keyword">end</span>

  <span class="token keyword">local</span> prev_col<span class="token punctuation">,</span> next_col <span class="token operator">=</span> vim<span class="token punctuation">.</span>fn<span class="token punctuation">.</span><span class="token function">col</span><span class="token punctuation">(</span><span class="token string">"."</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> vim<span class="token punctuation">.</span>fn<span class="token punctuation">.</span><span class="token function">col</span><span class="token punctuation">(</span><span class="token string">"."</span><span class="token punctuation">)</span>
  <span class="token keyword">local</span> prev_char <span class="token operator">=</span> vim<span class="token punctuation">.</span>fn<span class="token punctuation">.</span><span class="token function">getline</span><span class="token punctuation">(</span><span class="token string">"."</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token function">sub</span><span class="token punctuation">(</span>prev_col<span class="token punctuation">,</span> prev_col<span class="token punctuation">)</span>
  <span class="token keyword">local</span> next_char <span class="token operator">=</span> vim<span class="token punctuation">.</span>fn<span class="token punctuation">.</span><span class="token function">getline</span><span class="token punctuation">(</span><span class="token string">"."</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token function">sub</span><span class="token punctuation">(</span>next_col<span class="token punctuation">,</span> next_col<span class="token punctuation">)</span>

  <span class="token comment">-- minimal autopairs-like behaviour</span>
  <span class="token keyword">if</span> prev_char <span class="token operator">==</span> <span class="token string">"&#123;"</span> <span class="token keyword">and</span> next_char <span class="token operator">==</span> <span class="token string">""</span> <span class="token keyword">then</span> <span class="token keyword">return</span> Util<span class="token punctuation">.</span><span class="token function">t</span><span class="token punctuation">(</span><span class="token string">"&lt;CR>&#125;&lt;C-o>O"</span><span class="token punctuation">)</span> <span class="token keyword">end</span>
  <span class="token keyword">if</span> prev_char <span class="token operator">==</span> <span class="token string">"["</span> <span class="token keyword">and</span> next_char <span class="token operator">==</span> <span class="token string">""</span> <span class="token keyword">then</span> <span class="token keyword">return</span> Util<span class="token punctuation">.</span><span class="token function">t</span><span class="token punctuation">(</span><span class="token string">"&lt;CR>]&lt;C-o>O"</span><span class="token punctuation">)</span> <span class="token keyword">end</span>
  <span class="token keyword">if</span> prev_char <span class="token operator">==</span> <span class="token string">"("</span> <span class="token keyword">and</span> next_char <span class="token operator">==</span> <span class="token string">""</span> <span class="token keyword">then</span> <span class="token keyword">return</span> Util<span class="token punctuation">.</span><span class="token function">t</span><span class="token punctuation">(</span><span class="token string">"&lt;CR>)&lt;C-o>O"</span><span class="token punctuation">)</span> <span class="token keyword">end</span>
  <span class="token keyword">if</span> prev_char <span class="token operator">==</span> <span class="token string">">"</span> <span class="token keyword">and</span> next_char <span class="token operator">==</span> <span class="token string">"&lt;"</span> <span class="token keyword">then</span> <span class="token keyword">return</span> Util<span class="token punctuation">.</span><span class="token function">t</span><span class="token punctuation">(</span><span class="token string">"&lt;CR>&lt;C-o>O"</span><span class="token punctuation">)</span> <span class="token keyword">end</span> <span class="token comment">-- html indents</span>

  <span class="token keyword">return</span> Util<span class="token punctuation">.</span><span class="token function">t</span><span class="token punctuation">(</span><span class="token string">"&lt;CR>"</span><span class="token punctuation">)</span>
<span class="token keyword">end</span>

<span class="token function">remap</span><span class="token punctuation">(</span>
  <span class="token string">"i"</span><span class="token punctuation">,</span>
  <span class="token string">"&lt;CR>"</span><span class="token punctuation">,</span>
  <span class="token string">"v:lua.Util.trigger_completion()"</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#123;</span> expr <span class="token operator">=</span> <span class="token keyword">true</span><span class="token punctuation">,</span> silent <span class="token operator">=</span> <span class="token keyword">true</span> <span class="token punctuation">&#125;</span>
<span class="token punctuation">)</span>
<span class="token function">remap</span><span class="token punctuation">(</span>
  <span class="token string">"i"</span><span class="token punctuation">,</span>
  <span class="token string">"&lt;Tab>"</span><span class="token punctuation">,</span>
  table<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
    <span class="token string">"pumvisible() ? "&lt;C-n>" : v:lua.Util.check_backspace()"</span><span class="token punctuation">,</span>
    <span class="token string">"? "&lt;Tab>" : compe#confirm()"</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#123;</span> silent <span class="token operator">=</span> <span class="token keyword">true</span><span class="token punctuation">,</span> noremap <span class="token operator">=</span> <span class="token keyword">true</span><span class="token punctuation">,</span> expr <span class="token operator">=</span> <span class="token keyword">true</span> <span class="token punctuation">&#125;</span>
<span class="token punctuation">)</span>

<span class="token function">remap</span><span class="token punctuation">(</span>
  <span class="token string">"i"</span><span class="token punctuation">,</span>
  <span class="token string">"&lt;S-Tab>"</span><span class="token punctuation">,</span>
  <span class="token string">"pumvisible() ? "&lt;C-p>" : "&lt;S-Tab>""</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#123;</span> noremap <span class="token operator">=</span> <span class="token keyword">true</span><span class="token punctuation">,</span> expr <span class="token operator">=</span> <span class="token keyword">true</span> <span class="token punctuation">&#125;</span>
<span class="token punctuation">)</span>
<span class="token function">remap</span><span class="token punctuation">(</span>
  <span class="token string">"i"</span><span class="token punctuation">,</span>
  <span class="token string">"&lt;C-Space>"</span><span class="token punctuation">,</span>
  <span class="token string">"compe#complete()"</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#123;</span> noremap <span class="token operator">=</span> <span class="token keyword">true</span><span class="token punctuation">,</span> expr <span class="token operator">=</span> <span class="token keyword">true</span><span class="token punctuation">,</span> silent <span class="token operator">=</span> <span class="token keyword">true</span> <span class="token punctuation">&#125;</span>
<span class="token punctuation">)</span></code>`,ae,Zn,fl,ns,dl,te,ss,Ys,hl,ee,qs,ml,oe,T,Ws,as,vl,_l,gl,nt,ts,wl,yl,st,es,El,bl,at,os,Ll,pe,nn,Pl,ps,Il,Sl,le;return K=new gr({props:{date:"2021-02-04",$$slots:{default:[Jr]},$$scope:{ctx:H}}}),G=new gr({props:{date:"2021-01-01",$$slots:{default:[Fr]},$$scope:{ctx:H}}}),{c(){f=t("h1"),v=t("a"),m=p("Table of Contents"),y=u(),d=t("ul"),h=t("li"),_=t("p"),I=t("a"),J=p("What is LSP and Why?"),S=u(),V=t("li"),z=t("p"),ls=t("a"),de=p("Neovim builtin LSP client"),he=u(),pn=t("li"),Qs=t("p"),cs=t("a"),me=p("Configuration"),ve=u(),g=t("ul"),Zs=t("li"),na=t("p"),is=t("a"),_e=p("nvim-lspconfig"),ge=u(),sa=t("li"),aa=t("p"),rs=t("a"),we=p("Setup"),ye=u(),ta=t("li"),ea=t("p"),us=t("a"),Ee=p("Mappings"),be=u(),ln=t("li"),oa=t("p"),ks=t("a"),Le=p("Language-specific config"),Pe=u(),F=t("ul"),pa=t("li"),fs=t("a"),Ie=p("tsserver"),Se=u(),la=t("li"),ds=t("a"),Ce=p("svelteserver"),Ae=u(),ca=t("li"),hs=t("a"),De=p("sumneko_lua"),xe=u(),ia=t("li"),ra=t("p"),ms=t("a"),Te=p("Diagnostic"),Oe=u(),ua=t("li"),ka=t("p"),vs=t("a"),He=p("Linting and Formatting"),$e=u(),fa=t("li"),da=t("p"),_s=t("a"),Me=p("Diagnostic Conflict"),Ne=u(),ha=t("li"),ma=t("p"),gs=t("a"),je=p("Completion and Snippets"),Re=u(),va=t("li"),_a=t("p"),ws=t("a"),Ue=p("Closing Note"),ot=u(),cn=t("h1"),ys=t("a"),Ye=p("What is LSP and Why?"),pt=u(),Es=t("blockquote"),bs=t("p"),ga=t("strong"),qe=p("20-08-2021"),We=p(": This post is no longer maintained because I\u2019ve changed my config quite a bit since I wrote this and I don\u2019t feel like updating it :p"),lt=u(),Ls=t("p"),Je=p("If you don\u2019t already know what LSP is, well, LSP is a Language Server Protocol and it was created by Microsoft. It\u2019s a better implementation of language support for a text editor. Instead of having to implement it for every language on every text editor, we only need a server for a specific language and a client for a text editor that can speak to the server."),ct=u(),w=t("p"),Fe=p("Imagine the editor as "),wa=t("code"),Xe=p("X"),Ve=p(" and language feature as "),ya=t("code"),ze=p("Y"),Be=p(", the first solution would take "),Ea=t("code"),Ke=p("X*Y"),Ge=p(" to implement because it needs to implements "),ba=t("em"),Qe=p("every"),Ze=p(" language features for "),La=t("em"),no=p("every"),so=p(" editor. The second solution which is the LSP way would only take "),Pa=t("code"),ao=p("X+Y"),to=p(" because it would only take a server for the language and a client that can speak to that server. The server can be used for any text editor that has a client and the client can speak to any LSP server. No more reinventing the wheel, great!"),it=u(),B=t("p"),eo=p("Here are some resources that explain LSP "),Ia=t("em"),oo=p("way better"),po=p(" and in more detail."),rt=u(),$=t("ul"),Sa=t("li"),rn=t("a"),lo=p("LSP guide for VScode"),co=u(),Ca=t("li"),un=t("a"),io=p("Official page for LSP"),ro=u(),Aa=t("li"),kn=t("a"),uo=p("TJ\u2019s talk about LSP on Vimconf 2020"),ut=u(),fn=t("h1"),Ps=t("a"),ko=p("Neovim builtin LSP client"),kt=u(),M=t("p"),fo=p("I use Neovim\u2019s built-in LSP client which only available on the "),Da=t("code"),ho=p("master"),mo=p(" branch of Neovim at the time of writing this. I was using "),dn=t("a"),vo=p("coc.nvim"),_o=p(" but it was slow on my machine because it uses node and it\u2019s a remote plugin which adds some overhead. It still works great nonetheless, it\u2019s just slow on my machine."),ft=u(),Is=t("p"),go=p("The new neovim\u2019s built-in LSP client is written in Lua and Neovim ships with LuaJIT which makes it super fast."),dt=u(),hn=t("h1"),Ss=t("a"),wo=p("Configuration"),ht=u(),mn=t("h2"),Cs=t("a"),yo=p("nvim-lspconfig"),mt=u(),N=t("p"),Eo=p("Neovim has a repo with LSP configuration for a various language called "),vn=t("a"),bo=p("nvim-lspconfig"),Lo=p(", this is "),xa=t("em"),Po=p("NOT"),Io=p(" where the LSP client lives, the client already ships with Neovim. It\u2019s just a repo that holds the configuration for the client."),vt=u(),_n=t("p"),So=p("I have this piece of code on my config to install it. I use "),gn=t("a"),Co=p("packer.nvim"),_t=u(),wn=t("pre"),gt=u(),yn=t("h2"),As=t("a"),Ao=p("Setup"),wt=u(),Ds=t("p"),Do=p("I have a directory filled with LSP related config. Here\u2019s some snippet that sets up the LSP."),yt=u(),En=t("pre"),Et=u(),b=t("p"),xo=p("I made a "),Ta=t("code"),To=p("custom_on_attach"),Oo=p(" function to attach LSP specific mappings. I also made a custom "),Oa=t("code"),Ho=p("on_init"),$o=p(" function to notify me when the LSP is started and enable "),Ha=t("code"),Mo=p("incremental_sync"),No=p(". Though, I\u2019m not sure if "),$a=t("code"),jo=p("on_init"),Ro=p(" is the correct thing that I\u2019m looking for. Sometimes it notifies me when the LSP server hasn\u2019t even started yet :p"),bt=u(),$l(K.$$.fragment),Lt=u(),bn=t("p"),Uo=p("You can find the full content of this file "),Ln=t("a"),Yo=p("here"),Pt=u(),Pn=t("h2"),xs=t("a"),qo=p("Mappings"),It=u(),In=t("p"),Wo=p("Here are some of my LSP related mappings which you can find in the file "),Sn=t("a"),Jo=p("here"),St=u(),Cn=t("pre"),Ct=u(),An=t("h2"),Ts=t("a"),Fo=p("Language-specific config"),At=u(),C=t("p"),Xo=p("I have most of my LSP config to be default but I gave several LSP an option like "),Ma=t("code"),Vo=p("tsserver"),zo=p(", "),Na=t("code"),Bo=p("svelteserver"),Ko=p(", or "),ja=t("code"),Go=p("sumneko_lua"),Qo=p("."),Dt=u(),Dn=t("h3"),Os=t("a"),Zo=p("tsserver"),xt=u(),A=t("p"),np=p("I have my "),Ra=t("code"),sp=p("tsserver"),ap=p(" to be started on every JS/TS file regardless of its directory. The default config will only start when it found "),Ua=t("code"),tp=p("package.json"),ep=p(" or "),Ya=t("code"),op=p(".git"),pp=p("."),Tt=u(),xn=t("pre"),Ot=u(),Tn=t("h3"),Hs=t("a"),lp=p("svelteserver"),Ht=u(),D=t("p"),cp=p("I disabled its HTML emmet suggestion and removed "),qa=t("code"),ip=p(">"),rp=p(" and "),Wa=t("code"),up=p("<"),kp=p(" from "),Ja=t("code"),fp=p("triggerCharacters"),dp=p(". They\u2019re so annoying to me."),$t=u(),On=t("pre"),Mt=u(),Hn=t("h3"),$s=t("a"),hp=p("sumneko_lua"),Nt=u(),Ms=t("p"),mp=p("[lua-language-server][lua-ls] is a bit different because I compiled it from source so it needs some extra setup."),jt=u(),$n=t("pre"),Rt=u(),Mn=t("h2"),Ns=t("a"),vp=p("Diagnostic"),Ut=u(),j=t("p"),_p=p("I was using "),Nn=t("a"),gp=p("diagnostic-nvim"),wp=p(" before "),jn=t("a"),yp=p("this big PR"),Ep=p(" got merged which makes diagnostic-nvim redundant. Here\u2019s some of my diagnostic config."),Yt=u(),Rn=t("pre"),qt=u(),L=t("p"),bp=p("I set the prefix for "),Fa=t("code"),Lp=p("virtual_text"),Pp=p(" to be "),Xa=t("code"),Ip=p("\xBB"),Sp=p(" because I don\u2019t really like the default one and enabled "),Va=t("code"),Cp=p("signs"),Ap=p(" for the diagnostic hint. I also made it to only update the diagnostic when I switch between insert mode and normal mode because it\u2019s quite annoying when I haven\u2019t finished typing and get yelled at by LSP because it expects me to put "),za=t("code"),Dp=p("="),xp=p(" after a variable name that I haven\u2019t even finished typing yet."),Wt=u(),Un=t("h2"),js=t("a"),Tp=p("Linting and Formatting"),Jt=u(),x=t("p"),Op=p("I recently started using [null-ls][efm-ls] to run "),Yn=t("a"),Hp=p("eslint"),$p=p(" and formatters like "),qn=t("a"),Mp=p("prettier"),Np=p(" and "),Wn=t("a"),jp=p("stylua"),Rp=p("."),Ft=u(),X=t("p"),Up=p("You can get my full config for "),Ba=t("code"),Yp=p("null-ls"),qp=u(),Jn=t("a"),Wp=p("here"),Xt=u(),Fn=t("h2"),Rs=t("a"),Jp=p("Diagnostic Conflict"),Vt=u(),R=t("p"),Fp=p("When I use efm-langserver, the diagnostic that comes from the LSP (like "),Ka=t("code"),Xp=p("tsserver"),Vp=p(") and external linter that efm-langserver uses are conflicting. So, I made a custom function for it to check if there\u2019s a file like "),Ga=t("code"),zp=p(".eslintrc.js"),Bp=p(", it will turn off the diagnostic that comes from LSP and use ESlint instead."),zt=u(),$l(G.$$.fragment),Bt=u(),Xn=t("pre"),Kt=u(),Q=t("p"),Kp=p("I\u2019ve overridden the "),Qa=t("code"),Gp=p('vim.lsp.handlers["textDocument/publishDiagnostics"]'),Qp=p(" anyway so reusing it would also works and it looks way cleaner."),Gt=u(),Vn=t("h2"),Us=t("a"),Zp=p("Completion and Snippets"),Qt=u(),U=t("p"),nl=p("I use a completion and snippet plugin to make my life easier. For completion, I use "),zn=t("a"),sl=p("nvim-compe"),al=p(", previously I was using "),Bn=t("a"),tl=p("completion-nvim"),el=p(" but I had some issues with it such as path completion sometimes not showing up and flickering."),Zt=u(),Y=t("p"),ol=p("Snippet wise, I use "),Kn=t("a"),pl=p("vim-vsnip"),ll=p(". I was going to use "),Gn=t("a"),cl=p("snippets.nvim"),il=p(" but it doesn\u2019t integrate well enough with LSP\u2019s snippet."),ne=u(),Z=t("p"),rl=p("Here\u2019s some of my "),Za=t("code"),ul=p("nvim-compe"),kl=p(" config"),se=u(),Qn=t("pre"),ae=u(),Zn=t("p"),fl=p("You can get the full config for my completion setup "),ns=t("a"),dl=p("here"),te=u(),ss=t("h1"),Ys=t("a"),hl=p("Closing Note"),ee=u(),qs=t("p"),ml=p("I\u2019m pretty pleased with my current setup. Kudos to Neovim\u2019s developer that brings LSP client to be a built-in feature! These are of course some other great LSP client alternatives for (Neo)vim, definitely check them out!"),oe=u(),T=t("ul"),Ws=t("li"),as=t("a"),vl=p("coc.nvim"),_l=p(" (highly recommend this if you\u2019re just getting started)"),gl=u(),nt=t("li"),ts=t("a"),wl=p("LanguageClient-neovim"),yl=u(),st=t("li"),es=t("a"),El=p("vim-lsp"),bl=u(),at=t("li"),os=t("a"),Ll=p("ALE"),pe=u(),nn=t("p"),Pl=p("Here\u2019s my "),ps=t("a"),Il=p("whole LSP config"),Sl=p(" if you want them. If you\u2019ve read this far then thank you and have a wonderful day :)"),this.h()},l(n){f=e(n,"H1",{id:!0});var c=o(f);v=e(c,"A",{href:!0});var tt=o(v);m=l(tt,"Table of Contents"),tt.forEach(a),c.forEach(a),y=k(n),d=e(n,"UL",{});var O=o(d);h=e(O,"LI",{});var Yl=o(h);_=e(Yl,"P",{});var ql=o(_);I=e(ql,"A",{href:!0});var Wl=o(I);J=l(Wl,"What is LSP and Why?"),Wl.forEach(a),ql.forEach(a),Yl.forEach(a),S=k(O),V=e(O,"LI",{});var Jl=o(V);z=e(Jl,"P",{});var Fl=o(z);ls=e(Fl,"A",{href:!0});var Xl=o(ls);de=l(Xl,"Neovim builtin LSP client"),Xl.forEach(a),Fl.forEach(a),Jl.forEach(a),he=k(O),pn=e(O,"LI",{});var ce=o(pn);Qs=e(ce,"P",{});var Vl=o(Qs);cs=e(Vl,"A",{href:!0});var zl=o(cs);me=l(zl,"Configuration"),zl.forEach(a),Vl.forEach(a),ve=k(ce),g=e(ce,"UL",{});var E=o(g);Zs=e(E,"LI",{});var Bl=o(Zs);na=e(Bl,"P",{});var Kl=o(na);is=e(Kl,"A",{href:!0});var Gl=o(is);_e=l(Gl,"nvim-lspconfig"),Gl.forEach(a),Kl.forEach(a),Bl.forEach(a),ge=k(E),sa=e(E,"LI",{});var Ql=o(sa);aa=e(Ql,"P",{});var Zl=o(aa);rs=e(Zl,"A",{href:!0});var nc=o(rs);we=l(nc,"Setup"),nc.forEach(a),Zl.forEach(a),Ql.forEach(a),ye=k(E),ta=e(E,"LI",{});var sc=o(ta);ea=e(sc,"P",{});var ac=o(ea);us=e(ac,"A",{href:!0});var tc=o(us);Ee=l(tc,"Mappings"),tc.forEach(a),ac.forEach(a),sc.forEach(a),be=k(E),ln=e(E,"LI",{});var ie=o(ln);oa=e(ie,"P",{});var ec=o(oa);ks=e(ec,"A",{href:!0});var oc=o(ks);Le=l(oc,"Language-specific config"),oc.forEach(a),ec.forEach(a),Pe=k(ie),F=e(ie,"UL",{});var Js=o(F);pa=e(Js,"LI",{});var pc=o(pa);fs=e(pc,"A",{href:!0});var lc=o(fs);Ie=l(lc,"tsserver"),lc.forEach(a),pc.forEach(a),Se=k(Js),la=e(Js,"LI",{});var cc=o(la);ds=e(cc,"A",{href:!0});var ic=o(ds);Ce=l(ic,"svelteserver"),ic.forEach(a),cc.forEach(a),Ae=k(Js),ca=e(Js,"LI",{});var rc=o(ca);hs=e(rc,"A",{href:!0});var uc=o(hs);De=l(uc,"sumneko_lua"),uc.forEach(a),rc.forEach(a),Js.forEach(a),ie.forEach(a),xe=k(E),ia=e(E,"LI",{});var kc=o(ia);ra=e(kc,"P",{});var fc=o(ra);ms=e(fc,"A",{href:!0});var dc=o(ms);Te=l(dc,"Diagnostic"),dc.forEach(a),fc.forEach(a),kc.forEach(a),Oe=k(E),ua=e(E,"LI",{});var hc=o(ua);ka=e(hc,"P",{});var mc=o(ka);vs=e(mc,"A",{href:!0});var vc=o(vs);He=l(vc,"Linting and Formatting"),vc.forEach(a),mc.forEach(a),hc.forEach(a),$e=k(E),fa=e(E,"LI",{});var _c=o(fa);da=e(_c,"P",{});var gc=o(da);_s=e(gc,"A",{href:!0});var wc=o(_s);Me=l(wc,"Diagnostic Conflict"),wc.forEach(a),gc.forEach(a),_c.forEach(a),Ne=k(E),ha=e(E,"LI",{});var yc=o(ha);ma=e(yc,"P",{});var Ec=o(ma);gs=e(Ec,"A",{href:!0});var bc=o(gs);je=l(bc,"Completion and Snippets"),bc.forEach(a),Ec.forEach(a),yc.forEach(a),E.forEach(a),ce.forEach(a),Re=k(O),va=e(O,"LI",{});var Lc=o(va);_a=e(Lc,"P",{});var Pc=o(_a);ws=e(Pc,"A",{href:!0});var Ic=o(ws);Ue=l(Ic,"Closing Note"),Ic.forEach(a),Pc.forEach(a),Lc.forEach(a),O.forEach(a),ot=k(n),cn=e(n,"H1",{id:!0});var Sc=o(cn);ys=e(Sc,"A",{href:!0});var Cc=o(ys);Ye=l(Cc,"What is LSP and Why?"),Cc.forEach(a),Sc.forEach(a),pt=k(n),Es=e(n,"BLOCKQUOTE",{});var Ac=o(Es);bs=e(Ac,"P",{});var Cl=o(bs);ga=e(Cl,"STRONG",{});var Dc=o(ga);qe=l(Dc,"20-08-2021"),Dc.forEach(a),We=l(Cl,": This post is no longer maintained because I\u2019ve changed my config quite a bit since I wrote this and I don\u2019t feel like updating it :p"),Cl.forEach(a),Ac.forEach(a),lt=k(n),Ls=e(n,"P",{});var xc=o(Ls);Je=l(xc,"If you don\u2019t already know what LSP is, well, LSP is a Language Server Protocol and it was created by Microsoft. It\u2019s a better implementation of language support for a text editor. Instead of having to implement it for every language on every text editor, we only need a server for a specific language and a client for a text editor that can speak to the server."),xc.forEach(a),ct=k(n),w=e(n,"P",{});var P=o(w);Fe=l(P,"Imagine the editor as "),wa=e(P,"CODE",{});var Tc=o(wa);Xe=l(Tc,"X"),Tc.forEach(a),Ve=l(P," and language feature as "),ya=e(P,"CODE",{});var Oc=o(ya);ze=l(Oc,"Y"),Oc.forEach(a),Be=l(P,", the first solution would take "),Ea=e(P,"CODE",{});var Hc=o(Ea);Ke=l(Hc,"X*Y"),Hc.forEach(a),Ge=l(P," to implement because it needs to implements "),ba=e(P,"EM",{});var $c=o(ba);Qe=l($c,"every"),$c.forEach(a),Ze=l(P," language features for "),La=e(P,"EM",{});var Mc=o(La);no=l(Mc,"every"),Mc.forEach(a),so=l(P," editor. The second solution which is the LSP way would only take "),Pa=e(P,"CODE",{});var Nc=o(Pa);ao=l(Nc,"X+Y"),Nc.forEach(a),to=l(P," because it would only take a server for the language and a client that can speak to that server. The server can be used for any text editor that has a client and the client can speak to any LSP server. No more reinventing the wheel, great!"),P.forEach(a),it=k(n),B=e(n,"P",{});var re=o(B);eo=l(re,"Here are some resources that explain LSP "),Ia=e(re,"EM",{});var jc=o(Ia);oo=l(jc,"way better"),jc.forEach(a),po=l(re," and in more detail."),re.forEach(a),rt=k(n),$=e(n,"UL",{});var Fs=o($);Sa=e(Fs,"LI",{});var Rc=o(Sa);rn=e(Rc,"A",{href:!0,rel:!0});var Uc=o(rn);lo=l(Uc,"LSP guide for VScode"),Uc.forEach(a),Rc.forEach(a),co=k(Fs),Ca=e(Fs,"LI",{});var Yc=o(Ca);un=e(Yc,"A",{href:!0,rel:!0});var qc=o(un);io=l(qc,"Official page for LSP"),qc.forEach(a),Yc.forEach(a),ro=k(Fs),Aa=e(Fs,"LI",{});var Wc=o(Aa);kn=e(Wc,"A",{href:!0,rel:!0});var Jc=o(kn);uo=l(Jc,"TJ\u2019s talk about LSP on Vimconf 2020"),Jc.forEach(a),Wc.forEach(a),Fs.forEach(a),ut=k(n),fn=e(n,"H1",{id:!0});var Fc=o(fn);Ps=e(Fc,"A",{href:!0});var Xc=o(Ps);ko=l(Xc,"Neovim builtin LSP client"),Xc.forEach(a),Fc.forEach(a),kt=k(n),M=e(n,"P",{});var Xs=o(M);fo=l(Xs,"I use Neovim\u2019s built-in LSP client which only available on the "),Da=e(Xs,"CODE",{});var Vc=o(Da);ho=l(Vc,"master"),Vc.forEach(a),mo=l(Xs," branch of Neovim at the time of writing this. I was using "),dn=e(Xs,"A",{href:!0,rel:!0});var zc=o(dn);vo=l(zc,"coc.nvim"),zc.forEach(a),_o=l(Xs," but it was slow on my machine because it uses node and it\u2019s a remote plugin which adds some overhead. It still works great nonetheless, it\u2019s just slow on my machine."),Xs.forEach(a),ft=k(n),Is=e(n,"P",{});var Bc=o(Is);go=l(Bc,"The new neovim\u2019s built-in LSP client is written in Lua and Neovim ships with LuaJIT which makes it super fast."),Bc.forEach(a),dt=k(n),hn=e(n,"H1",{id:!0});var Kc=o(hn);Ss=e(Kc,"A",{href:!0});var Gc=o(Ss);wo=l(Gc,"Configuration"),Gc.forEach(a),Kc.forEach(a),ht=k(n),mn=e(n,"H2",{id:!0});var Qc=o(mn);Cs=e(Qc,"A",{href:!0});var Zc=o(Cs);yo=l(Zc,"nvim-lspconfig"),Zc.forEach(a),Qc.forEach(a),mt=k(n),N=e(n,"P",{});var Vs=o(N);Eo=l(Vs,"Neovim has a repo with LSP configuration for a various language called "),vn=e(Vs,"A",{href:!0,rel:!0});var ni=o(vn);bo=l(ni,"nvim-lspconfig"),ni.forEach(a),Lo=l(Vs,", this is "),xa=e(Vs,"EM",{});var si=o(xa);Po=l(si,"NOT"),si.forEach(a),Io=l(Vs," where the LSP client lives, the client already ships with Neovim. It\u2019s just a repo that holds the configuration for the client."),Vs.forEach(a),vt=k(n),_n=e(n,"P",{});var Al=o(_n);So=l(Al,"I have this piece of code on my config to install it. I use "),gn=e(Al,"A",{href:!0,rel:!0});var ai=o(gn);Co=l(ai,"packer.nvim"),ai.forEach(a),Al.forEach(a),_t=k(n),wn=e(n,"PRE",{class:!0});var Dr=o(wn);Dr.forEach(a),gt=k(n),yn=e(n,"H2",{id:!0});var ti=o(yn);As=e(ti,"A",{href:!0});var ei=o(As);Ao=l(ei,"Setup"),ei.forEach(a),ti.forEach(a),wt=k(n),Ds=e(n,"P",{});var oi=o(Ds);Do=l(oi,"I have a directory filled with LSP related config. Here\u2019s some snippet that sets up the LSP."),oi.forEach(a),yt=k(n),En=e(n,"PRE",{class:!0});var xr=o(En);xr.forEach(a),Et=k(n),b=e(n,"P",{});var q=o(b);xo=l(q,"I made a "),Ta=e(q,"CODE",{});var pi=o(Ta);To=l(pi,"custom_on_attach"),pi.forEach(a),Oo=l(q," function to attach LSP specific mappings. I also made a custom "),Oa=e(q,"CODE",{});var li=o(Oa);Ho=l(li,"on_init"),li.forEach(a),$o=l(q," function to notify me when the LSP is started and enable "),Ha=e(q,"CODE",{});var ci=o(Ha);Mo=l(ci,"incremental_sync"),ci.forEach(a),No=l(q,". Though, I\u2019m not sure if "),$a=e(q,"CODE",{});var ii=o($a);jo=l(ii,"on_init"),ii.forEach(a),Ro=l(q," is the correct thing that I\u2019m looking for. Sometimes it notifies me when the LSP server hasn\u2019t even started yet :p"),q.forEach(a),bt=k(n),Ml(K.$$.fragment,n),Lt=k(n),bn=e(n,"P",{});var Dl=o(bn);Uo=l(Dl,"You can find the full content of this file "),Ln=e(Dl,"A",{href:!0,rel:!0});var ri=o(Ln);Yo=l(ri,"here"),ri.forEach(a),Dl.forEach(a),Pt=k(n),Pn=e(n,"H2",{id:!0});var ui=o(Pn);xs=e(ui,"A",{href:!0});var ki=o(xs);qo=l(ki,"Mappings"),ki.forEach(a),ui.forEach(a),It=k(n),In=e(n,"P",{});var xl=o(In);Wo=l(xl,"Here are some of my LSP related mappings which you can find in the file "),Sn=e(xl,"A",{href:!0,rel:!0});var fi=o(Sn);Jo=l(fi,"here"),fi.forEach(a),xl.forEach(a),St=k(n),Cn=e(n,"PRE",{class:!0});var Tr=o(Cn);Tr.forEach(a),Ct=k(n),An=e(n,"H2",{id:!0});var di=o(An);Ts=e(di,"A",{href:!0});var hi=o(Ts);Fo=l(hi,"Language-specific config"),hi.forEach(a),di.forEach(a),At=k(n),C=e(n,"P",{});var sn=o(C);Xo=l(sn,"I have most of my LSP config to be default but I gave several LSP an option like "),Ma=e(sn,"CODE",{});var mi=o(Ma);Vo=l(mi,"tsserver"),mi.forEach(a),zo=l(sn,", "),Na=e(sn,"CODE",{});var vi=o(Na);Bo=l(vi,"svelteserver"),vi.forEach(a),Ko=l(sn,", or "),ja=e(sn,"CODE",{});var _i=o(ja);Go=l(_i,"sumneko_lua"),_i.forEach(a),Qo=l(sn,"."),sn.forEach(a),Dt=k(n),Dn=e(n,"H3",{id:!0});var gi=o(Dn);Os=e(gi,"A",{href:!0});var wi=o(Os);Zo=l(wi,"tsserver"),wi.forEach(a),gi.forEach(a),xt=k(n),A=e(n,"P",{});var an=o(A);np=l(an,"I have my "),Ra=e(an,"CODE",{});var yi=o(Ra);sp=l(yi,"tsserver"),yi.forEach(a),ap=l(an," to be started on every JS/TS file regardless of its directory. The default config will only start when it found "),Ua=e(an,"CODE",{});var Ei=o(Ua);tp=l(Ei,"package.json"),Ei.forEach(a),ep=l(an," or "),Ya=e(an,"CODE",{});var bi=o(Ya);op=l(bi,".git"),bi.forEach(a),pp=l(an,"."),an.forEach(a),Tt=k(n),xn=e(n,"PRE",{class:!0});var Or=o(xn);Or.forEach(a),Ot=k(n),Tn=e(n,"H3",{id:!0});var Li=o(Tn);Hs=e(Li,"A",{href:!0});var Pi=o(Hs);lp=l(Pi,"svelteserver"),Pi.forEach(a),Li.forEach(a),Ht=k(n),D=e(n,"P",{});var tn=o(D);cp=l(tn,"I disabled its HTML emmet suggestion and removed "),qa=e(tn,"CODE",{});var Ii=o(qa);ip=l(Ii,">"),Ii.forEach(a),rp=l(tn," and "),Wa=e(tn,"CODE",{});var Si=o(Wa);up=l(Si,"<"),Si.forEach(a),kp=l(tn," from "),Ja=e(tn,"CODE",{});var Ci=o(Ja);fp=l(Ci,"triggerCharacters"),Ci.forEach(a),dp=l(tn,". They\u2019re so annoying to me."),tn.forEach(a),$t=k(n),On=e(n,"PRE",{class:!0});var Hr=o(On);Hr.forEach(a),Mt=k(n),Hn=e(n,"H3",{id:!0});var Ai=o(Hn);$s=e(Ai,"A",{href:!0});var Di=o($s);hp=l(Di,"sumneko_lua"),Di.forEach(a),Ai.forEach(a),Nt=k(n),Ms=e(n,"P",{});var xi=o(Ms);mp=l(xi,"[lua-language-server][lua-ls] is a bit different because I compiled it from source so it needs some extra setup."),xi.forEach(a),jt=k(n),$n=e(n,"PRE",{class:!0});var $r=o($n);$r.forEach(a),Rt=k(n),Mn=e(n,"H2",{id:!0});var Ti=o(Mn);Ns=e(Ti,"A",{href:!0});var Oi=o(Ns);vp=l(Oi,"Diagnostic"),Oi.forEach(a),Ti.forEach(a),Ut=k(n),j=e(n,"P",{});var zs=o(j);_p=l(zs,"I was using "),Nn=e(zs,"A",{href:!0,rel:!0});var Hi=o(Nn);gp=l(Hi,"diagnostic-nvim"),Hi.forEach(a),wp=l(zs," before "),jn=e(zs,"A",{href:!0,rel:!0});var $i=o(jn);yp=l($i,"this big PR"),$i.forEach(a),Ep=l(zs," got merged which makes diagnostic-nvim redundant. Here\u2019s some of my diagnostic config."),zs.forEach(a),Yt=k(n),Rn=e(n,"PRE",{class:!0});var Mr=o(Rn);Mr.forEach(a),qt=k(n),L=e(n,"P",{});var W=o(L);bp=l(W,"I set the prefix for "),Fa=e(W,"CODE",{});var Mi=o(Fa);Lp=l(Mi,"virtual_text"),Mi.forEach(a),Pp=l(W," to be "),Xa=e(W,"CODE",{});var Ni=o(Xa);Ip=l(Ni,"\xBB"),Ni.forEach(a),Sp=l(W," because I don\u2019t really like the default one and enabled "),Va=e(W,"CODE",{});var ji=o(Va);Cp=l(ji,"signs"),ji.forEach(a),Ap=l(W," for the diagnostic hint. I also made it to only update the diagnostic when I switch between insert mode and normal mode because it\u2019s quite annoying when I haven\u2019t finished typing and get yelled at by LSP because it expects me to put "),za=e(W,"CODE",{});var Ri=o(za);Dp=l(Ri,"="),Ri.forEach(a),xp=l(W," after a variable name that I haven\u2019t even finished typing yet."),W.forEach(a),Wt=k(n),Un=e(n,"H2",{id:!0});var Ui=o(Un);js=e(Ui,"A",{href:!0});var Yi=o(js);Tp=l(Yi,"Linting and Formatting"),Yi.forEach(a),Ui.forEach(a),Jt=k(n),x=e(n,"P",{});var en=o(x);Op=l(en,"I recently started using [null-ls][efm-ls] to run "),Yn=e(en,"A",{href:!0,rel:!0});var qi=o(Yn);Hp=l(qi,"eslint"),qi.forEach(a),$p=l(en," and formatters like "),qn=e(en,"A",{href:!0,rel:!0});var Wi=o(qn);Mp=l(Wi,"prettier"),Wi.forEach(a),Np=l(en," and "),Wn=e(en,"A",{href:!0,rel:!0});var Ji=o(Wn);jp=l(Ji,"stylua"),Ji.forEach(a),Rp=l(en,"."),en.forEach(a),Ft=k(n),X=e(n,"P",{});var et=o(X);Up=l(et,"You can get my full config for "),Ba=e(et,"CODE",{});var Fi=o(Ba);Yp=l(Fi,"null-ls"),Fi.forEach(a),qp=k(et),Jn=e(et,"A",{href:!0,rel:!0});var Xi=o(Jn);Wp=l(Xi,"here"),Xi.forEach(a),et.forEach(a),Xt=k(n),Fn=e(n,"H2",{id:!0});var Vi=o(Fn);Rs=e(Vi,"A",{href:!0});var zi=o(Rs);Jp=l(zi,"Diagnostic Conflict"),zi.forEach(a),Vi.forEach(a),Vt=k(n),R=e(n,"P",{});var Bs=o(R);Fp=l(Bs,"When I use efm-langserver, the diagnostic that comes from the LSP (like "),Ka=e(Bs,"CODE",{});var Bi=o(Ka);Xp=l(Bi,"tsserver"),Bi.forEach(a),Vp=l(Bs,") and external linter that efm-langserver uses are conflicting. So, I made a custom function for it to check if there\u2019s a file like "),Ga=e(Bs,"CODE",{});var Ki=o(Ga);zp=l(Ki,".eslintrc.js"),Ki.forEach(a),Bp=l(Bs,", it will turn off the diagnostic that comes from LSP and use ESlint instead."),Bs.forEach(a),zt=k(n),Ml(G.$$.fragment,n),Bt=k(n),Xn=e(n,"PRE",{class:!0});var Nr=o(Xn);Nr.forEach(a),Kt=k(n),Q=e(n,"P",{});var ue=o(Q);Kp=l(ue,"I\u2019ve overridden the "),Qa=e(ue,"CODE",{});var Gi=o(Qa);Gp=l(Gi,'vim.lsp.handlers["textDocument/publishDiagnostics"]'),Gi.forEach(a),Qp=l(ue," anyway so reusing it would also works and it looks way cleaner."),ue.forEach(a),Gt=k(n),Vn=e(n,"H2",{id:!0});var Qi=o(Vn);Us=e(Qi,"A",{href:!0});var Zi=o(Us);Zp=l(Zi,"Completion and Snippets"),Zi.forEach(a),Qi.forEach(a),Qt=k(n),U=e(n,"P",{});var Ks=o(U);nl=l(Ks,"I use a completion and snippet plugin to make my life easier. For completion, I use "),zn=e(Ks,"A",{href:!0,rel:!0});var nr=o(zn);sl=l(nr,"nvim-compe"),nr.forEach(a),al=l(Ks,", previously I was using "),Bn=e(Ks,"A",{href:!0,rel:!0});var sr=o(Bn);tl=l(sr,"completion-nvim"),sr.forEach(a),el=l(Ks," but I had some issues with it such as path completion sometimes not showing up and flickering."),Ks.forEach(a),Zt=k(n),Y=e(n,"P",{});var Gs=o(Y);ol=l(Gs,"Snippet wise, I use "),Kn=e(Gs,"A",{href:!0,rel:!0});var ar=o(Kn);pl=l(ar,"vim-vsnip"),ar.forEach(a),ll=l(Gs,". I was going to use "),Gn=e(Gs,"A",{href:!0,rel:!0});var tr=o(Gn);cl=l(tr,"snippets.nvim"),tr.forEach(a),il=l(Gs," but it doesn\u2019t integrate well enough with LSP\u2019s snippet."),Gs.forEach(a),ne=k(n),Z=e(n,"P",{});var ke=o(Z);rl=l(ke,"Here\u2019s some of my "),Za=e(ke,"CODE",{});var er=o(Za);ul=l(er,"nvim-compe"),er.forEach(a),kl=l(ke," config"),ke.forEach(a),se=k(n),Qn=e(n,"PRE",{class:!0});var jr=o(Qn);jr.forEach(a),ae=k(n),Zn=e(n,"P",{});var Tl=o(Zn);fl=l(Tl,"You can get the full config for my completion setup "),ns=e(Tl,"A",{href:!0,rel:!0});var or=o(ns);dl=l(or,"here"),or.forEach(a),Tl.forEach(a),te=k(n),ss=e(n,"H1",{id:!0});var pr=o(ss);Ys=e(pr,"A",{href:!0});var lr=o(Ys);hl=l(lr,"Closing Note"),lr.forEach(a),pr.forEach(a),ee=k(n),qs=e(n,"P",{});var cr=o(qs);ml=l(cr,"I\u2019m pretty pleased with my current setup. Kudos to Neovim\u2019s developer that brings LSP client to be a built-in feature! These are of course some other great LSP client alternatives for (Neo)vim, definitely check them out!"),cr.forEach(a),oe=k(n),T=e(n,"UL",{});var on=o(T);Ws=e(on,"LI",{});var Ol=o(Ws);as=e(Ol,"A",{href:!0,rel:!0});var ir=o(as);vl=l(ir,"coc.nvim"),ir.forEach(a),_l=l(Ol," (highly recommend this if you\u2019re just getting started)"),Ol.forEach(a),gl=k(on),nt=e(on,"LI",{});var rr=o(nt);ts=e(rr,"A",{href:!0,rel:!0});var ur=o(ts);wl=l(ur,"LanguageClient-neovim"),ur.forEach(a),rr.forEach(a),yl=k(on),st=e(on,"LI",{});var kr=o(st);es=e(kr,"A",{href:!0,rel:!0});var fr=o(es);El=l(fr,"vim-lsp"),fr.forEach(a),kr.forEach(a),bl=k(on),at=e(on,"LI",{});var dr=o(at);os=e(dr,"A",{href:!0,rel:!0});var hr=o(os);Ll=l(hr,"ALE"),hr.forEach(a),dr.forEach(a),on.forEach(a),pe=k(n),nn=e(n,"P",{});var fe=o(nn);Pl=l(fe,"Here\u2019s my "),ps=e(fe,"A",{href:!0,rel:!0});var mr=o(ps);Il=l(mr,"whole LSP config"),mr.forEach(a),Sl=l(fe," if you want them. If you\u2019ve read this far then thank you and have a wonderful day :)"),fe.forEach(a),this.h()},h(){r(v,"href","#table-of-contents"),r(f,"id","table-of-contents"),r(I,"href","#what-is-lsp-and-why"),r(ls,"href","#neovim-builtin-lsp-client"),r(cs,"href","#configuration"),r(is,"href","#nvim-lspconfig"),r(rs,"href","#setup"),r(us,"href","#mappings"),r(ks,"href","#language-specific-config"),r(fs,"href","#tsserver"),r(ds,"href","#svelteserver"),r(hs,"href","#sumneko_lua"),r(ms,"href","#diagnostic"),r(vs,"href","#linting-and-formatting"),r(_s,"href","#diagnostic-conflict"),r(gs,"href","#completion-and-snippets"),r(ws,"href","#closing-note"),r(ys,"href","#what-is-lsp-and-why"),r(cn,"id","what-is-lsp-and-why"),r(rn,"href","https://code.visualstudio.com/api/language-extensions/language-server-extension-guide"),r(rn,"rel","nofollow"),r(un,"href","https://microsoft.github.io/language-server-protocol/"),r(un,"rel","nofollow"),r(kn,"href","https://www.youtube.com/watch?v=C9X5VF9ASac"),r(kn,"rel","nofollow"),r(Ps,"href","#neovim-builtin-lsp-client"),r(fn,"id","neovim-builtin-lsp-client"),r(dn,"href","https://github.com/neoclide/coc.nvim"),r(dn,"rel","nofollow"),r(Ss,"href","#configuration"),r(hn,"id","configuration"),r(Cs,"href","#nvim-lspconfig"),r(mn,"id","nvim-lspconfig"),r(vn,"href","https://github.com/neovim/nvim-lspconfig"),r(vn,"rel","nofollow"),r(gn,"href","https://github.com/wbthomason/packer.nvim"),r(gn,"rel","nofollow"),r(wn,"class","language-lua"),r(As,"href","#setup"),r(yn,"id","setup"),r(En,"class","language-lua"),r(Ln,"href","https://github.com/elianiva/dotfiles/blob/950ba38bda8230da8071fc72cf3d8617d6288565/config/nvim/lua/modules/lsp/init.lua"),r(Ln,"rel","nofollow"),r(xs,"href","#mappings"),r(Pn,"id","mappings"),r(Sn,"href","https://github.com/elianiva/dotfiles/blob/950ba38bda8230da8071fc72cf3d8617d6288565/config/nvim/lua/modules/lsp/mappings.lua"),r(Sn,"rel","nofollow"),r(Cn,"class","language-lua"),r(Ts,"href","#language-specific-config"),r(An,"id","language-specific-config"),r(Os,"href","#tsserver"),r(Dn,"id","tsserver"),r(xn,"class","language-lua"),r(Hs,"href","#svelteserver"),r(Tn,"id","svelteserver"),r(On,"class","language-lua"),r($s,"href","#sumneko_lua"),r(Hn,"id","sumneko_lua"),r($n,"class","language-lua"),r(Ns,"href","#diagnostic"),r(Mn,"id","diagnostic"),r(Nn,"href","https://github.com/nvim-lua/diagnostic-nvim"),r(Nn,"rel","nofollow"),r(jn,"href","https://github.com/neovim/neovim/pull/12655"),r(jn,"rel","nofollow"),r(Rn,"class","language-lua"),r(js,"href","#linting-and-formatting"),r(Un,"id","linting-and-formatting"),r(Yn,"href","https://eslint.org"),r(Yn,"rel","nofollow"),r(qn,"href","https://prettier.io"),r(qn,"rel","nofollow"),r(Wn,"href","https://github.com/johnnymorganz/stylua"),r(Wn,"rel","nofollow"),r(Jn,"href","https://github.com/elianiva/dotfiles/blob/950ba38bda8230da8071fc72cf3d8617d6288565/config/nvim/lua/plugins/null-ls.lua"),r(Jn,"rel","nofollow"),r(Rs,"href","#diagnostic-conflict"),r(Fn,"id","diagnostic-conflict"),r(Xn,"class","language-lua"),r(Us,"href","#completion-and-snippets"),r(Vn,"id","completion-and-snippets"),r(zn,"href","https://github.com/hrsh7th/nvim-compe"),r(zn,"rel","nofollow"),r(Bn,"href","https://github.com/nvim-lua/completion-nvim"),r(Bn,"rel","nofollow"),r(Kn,"href","https://github.com/hrsh7th/vim-vsnip"),r(Kn,"rel","nofollow"),r(Gn,"href","https://github.com/norcalli/snippets.nvim"),r(Gn,"rel","nofollow"),r(Qn,"class","language-lua"),r(ns,"href","https://github.com/elianiva/dotfiles/blob/5f813d893ff5a5928bac52995d6b4f806a8b3d2a/nvim/.config/nvim/lua/plugins/_completion.lua"),r(ns,"rel","nofollow"),r(Ys,"href","#closing-note"),r(ss,"id","closing-note"),r(as,"href","https://github.com/neoclide/coc.nvim"),r(as,"rel","nofollow"),r(ts,"href","https://github.com/autozimu/LanguageClient-neovim"),r(ts,"rel","nofollow"),r(es,"href","https://github.com/prabirshrestha/vim-lsp"),r(es,"rel","nofollow"),r(os,"href","https://github.com/dense-analysis/ale"),r(os,"rel","nofollow"),r(ps,"href","https://github.com/elianiva/dotfiles/tree/master/nvim/.config/nvim/lua/modules/lsp"),r(ps,"rel","nofollow")},m(n,c){i(n,f,c),s(f,v),s(v,m),i(n,y,c),i(n,d,c),s(d,h),s(h,_),s(_,I),s(I,J),s(d,S),s(d,V),s(V,z),s(z,ls),s(ls,de),s(d,he),s(d,pn),s(pn,Qs),s(Qs,cs),s(cs,me),s(pn,ve),s(pn,g),s(g,Zs),s(Zs,na),s(na,is),s(is,_e),s(g,ge),s(g,sa),s(sa,aa),s(aa,rs),s(rs,we),s(g,ye),s(g,ta),s(ta,ea),s(ea,us),s(us,Ee),s(g,be),s(g,ln),s(ln,oa),s(oa,ks),s(ks,Le),s(ln,Pe),s(ln,F),s(F,pa),s(pa,fs),s(fs,Ie),s(F,Se),s(F,la),s(la,ds),s(ds,Ce),s(F,Ae),s(F,ca),s(ca,hs),s(hs,De),s(g,xe),s(g,ia),s(ia,ra),s(ra,ms),s(ms,Te),s(g,Oe),s(g,ua),s(ua,ka),s(ka,vs),s(vs,He),s(g,$e),s(g,fa),s(fa,da),s(da,_s),s(_s,Me),s(g,Ne),s(g,ha),s(ha,ma),s(ma,gs),s(gs,je),s(d,Re),s(d,va),s(va,_a),s(_a,ws),s(ws,Ue),i(n,ot,c),i(n,cn,c),s(cn,ys),s(ys,Ye),i(n,pt,c),i(n,Es,c),s(Es,bs),s(bs,ga),s(ga,qe),s(bs,We),i(n,lt,c),i(n,Ls,c),s(Ls,Je),i(n,ct,c),i(n,w,c),s(w,Fe),s(w,wa),s(wa,Xe),s(w,Ve),s(w,ya),s(ya,ze),s(w,Be),s(w,Ea),s(Ea,Ke),s(w,Ge),s(w,ba),s(ba,Qe),s(w,Ze),s(w,La),s(La,no),s(w,so),s(w,Pa),s(Pa,ao),s(w,to),i(n,it,c),i(n,B,c),s(B,eo),s(B,Ia),s(Ia,oo),s(B,po),i(n,rt,c),i(n,$,c),s($,Sa),s(Sa,rn),s(rn,lo),s($,co),s($,Ca),s(Ca,un),s(un,io),s($,ro),s($,Aa),s(Aa,kn),s(kn,uo),i(n,ut,c),i(n,fn,c),s(fn,Ps),s(Ps,ko),i(n,kt,c),i(n,M,c),s(M,fo),s(M,Da),s(Da,ho),s(M,mo),s(M,dn),s(dn,vo),s(M,_o),i(n,ft,c),i(n,Is,c),s(Is,go),i(n,dt,c),i(n,hn,c),s(hn,Ss),s(Ss,wo),i(n,ht,c),i(n,mn,c),s(mn,Cs),s(Cs,yo),i(n,mt,c),i(n,N,c),s(N,Eo),s(N,vn),s(vn,bo),s(N,Lo),s(N,xa),s(xa,Po),s(N,Io),i(n,vt,c),i(n,_n,c),s(_n,So),s(_n,gn),s(gn,Co),i(n,_t,c),i(n,wn,c),wn.innerHTML=yr,i(n,gt,c),i(n,yn,c),s(yn,As),s(As,Ao),i(n,wt,c),i(n,Ds,c),s(Ds,Do),i(n,yt,c),i(n,En,c),En.innerHTML=Er,i(n,Et,c),i(n,b,c),s(b,xo),s(b,Ta),s(Ta,To),s(b,Oo),s(b,Oa),s(Oa,Ho),s(b,$o),s(b,Ha),s(Ha,Mo),s(b,No),s(b,$a),s($a,jo),s(b,Ro),i(n,bt,c),Nl(K,n,c),i(n,Lt,c),i(n,bn,c),s(bn,Uo),s(bn,Ln),s(Ln,Yo),i(n,Pt,c),i(n,Pn,c),s(Pn,xs),s(xs,qo),i(n,It,c),i(n,In,c),s(In,Wo),s(In,Sn),s(Sn,Jo),i(n,St,c),i(n,Cn,c),Cn.innerHTML=br,i(n,Ct,c),i(n,An,c),s(An,Ts),s(Ts,Fo),i(n,At,c),i(n,C,c),s(C,Xo),s(C,Ma),s(Ma,Vo),s(C,zo),s(C,Na),s(Na,Bo),s(C,Ko),s(C,ja),s(ja,Go),s(C,Qo),i(n,Dt,c),i(n,Dn,c),s(Dn,Os),s(Os,Zo),i(n,xt,c),i(n,A,c),s(A,np),s(A,Ra),s(Ra,sp),s(A,ap),s(A,Ua),s(Ua,tp),s(A,ep),s(A,Ya),s(Ya,op),s(A,pp),i(n,Tt,c),i(n,xn,c),xn.innerHTML=Lr,i(n,Ot,c),i(n,Tn,c),s(Tn,Hs),s(Hs,lp),i(n,Ht,c),i(n,D,c),s(D,cp),s(D,qa),s(qa,ip),s(D,rp),s(D,Wa),s(Wa,up),s(D,kp),s(D,Ja),s(Ja,fp),s(D,dp),i(n,$t,c),i(n,On,c),On.innerHTML=Pr,i(n,Mt,c),i(n,Hn,c),s(Hn,$s),s($s,hp),i(n,Nt,c),i(n,Ms,c),s(Ms,mp),i(n,jt,c),i(n,$n,c),$n.innerHTML=Ir,i(n,Rt,c),i(n,Mn,c),s(Mn,Ns),s(Ns,vp),i(n,Ut,c),i(n,j,c),s(j,_p),s(j,Nn),s(Nn,gp),s(j,wp),s(j,jn),s(jn,yp),s(j,Ep),i(n,Yt,c),i(n,Rn,c),Rn.innerHTML=Sr,i(n,qt,c),i(n,L,c),s(L,bp),s(L,Fa),s(Fa,Lp),s(L,Pp),s(L,Xa),s(Xa,Ip),s(L,Sp),s(L,Va),s(Va,Cp),s(L,Ap),s(L,za),s(za,Dp),s(L,xp),i(n,Wt,c),i(n,Un,c),s(Un,js),s(js,Tp),i(n,Jt,c),i(n,x,c),s(x,Op),s(x,Yn),s(Yn,Hp),s(x,$p),s(x,qn),s(qn,Mp),s(x,Np),s(x,Wn),s(Wn,jp),s(x,Rp),i(n,Ft,c),i(n,X,c),s(X,Up),s(X,Ba),s(Ba,Yp),s(X,qp),s(X,Jn),s(Jn,Wp),i(n,Xt,c),i(n,Fn,c),s(Fn,Rs),s(Rs,Jp),i(n,Vt,c),i(n,R,c),s(R,Fp),s(R,Ka),s(Ka,Xp),s(R,Vp),s(R,Ga),s(Ga,zp),s(R,Bp),i(n,zt,c),Nl(G,n,c),i(n,Bt,c),i(n,Xn,c),Xn.innerHTML=Cr,i(n,Kt,c),i(n,Q,c),s(Q,Kp),s(Q,Qa),s(Qa,Gp),s(Q,Qp),i(n,Gt,c),i(n,Vn,c),s(Vn,Us),s(Us,Zp),i(n,Qt,c),i(n,U,c),s(U,nl),s(U,zn),s(zn,sl),s(U,al),s(U,Bn),s(Bn,tl),s(U,el),i(n,Zt,c),i(n,Y,c),s(Y,ol),s(Y,Kn),s(Kn,pl),s(Y,ll),s(Y,Gn),s(Gn,cl),s(Y,il),i(n,ne,c),i(n,Z,c),s(Z,rl),s(Z,Za),s(Za,ul),s(Z,kl),i(n,se,c),i(n,Qn,c),Qn.innerHTML=Ar,i(n,ae,c),i(n,Zn,c),s(Zn,fl),s(Zn,ns),s(ns,dl),i(n,te,c),i(n,ss,c),s(ss,Ys),s(Ys,hl),i(n,ee,c),i(n,qs,c),s(qs,ml),i(n,oe,c),i(n,T,c),s(T,Ws),s(Ws,as),s(as,vl),s(Ws,_l),s(T,gl),s(T,nt),s(nt,ts),s(ts,wl),s(T,yl),s(T,st),s(st,es),s(es,El),s(T,bl),s(T,at),s(at,os),s(os,Ll),i(n,pe,c),i(n,nn,c),s(nn,Pl),s(nn,ps),s(ps,Il),s(nn,Sl),le=!0},p(n,c){const tt={};c&2&&(tt.$$scope={dirty:c,ctx:n}),K.$set(tt);const O={};c&2&&(O.$$scope={dirty:c,ctx:n}),G.$set(O)},i(n){le||(jl(K.$$.fragment,n),jl(G.$$.fragment,n),le=!0)},o(n){Rl(K.$$.fragment,n),Rl(G.$$.fragment,n),le=!1},d(n){n&&a(f),n&&a(y),n&&a(d),n&&a(ot),n&&a(cn),n&&a(pt),n&&a(Es),n&&a(lt),n&&a(Ls),n&&a(ct),n&&a(w),n&&a(it),n&&a(B),n&&a(rt),n&&a($),n&&a(ut),n&&a(fn),n&&a(kt),n&&a(M),n&&a(ft),n&&a(Is),n&&a(dt),n&&a(hn),n&&a(ht),n&&a(mn),n&&a(mt),n&&a(N),n&&a(vt),n&&a(_n),n&&a(_t),n&&a(wn),n&&a(gt),n&&a(yn),n&&a(wt),n&&a(Ds),n&&a(yt),n&&a(En),n&&a(Et),n&&a(b),n&&a(bt),Ul(K,n),n&&a(Lt),n&&a(bn),n&&a(Pt),n&&a(Pn),n&&a(It),n&&a(In),n&&a(St),n&&a(Cn),n&&a(Ct),n&&a(An),n&&a(At),n&&a(C),n&&a(Dt),n&&a(Dn),n&&a(xt),n&&a(A),n&&a(Tt),n&&a(xn),n&&a(Ot),n&&a(Tn),n&&a(Ht),n&&a(D),n&&a($t),n&&a(On),n&&a(Mt),n&&a(Hn),n&&a(Nt),n&&a(Ms),n&&a(jt),n&&a($n),n&&a(Rt),n&&a(Mn),n&&a(Ut),n&&a(j),n&&a(Yt),n&&a(Rn),n&&a(qt),n&&a(L),n&&a(Wt),n&&a(Un),n&&a(Jt),n&&a(x),n&&a(Ft),n&&a(X),n&&a(Xt),n&&a(Fn),n&&a(Vt),n&&a(R),n&&a(zt),Ul(G,n),n&&a(Bt),n&&a(Xn),n&&a(Kt),n&&a(Q),n&&a(Gt),n&&a(Vn),n&&a(Qt),n&&a(U),n&&a(Zt),n&&a(Y),n&&a(ne),n&&a(Z),n&&a(se),n&&a(Qn),n&&a(ae),n&&a(Zn),n&&a(te),n&&a(ss),n&&a(ee),n&&a(qs),n&&a(oe),n&&a(T),n&&a(pe),n&&a(nn)}}}function Vr(H){let f,v;const m=[H[0],wr];let y={$$slots:{default:[Xr]},$$scope:{ctx:H}};for(let d=0;d<m.length;d+=1)y=Hl(y,m[d]);return f=new Wr({props:y}),{c(){$l(f.$$.fragment)},l(d){Ml(f.$$.fragment,d)},m(d,h){Nl(f,d,h),v=!0},p(d,[h]){const _=h&1?qr(m,[h&1&&vr(d[0]),h&0&&vr(wr)]):{};h&2&&(_.$$scope={dirty:h,ctx:d}),f.$set(_)},i(d){v||(jl(f.$$.fragment,d),v=!0)},o(d){Rl(f.$$.fragment,d),v=!1},d(d){Ul(f,d)}}}const wr={draft:!0,title:"My setup for Neovim's builtin LSP client",date:"2020-12-18T00:00:00.000Z",desc:"A post where I explain about my setup for Neovim's builtin LSP",tags:["neovim"]};function zr(H,f,v){return H.$$set=m=>{v(0,f=Hl(Hl({},f),_r(m)))},f=_r(f),[f]}class tu extends Rr{constructor(f){super();Ur(this,f,zr,Vr,Yr,{})}}export{tu as default,wr as metadata};
