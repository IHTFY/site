import{S as O,i as T,s as C,C as B,w as F,x as q,y as N,z as U,A,q as Y,o as W,B as G,U as E,e as _,t as d,k as H,c as w,a as v,h as g,d as u,m as J,b as f,g as j,F as r}from"../../../chunks/vendor-a3554607.js";import{P as K}from"../../../chunks/post-d557e900.js";import"../../../chunks/stores-5109c37e.js";import"../../../chunks/Progress-da00dd34.js";import"../../../chunks/theme-4e4001f1.js";/* empty css                                      */function L(c){let e,n,s,m,t,o,p,k,b,l,x,h,y,D;return{c(){e=_("p"),n=d("I\u2019ve been working on the calendar maker the last two days. You can see the current progress "),s=_("a"),m=d("here"),t=d(". It\u2019s still has a long way to go. I\u2019ve been working on componentizing and getting image uploading to work. I originally tried using filepond as the image uploading component, but after a lot of issues, I realized that was better suited for uploading to a remote server. Now, I\u2019m using a svelte version of "),o=_("a"),p=d("dropzone"),k=d(". It seems to work alright, although the css styling of the component gives me some trouble."),b=H(),l=_("p"),x=d("I still need to get the loading and saving events worked out. Then I\u2019m going to used indexedDB, or more likely dexie which is a wrapper for indexedDB. "),h=_("a"),y=d("IndexedDB"),D=d(" is like localStorage in the browser; it persists between sessions. It\u2019s supposed to be better for larger data like images. For now, I\u2019m still using base64 strings to store the images, but I may move to blobs, since indexedDB supports that too."),this.h()},l(a){e=w(a,"P",{});var i=v(e);n=g(i,"I\u2019ve been working on the calendar maker the last two days. You can see the current progress "),s=w(i,"A",{href:!0,rel:!0});var z=v(s);m=g(z,"here"),z.forEach(u),t=g(i,". It\u2019s still has a long way to go. I\u2019ve been working on componentizing and getting image uploading to work. I originally tried using filepond as the image uploading component, but after a lot of issues, I realized that was better suited for uploading to a remote server. Now, I\u2019m using a svelte version of "),o=w(i,"A",{href:!0,rel:!0});var $=v(o);p=g($,"dropzone"),$.forEach(u),k=g(i,". It seems to work alright, although the css styling of the component gives me some trouble."),i.forEach(u),b=J(a),l=w(a,"P",{});var I=v(l);x=g(I,"I still need to get the loading and saving events worked out. Then I\u2019m going to used indexedDB, or more likely dexie which is a wrapper for indexedDB. "),h=w(I,"A",{href:!0,rel:!0});var P=v(h);y=g(P,"IndexedDB"),P.forEach(u),D=g(I," is like localStorage in the browser; it persists between sessions. It\u2019s supposed to be better for larger data like images. For now, I\u2019m still using base64 strings to store the images, but I may move to blobs, since indexedDB supports that too."),I.forEach(u),this.h()},h(){f(s,"href","https://calendar.ihtfy.com/data"),f(s,"rel","nofollow"),f(o,"href","https://github.com/thecodejack/svelte-file-dropzone"),f(o,"rel","nofollow"),f(h,"href","https://developer.mozilla.org/en-US/docs/Web/API/IndexedDB_API"),f(h,"rel","nofollow")},m(a,i){j(a,e,i),r(e,n),r(e,s),r(s,m),r(e,t),r(e,o),r(o,p),r(e,k),j(a,b,i),j(a,l,i),r(l,x),r(l,h),r(h,y),r(l,D)},d(a){a&&u(e),a&&u(b),a&&u(l)}}}function M(c){let e,n;const s=[c[0],S];let m={$$slots:{default:[L]},$$scope:{ctx:c}};for(let t=0;t<s.length;t+=1)m=B(m,s[t]);return e=new K({props:m}),{c(){F(e.$$.fragment)},l(t){q(e.$$.fragment,t)},m(t,o){N(e,t,o),n=!0},p(t,[o]){const p=o&1?U(s,[o&1&&A(t[0]),o&0&&A(S)]):{};o&2&&(p.$$scope={dirty:o,ctx:t}),e.$set(p)},i(t){n||(Y(e.$$.fragment,t),n=!0)},o(t){W(e.$$.fragment,t),n=!1},d(t){G(e,t)}}}const S={draft:!1,title:"calendar progress",date:"2022-02-12",coverImage:"calendar-progress.jpg",desc:"TODO",tags:["TODO"]};function Q(c,e,n){return c.$$set=s=>{n(0,e=B(B({},e),E(s)))},e=E(e),[e]}class oe extends O{constructor(e){super();T(this,e,Q,M,C,{})}}export{oe as default,S as metadata};
