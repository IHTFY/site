import{S as C,i as F,s as q,C as z,w as N,x as T,y as U,z as W,A,q as Y,o as G,B as H,U as E,e as _,t as d,k as J,c as w,a as v,h as g,d as u,m as K,b as f,g as D,F as r}from"../../../chunks/vendor-f73903c8.js";import{P as L}from"../../../chunks/post-178ca962.js";import"../../../chunks/stores-2e642f94.js";import"../../../chunks/Progress-2d81d7be.js";/* empty css                                      */function M(h){let e,n,s,m,t,o,p,k,b,l,x,c,y,B;return{c(){e=_("p"),n=d("I\u2019ve been working on the calendar maker the last two days. You can see the current progress "),s=_("a"),m=d("here"),t=d(". It\u2019s still has a long way to go. I\u2019ve been working on componentizing and getting image uploading to work. I originally tried using filepond as the image uploading component, but after a lot of issues, I realized that was better suited for uploading to a remote server. Now, I\u2019m using a svelte version of "),o=_("a"),p=d("dropzone"),k=d(". It seems to work alright, although the css styling of the component gives me some trouble."),b=J(),l=_("p"),x=d("I still need to get the loading and saving events worked out. Then I\u2019m going to used indexedDB, or more likely dexie which is a wrapper for indexedDB. "),c=_("a"),y=d("IndexedDB"),B=d(" is like localStorage in the browser; it persists between sessions. It\u2019s supposed to be better for larger data like images. For now, I\u2019m still using base64 strings to store the images, but I may move to blobs, since indexedDB supports that too."),this.h()},l(a){e=w(a,"P",{});var i=v(e);n=g(i,"I\u2019ve been working on the calendar maker the last two days. You can see the current progress "),s=w(i,"A",{href:!0,rel:!0});var $=v(s);m=g($,"here"),$.forEach(u),t=g(i,". It\u2019s still has a long way to go. I\u2019ve been working on componentizing and getting image uploading to work. I originally tried using filepond as the image uploading component, but after a lot of issues, I realized that was better suited for uploading to a remote server. Now, I\u2019m using a svelte version of "),o=w(i,"A",{href:!0,rel:!0});var j=v(o);p=g(j,"dropzone"),j.forEach(u),k=g(i,". It seems to work alright, although the css styling of the component gives me some trouble."),i.forEach(u),b=K(a),l=w(a,"P",{});var I=v(l);x=g(I,"I still need to get the loading and saving events worked out. Then I\u2019m going to used indexedDB, or more likely dexie which is a wrapper for indexedDB. "),c=w(I,"A",{href:!0,rel:!0});var P=v(c);y=g(P,"IndexedDB"),P.forEach(u),B=g(I," is like localStorage in the browser; it persists between sessions. It\u2019s supposed to be better for larger data like images. For now, I\u2019m still using base64 strings to store the images, but I may move to blobs, since indexedDB supports that too."),I.forEach(u),this.h()},h(){f(s,"href","https://calendar.ihtfy.com/data"),f(s,"rel","nofollow"),f(o,"href","https://github.com/thecodejack/svelte-file-dropzone"),f(o,"rel","nofollow"),f(c,"href","https://developer.mozilla.org/en-US/docs/Web/API/IndexedDB_API"),f(c,"rel","nofollow")},m(a,i){D(a,e,i),r(e,n),r(e,s),r(s,m),r(e,t),r(e,o),r(o,p),r(e,k),D(a,b,i),D(a,l,i),r(l,x),r(l,c),r(c,y),r(l,B)},d(a){a&&u(e),a&&u(b),a&&u(l)}}}function O(h){let e,n;const s=[h[0],S];let m={$$slots:{default:[M]},$$scope:{ctx:h}};for(let t=0;t<s.length;t+=1)m=z(m,s[t]);return e=new L({props:m}),{c(){N(e.$$.fragment)},l(t){T(e.$$.fragment,t)},m(t,o){U(e,t,o),n=!0},p(t,[o]){const p=o&1?W(s,[o&1&&A(t[0]),o&0&&A(S)]):{};o&2&&(p.$$scope={dirty:o,ctx:t}),e.$set(p)},i(t){n||(Y(e.$$.fragment,t),n=!0)},o(t){G(e.$$.fragment,t),n=!1},d(t){H(e,t)}}}const S={draft:!1,title:"calendar progress",date:"2022-02-12",coverImage:"calendar-progress.jpg",desc:"Working on a calendar maker",tags:["coding"]};function Q(h,e,n){return h.$$set=s=>{n(0,e=z(z({},e),E(s)))},e=E(e),[e]}class te extends C{constructor(e){super();F(this,e,Q,O,q,{})}}export{te as default,S as metadata};
