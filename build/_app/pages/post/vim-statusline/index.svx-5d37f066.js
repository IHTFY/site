import{S as Ui,i as Yi,s as Ji,C as Jo,w as zo,x as Zo,y as Ko,z as zi,A as oi,q as Qo,o as Xo,B as sp,U as pi,e,t as i,k as c,c as o,a as p,h as r,d as n,m as u,b as k,a1 as li,g as l,F as a}from"../../../chunks/vendor-a3554607.js";import{P as Zi}from"../../../chunks/post-84b6700e.js";import{U as ii}from"../../../chunks/Update-db150b7f.js";import"../../../chunks/stores-5109c37e.js";import"../../../chunks/Progress-da00dd34.js";import"../../../chunks/theme-4e4001f1.js";/* empty css                                      *//* empty css                                                           */function Ki(M){let f,v,h,_,d,m,g;return{c(){f=e("p"),v=i("I wrote a better version of this in Lua which you can read "),h=e("a"),_=i("here"),d=c(),m=e("p"),g=i("Disclaimer: I don\u2019t know if the code here still works or not."),this.h()},l(w){f=o(w,"P",{});var C=p(f);v=r(C,"I wrote a better version of this in Lua which you can read "),h=o(C,"A",{href:!0,rel:!0});var Cs=p(h);_=r(Cs,"here"),Cs.forEach(n),C.forEach(n),d=u(w),m=o(w,"P",{});var H=p(m);g=r(H,"Disclaimer: I don\u2019t know if the code here still works or not."),H.forEach(n),this.h()},h(){k(h,"href","https://elianiva.my.id/post/neovim-lua-statusline"),k(h,"rel","nofollow")},m(w,C){l(w,f,C),a(f,v),a(f,h),a(h,_),l(w,d,C),l(w,m,C),a(m,g)},d(w){w&&n(f),w&&n(d),w&&n(m)}}}function Qi(M){let f,v,h,_,d;return{c(){f=e("p"),v=i("Welp, I accidentally lost my old statusline because I "),h=e("code"),_=i("git push --force"),d=i(" the other day. Sorry :p")},l(m){f=o(m,"P",{});var g=p(f);v=r(g,"Welp, I accidentally lost my old statusline because I "),h=o(g,"CODE",{});var w=p(h);_=r(w,"git push --force"),w.forEach(n),d=r(g," the other day. Sorry :p"),g.forEach(n)},m(m,g){l(m,f,g),a(f,v),a(f,h),a(h,_),a(f,d)},d(m){m&&n(f)}}}function Xi(M){let f,v,h,_,d,m,g,w,C,Cs,H,Bn,Ms,jt,Vt,W,Hn,Ps,qt,Wt,y,Sn,As,Nt,Ot,$n,Ts,Ut,Yt,Fn,Bs,Jt,zt,xn,Hs,Zt,Kt,Rn,Ss,Qt,Xt,Gn,$s,se,ne,Dn,Fs,ae,te,jn,xs,ee,oe,Vn,Rs,pe,le,qn,Gs,ie,re,Wn,Nn,Ds,ce,ue,On,Un,js,ke,da,N,Vs,fe,ma,qs,de,ha,Ws,me,ya,S,va,O,Ns,he,wa,Os,ye,ba,L,Yn,ve,we,Jn,be,ge,zn,_e,Ee,Zn,Ie,ga,Us,Le,_a,U,Ys,Ce,Ea,Y,Js,Me,Ia,zs,Pe,La,Zs,Ks,np,Ca,$,Ae,J,Te,Be,Ma,z,Qs,He,Pa,Xs,Se,Aa,Z,ci=`<code class="language-vim"><span class="token comment">" We'll use this for the active statusline</span>
<span class="token keyword">function</span><span class="token operator">!</span> <span class="token function">ActiveLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token keyword">let</span> <span class="token builtin">statusline</span> <span class="token operator">=</span> <span class="token string">""</span>
  <span class="token keyword">return</span> <span class="token builtin">statusline</span>
<span class="token keyword">endfunction</span>

<span class="token comment">" We'll use this for the inactive statusline</span>
<span class="token keyword">function</span><span class="token operator">!</span> <span class="token function">InactiveLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token keyword">let</span> <span class="token builtin">statusline</span> <span class="token operator">=</span> <span class="token string">""</span>
  <span class="token keyword">return</span> <span class="token builtin">statusline</span>
<span class="token keyword">endfunction</span></code>`,Ta,K,sn,$e,Ba,P,Fe,Kn,xe,Re,Qn,Ge,De,Ha,Q,ui='<code class="language-vim">  <span class="token builtin">hi</span> Base guibg<span class="token operator">=</span>#<span class="token number">212333</span> guifg<span class="token operator">=</span>#<span class="token number">212333</span></code>',Sa,nn,je,$a,X,ki=`<code class="language-vim"><span class="token comment">" We'll use this for the active statusline</span>
<span class="token keyword">function</span><span class="token operator">!</span> <span class="token function">ActiveLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token keyword">let</span> <span class="token builtin">statusline</span> <span class="token operator">=</span> <span class="token string">""</span>
  <span class="token keyword">let</span> <span class="token builtin">statusline</span> <span class="token operator">.=</span> <span class="token string">"%#Base#"</span>
  <span class="token keyword">return</span> <span class="token builtin">statusline</span>
<span class="token keyword">endfunction</span></code>`,Fa,ss,an,Ve,xa,tn,qe,Ra,ns,fi=`<code class="language-vim">  <span class="token keyword">let</span> g<span class="token punctuation">:</span>currentmode<span class="token operator">=</span><span class="token punctuation">&#123;</span>
      <span class="token string">'n'</span> <span class="token punctuation">:</span> <span class="token string">'Normal '</span><span class="token punctuation">,</span>
      <span class="token string">'no'</span> <span class="token punctuation">:</span> <span class="token string">'N\xB7Operator Pending '</span><span class="token punctuation">,</span>
      <span class="token string">'v'</span> <span class="token punctuation">:</span> <span class="token string">'Visual '</span><span class="token punctuation">,</span>
      <span class="token string">'V'</span> <span class="token punctuation">:</span> <span class="token string">'V\xB7Line '</span><span class="token punctuation">,</span>
      <span class="token string">'^V'</span> <span class="token punctuation">:</span> <span class="token string">'V\xB7Block '</span><span class="token punctuation">,</span>
      <span class="token string">'s'</span> <span class="token punctuation">:</span> <span class="token string">'Select '</span><span class="token punctuation">,</span>
      <span class="token string">'S'</span><span class="token punctuation">:</span> <span class="token string">'S\xB7Line '</span><span class="token punctuation">,</span>
      <span class="token string">'^S'</span> <span class="token punctuation">:</span> <span class="token string">'S\xB7Block '</span><span class="token punctuation">,</span>
      <span class="token string">'i'</span> <span class="token punctuation">:</span> <span class="token string">'Insert '</span><span class="token punctuation">,</span>
      <span class="token string">'R'</span> <span class="token punctuation">:</span> <span class="token string">'Replace '</span><span class="token punctuation">,</span>
      <span class="token string">'Rv'</span> <span class="token punctuation">:</span> <span class="token string">'V\xB7Replace '</span><span class="token punctuation">,</span>
      <span class="token string">'c'</span> <span class="token punctuation">:</span> <span class="token string">'Command '</span><span class="token punctuation">,</span>
      <span class="token string">'cv'</span> <span class="token punctuation">:</span> <span class="token string">'Vim Ex '</span><span class="token punctuation">,</span>
      <span class="token string">'ce'</span> <span class="token punctuation">:</span> <span class="token string">'Ex '</span><span class="token punctuation">,</span>
      <span class="token string">'r'</span> <span class="token punctuation">:</span> <span class="token string">'Prompt '</span><span class="token punctuation">,</span>
      <span class="token string">'rm'</span> <span class="token punctuation">:</span> <span class="token string">'More '</span><span class="token punctuation">,</span>
      <span class="token string">'r?'</span> <span class="token punctuation">:</span> <span class="token string">'Confirm '</span><span class="token punctuation">,</span>
      <span class="token string">'!'</span> <span class="token punctuation">:</span> <span class="token string">'Shell '</span><span class="token punctuation">,</span>
      <span class="token string">'t'</span> <span class="token punctuation">:</span> <span class="token string">'Terminal '</span>
      <span class="token punctuation">&#125;</span>

<span class="token comment">" Get current mode</span>
<span class="token keyword">function</span><span class="token operator">!</span> <span class="token function">ModeCurrent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> abort
    <span class="token keyword">let</span> <span class="token keyword">l</span><span class="token punctuation">:</span>modecurrent <span class="token operator">=</span> <span class="token function">mode</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">let</span> <span class="token keyword">l</span><span class="token punctuation">:</span>modelist <span class="token operator">=</span> <span class="token function">toupper</span><span class="token punctuation">(</span><span class="token function">get</span><span class="token punctuation">(</span>g<span class="token punctuation">:</span>currentmode<span class="token punctuation">,</span> <span class="token keyword">l</span><span class="token punctuation">:</span>modecurrent<span class="token punctuation">,</span> <span class="token string">'V\xB7Block '</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">let</span> <span class="token keyword">l</span><span class="token punctuation">:</span>current_status_mode <span class="token operator">=</span> <span class="token keyword">l</span><span class="token punctuation">:</span>modelist
    <span class="token keyword">return</span> <span class="token keyword">l</span><span class="token punctuation">:</span>current_status_mode
<span class="token keyword">endfunction</span></code>`,Ga,B,We,Xn,Ne,Oe,sa,Ue,Da,A,Ye,na,Je,ze,aa,Ze,Ke,ja,as,di='<code class="language-vim"><span class="token builtin">hi</span> Mode guibg<span class="token operator">=</span>#82aaff guifg<span class="token operator">=</span>#<span class="token number">181824</span> gui<span class="token operator">=</span>bold</code>',Va,F,Qe,ta,Xe,so,qa,ts,mi=`<code class="language-vim"><span class="token comment">" We'll use this for the active statusline</span>
<span class="token keyword">function</span><span class="token operator">!</span> <span class="token function">ActiveLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token keyword">let</span> <span class="token builtin">statusline</span> <span class="token operator">=</span> <span class="token string">""</span>
  <span class="token keyword">let</span> <span class="token builtin">statusline</span> <span class="token operator">.=</span> <span class="token string">"%#Base#"</span>

  <span class="token comment">" Current mode</span>
  <span class="token keyword">let</span> <span class="token builtin">statusline</span> <span class="token operator">.=</span> <span class="token string">"%#Mode# %&#123;ModeCurrent()&#125;"</span>
  <span class="token keyword">return</span> <span class="token builtin">statusline</span>
<span class="token keyword">endfunction</span></code>`,Wa,es,en,no,Na,x,ao,os,to,eo,Oa,on,oo,Ua,ps,hi=`<code class="language-vim"><span class="token comment">" Get current git branch</span>
<span class="token keyword">function</span><span class="token operator">!</span> <span class="token function">GitBranch</span><span class="token punctuation">(</span>git<span class="token punctuation">)</span>
  <span class="token keyword">if</span> a<span class="token punctuation">:</span>git <span class="token operator">==</span> <span class="token string">""</span>
    <span class="token keyword">return</span> <span class="token string">'-'</span>
  <span class="token keyword">else</span>
    <span class="token keyword">return</span> a<span class="token punctuation">:</span>git
  <span class="token keyword">endif</span>
<span class="token keyword">endfunction</span></code>`,Ya,pn,po,Ja,ls,yi=`<code class="language-vim"><span class="token builtin">hi</span> Git guibg<span class="token operator">=</span>#292d3e guifg<span class="token operator">=</span>#929dcb

<span class="token keyword">function</span><span class="token operator">!</span> <span class="token function">ActiveLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token keyword">let</span> <span class="token builtin">statusline</span> <span class="token operator">=</span> <span class="token string">""</span>
  <span class="token keyword">let</span> <span class="token builtin">statusline</span> <span class="token operator">.=</span> <span class="token string">"%#Base#"</span>

  <span class="token comment">" Current mode</span>
  <span class="token keyword">let</span> <span class="token builtin">statusline</span> <span class="token operator">.=</span> <span class="token string">"%#Mode# %&#123;ModeCurrent()&#125;"</span>

  <span class="token comment">" Current git branch</span>
  <span class="token keyword">let</span> <span class="token builtin">statusline</span> <span class="token operator">.=</span> <span class="token string">"%#Git# %&#123;GitBranch(fugitive#head())&#125; %)"</span>
  <span class="token keyword">return</span> <span class="token builtin">statusline</span>
<span class="token keyword">endfunction</span></code>`,za,is,ln,lo,Za,rn,io,Ka,rs,vi=`<code class="language-vim"><span class="token comment">" Make the colour highlight normal</span>
<span class="token keyword">let</span> <span class="token builtin">statusline</span> <span class="token operator">.=</span> <span class="token string">"%#Base#"</span>
<span class="token keyword">let</span> <span class="token builtin">statusline</span> <span class="token operator">.=</span> <span class="token string">"%="</span></code>`,Qa,cn,ro,Xa,R,ea,co,uo,oa,ko,st,cs,un,fo,nt,kn,mo,at,us,wi=`<code class="language-vim"><span class="token comment">" Check modified status</span>
<span class="token keyword">function</span><span class="token operator">!</span> <span class="token function">CheckMod</span><span class="token punctuation">(</span>modi<span class="token punctuation">)</span>
  <span class="token keyword">if</span> a<span class="token punctuation">:</span>modi <span class="token operator">==</span> <span class="token number">1</span>
    <span class="token builtin">hi</span> Modi guifg<span class="token operator">=</span>#efefef guibg<span class="token operator">=</span>#<span class="token number">212333</span> gui<span class="token operator">=</span>bold
    <span class="token builtin">hi</span> Filename guifg<span class="token operator">=</span>#efefef guibg<span class="token operator">=</span>#<span class="token number">212333</span>
    <span class="token keyword">return</span> <span class="token function">expand</span><span class="token punctuation">(</span><span class="token string">'%:t'</span><span class="token punctuation">)</span><span class="token operator">.</span><span class="token string">'*'</span>
  <span class="token keyword">else</span>
    <span class="token builtin">hi</span> Modi guifg<span class="token operator">=</span>#929dcb guibg<span class="token operator">=</span>#<span class="token number">212333</span>
    <span class="token builtin">hi</span> Filename guifg<span class="token operator">=</span>#929dcb guibg<span class="token operator">=</span>#<span class="token number">212333</span>
    <span class="token keyword">return</span> <span class="token function">expand</span><span class="token punctuation">(</span><span class="token string">'%:t'</span><span class="token punctuation">)</span>
  <span class="token keyword">endif</span>
<span class="token keyword">endfunction</span></code>`,tt,fn,ho,et,ks,bi=`<code class="language-vim"><span class="token keyword">function</span><span class="token operator">!</span> <span class="token function">ActiveLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token keyword">let</span> <span class="token builtin">statusline</span> <span class="token operator">=</span> <span class="token string">""</span>
  <span class="token keyword">let</span> <span class="token builtin">statusline</span> <span class="token operator">.=</span> <span class="token string">"%#Base#"</span>

  <span class="token comment">" Current mode</span>
  <span class="token keyword">let</span> <span class="token builtin">statusline</span> <span class="token operator">.=</span> <span class="token string">"%#Mode# %&#123;ModeCurrent()&#125;"</span>

  <span class="token comment">" Current git branch</span>
  <span class="token keyword">let</span> <span class="token builtin">statusline</span> <span class="token operator">.=</span> <span class="token string">"%#Git# %&#123;GitBranch(fugitive#head())&#125; %)"</span>

  <span class="token comment">" Make the colour highlight normal</span>
  <span class="token keyword">let</span> <span class="token builtin">statusline</span> <span class="token operator">.=</span> <span class="token string">"%#Base#"</span>
  <span class="token keyword">let</span> <span class="token builtin">statusline</span> <span class="token operator">.=</span> <span class="token string">"%="</span>

  <span class="token comment">" Current modified status and filename</span>
  <span class="token keyword">let</span> <span class="token builtin">statusline</span> <span class="token operator">.=</span> <span class="token string">"%#Modi# %&#123;CheckMod(&amp;modified)&#125; "</span>
  <span class="token keyword">return</span> <span class="token builtin">statusline</span>
<span class="token keyword">endfunction</span></code>`,ot,fs,dn,yo,pt,E,vo,pa,wo,bo,la,go,_o,ia,Eo,Io,ra,Lo,Co,lt,ds,gi=`<code class="language-vim"><span class="token comment">" Set the colour</span>
<span class="token builtin">hi</span> Filetype guibg<span class="token operator">=</span>#292d3e guifg<span class="token operator">=</span>#929dcb

<span class="token comment">" Get current filetype</span>
<span class="token keyword">function</span><span class="token operator">!</span> <span class="token function">CheckFT</span><span class="token punctuation">(</span><span class="token keyword">filetype</span><span class="token punctuation">)</span>
  <span class="token keyword">if</span> a<span class="token punctuation">:</span><span class="token keyword">filetype</span> <span class="token operator">==</span> <span class="token string">''</span>
    <span class="token keyword">return</span> <span class="token string">'-'</span>
  <span class="token keyword">else</span>
    <span class="token keyword">return</span> <span class="token function">tolower</span><span class="token punctuation">(</span>a<span class="token punctuation">:</span><span class="token keyword">filetype</span><span class="token punctuation">)</span>
  <span class="token keyword">endif</span>
<span class="token keyword">endfunction</span></code>`,it,mn,Mo,rt,ms,_i=`<code class="language-vim"><span class="token keyword">function</span><span class="token operator">!</span> <span class="token function">ActiveLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token keyword">let</span> <span class="token builtin">statusline</span> <span class="token operator">=</span> <span class="token string">""</span>
  <span class="token keyword">let</span> <span class="token builtin">statusline</span> <span class="token operator">.=</span> <span class="token string">"%#Base#"</span>

  <span class="token comment">" Current mode</span>
  <span class="token keyword">let</span> <span class="token builtin">statusline</span> <span class="token operator">.=</span> <span class="token string">"%#Mode# %&#123;ModeCurrent()&#125;"</span>

  <span class="token comment">" Current git branch</span>
  <span class="token keyword">let</span> <span class="token builtin">statusline</span> <span class="token operator">.=</span> <span class="token string">"%#Git# %&#123;GitBranch(fugitive#head())&#125; %)"</span>

  <span class="token comment">" Make the colour highlight normal</span>
  <span class="token keyword">let</span> <span class="token builtin">statusline</span> <span class="token operator">.=</span> <span class="token string">"%#Base#"</span>
  <span class="token keyword">let</span> <span class="token builtin">statusline</span> <span class="token operator">.=</span> <span class="token string">"%="</span>

  <span class="token comment">" Current modified status and filename</span>
  <span class="token keyword">let</span> <span class="token builtin">statusline</span> <span class="token operator">.=</span> <span class="token string">"%#Modi# %&#123;CheckMod(&amp;modified)&#125; "</span>

  <span class="token comment">" Current filetype</span>
  <span class="token keyword">let</span> <span class="token builtin">statusline</span> <span class="token operator">.=</span> <span class="token string">"%#Filetype# %&#123;CheckFT(&amp;filetype)&#125; "</span>
  <span class="token keyword">return</span> <span class="token builtin">statusline</span>
<span class="token keyword">endfunction</span></code>`,ct,G,Po,ca,Ao,To,ut,hs,hn,Bo,kt,yn,Ho,ft,ys,Ei=`<code class="language-vim"><span class="token comment">" Colour for line number module</span>
<span class="token builtin">hi</span> LineCol guibg<span class="token operator">=</span>#82aaff guifg<span class="token operator">=</span>#<span class="token number">181824</span> gui<span class="token operator">=</span>bold

<span class="token comment">" Current line and column</span>
<span class="token keyword">let</span> <span class="token builtin">statusline</span> <span class="token operator">.=</span> <span class="token string">"%#LineCol# Ln %l, Col %c "</span></code>`,dt,vs,vn,So,mt,wn,$o,ht,ws,Ii=`<code class="language-vim"><span class="token keyword">function</span><span class="token operator">!</span> <span class="token function">InactiveLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token comment">" Set empty statusline and colors</span>
  <span class="token keyword">let</span> <span class="token builtin">statusline</span> <span class="token operator">=</span> <span class="token string">""</span>
  <span class="token keyword">let</span> <span class="token builtin">statusline</span> <span class="token operator">.=</span> <span class="token string">"%#Base#"</span>

  <span class="token comment">" Full path of the file</span>
  <span class="token keyword">let</span> <span class="token builtin">statusline</span> <span class="token operator">.=</span> <span class="token string">"%#LineCol# %F "</span>

  <span class="token keyword">return</span> <span class="token builtin">statusline</span>
<span class="token keyword">endfunction</span></code>`,yt,bs,bn,Fo,vt,gn,xo,wt,gs,Li=`<code class="language-vim"><span class="token comment">" Statusline colors</span>
<span class="token builtin">hi</span> Base guibg<span class="token operator">=</span>#<span class="token number">212333</span> guifg<span class="token operator">=</span>#<span class="token number">212333</span>
<span class="token builtin">hi</span> Mode guibg<span class="token operator">=</span>#82aaff guifg<span class="token operator">=</span>#<span class="token number">181824</span> gui<span class="token operator">=</span>bold
<span class="token builtin">hi</span> Git guibg<span class="token operator">=</span>#292d3e guifg<span class="token operator">=</span>#929dcb
<span class="token builtin">hi</span> Filetype guibg<span class="token operator">=</span>#292d3e guifg<span class="token operator">=</span>#929dcb
<span class="token builtin">hi</span> LineCol guibg<span class="token operator">=</span>#82aaff guifg<span class="token operator">=</span>#<span class="token number">181824</span> gui<span class="token operator">=</span>bold
<span class="token comment">" Get current mode</span>
<span class="token keyword">let</span> g<span class="token punctuation">:</span>currentmode<span class="token operator">=</span><span class="token punctuation">&#123;</span>
      <span class="token string">'n'</span> <span class="token punctuation">:</span> <span class="token string">'Normal '</span><span class="token punctuation">,</span>
      <span class="token string">'no'</span> <span class="token punctuation">:</span> <span class="token string">'N\xB7Operator Pending '</span><span class="token punctuation">,</span>
      <span class="token string">'v'</span> <span class="token punctuation">:</span> <span class="token string">'Visual '</span><span class="token punctuation">,</span>
      <span class="token string">'V'</span> <span class="token punctuation">:</span> <span class="token string">'V\xB7Line '</span><span class="token punctuation">,</span>
      <span class="token string">'^V'</span> <span class="token punctuation">:</span> <span class="token string">'V\xB7Block '</span><span class="token punctuation">,</span>
      <span class="token string">'s'</span> <span class="token punctuation">:</span> <span class="token string">'Select '</span><span class="token punctuation">,</span>
      <span class="token string">'S'</span><span class="token punctuation">:</span> <span class="token string">'S\xB7Line '</span><span class="token punctuation">,</span>
      <span class="token string">'^S'</span> <span class="token punctuation">:</span> <span class="token string">'S\xB7Block '</span><span class="token punctuation">,</span>
      <span class="token string">'i'</span> <span class="token punctuation">:</span> <span class="token string">'Insert '</span><span class="token punctuation">,</span>
      <span class="token string">'R'</span> <span class="token punctuation">:</span> <span class="token string">'Replace '</span><span class="token punctuation">,</span>
      <span class="token string">'Rv'</span> <span class="token punctuation">:</span> <span class="token string">'V\xB7Replace '</span><span class="token punctuation">,</span>
      <span class="token string">'c'</span> <span class="token punctuation">:</span> <span class="token string">'Command '</span><span class="token punctuation">,</span>
      <span class="token string">'cv'</span> <span class="token punctuation">:</span> <span class="token string">'Vim Ex '</span><span class="token punctuation">,</span>
      <span class="token string">'ce'</span> <span class="token punctuation">:</span> <span class="token string">'Ex '</span><span class="token punctuation">,</span>
      <span class="token string">'r'</span> <span class="token punctuation">:</span> <span class="token string">'Prompt '</span><span class="token punctuation">,</span>
      <span class="token string">'rm'</span> <span class="token punctuation">:</span> <span class="token string">'More '</span><span class="token punctuation">,</span>
      <span class="token string">'r?'</span> <span class="token punctuation">:</span> <span class="token string">'Confirm '</span><span class="token punctuation">,</span>
      <span class="token string">'!'</span> <span class="token punctuation">:</span> <span class="token string">'Shell '</span><span class="token punctuation">,</span>
      <span class="token string">'t'</span> <span class="token punctuation">:</span> <span class="token string">'Terminal '</span>
      <span class="token punctuation">&#125;</span>

<span class="token comment">" Get current mode</span>
<span class="token keyword">function</span><span class="token operator">!</span> <span class="token function">ModeCurrent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> abort
    <span class="token keyword">let</span> <span class="token keyword">l</span><span class="token punctuation">:</span>modecurrent <span class="token operator">=</span> <span class="token function">mode</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">let</span> <span class="token keyword">l</span><span class="token punctuation">:</span>modelist <span class="token operator">=</span> <span class="token function">toupper</span><span class="token punctuation">(</span><span class="token function">get</span><span class="token punctuation">(</span>g<span class="token punctuation">:</span>currentmode<span class="token punctuation">,</span> <span class="token keyword">l</span><span class="token punctuation">:</span>modecurrent<span class="token punctuation">,</span> <span class="token string">'V\xB7Block '</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">let</span> <span class="token keyword">l</span><span class="token punctuation">:</span>current_status_mode <span class="token operator">=</span> <span class="token keyword">l</span><span class="token punctuation">:</span>modelist
    <span class="token keyword">return</span> <span class="token keyword">l</span><span class="token punctuation">:</span>current_status_mode
<span class="token keyword">endfunction</span>

<span class="token comment">" Get current git branch</span>
<span class="token keyword">function</span><span class="token operator">!</span> <span class="token function">GitBranch</span><span class="token punctuation">(</span>git<span class="token punctuation">)</span>
  <span class="token keyword">if</span> a<span class="token punctuation">:</span>git <span class="token operator">==</span> <span class="token string">""</span>
    <span class="token keyword">return</span> <span class="token string">'-'</span>
  <span class="token keyword">else</span>
    <span class="token keyword">return</span> a<span class="token punctuation">:</span>git
  <span class="token keyword">endif</span>
<span class="token keyword">endfunction</span>

<span class="token comment">" Get current filetype</span>
<span class="token keyword">function</span><span class="token operator">!</span> <span class="token function">CheckFT</span><span class="token punctuation">(</span><span class="token keyword">filetype</span><span class="token punctuation">)</span>
  <span class="token keyword">if</span> a<span class="token punctuation">:</span><span class="token keyword">filetype</span> <span class="token operator">==</span> <span class="token string">''</span>
    <span class="token keyword">return</span> <span class="token string">'-'</span>
  <span class="token keyword">else</span>
    <span class="token keyword">return</span> <span class="token function">tolower</span><span class="token punctuation">(</span>a<span class="token punctuation">:</span><span class="token keyword">filetype</span><span class="token punctuation">)</span>
  <span class="token keyword">endif</span>
<span class="token keyword">endfunction</span>

<span class="token comment">" Check modified status</span>
<span class="token keyword">function</span><span class="token operator">!</span> <span class="token function">CheckMod</span><span class="token punctuation">(</span>modi<span class="token punctuation">)</span>
  <span class="token keyword">if</span> a<span class="token punctuation">:</span>modi <span class="token operator">==</span> <span class="token number">1</span>
    <span class="token builtin">hi</span> Modi guifg<span class="token operator">=</span>#efefef guibg<span class="token operator">=</span>#<span class="token number">212333</span>
    <span class="token builtin">hi</span> Filename guifg<span class="token operator">=</span>#efefef guibg<span class="token operator">=</span>#<span class="token number">212333</span>
    <span class="token keyword">return</span> <span class="token function">expand</span><span class="token punctuation">(</span><span class="token string">'%:t'</span><span class="token punctuation">)</span><span class="token operator">.</span><span class="token string">'*'</span>
  <span class="token keyword">else</span>
    <span class="token builtin">hi</span> Modi guifg<span class="token operator">=</span>#929dcb guibg<span class="token operator">=</span>#<span class="token number">212333</span>
    <span class="token builtin">hi</span> Filename guifg<span class="token operator">=</span>#929dcb guibg<span class="token operator">=</span>#<span class="token number">212333</span>
    <span class="token keyword">return</span> <span class="token function">expand</span><span class="token punctuation">(</span><span class="token string">'%:t'</span><span class="token punctuation">)</span>
  <span class="token keyword">endif</span>
<span class="token keyword">endfunction</span>

<span class="token comment">" Set active statusline</span>
<span class="token keyword">function</span><span class="token operator">!</span> <span class="token function">ActiveLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token comment">" Set empty statusline and colors</span>
  <span class="token keyword">let</span> <span class="token builtin">statusline</span> <span class="token operator">=</span> <span class="token string">""</span>
  <span class="token keyword">let</span> <span class="token builtin">statusline</span> <span class="token operator">.=</span> <span class="token string">"%#Base#"</span>

  <span class="token comment">" Current mode</span>
  <span class="token keyword">let</span> <span class="token builtin">statusline</span> <span class="token operator">.=</span> <span class="token string">"%#Mode# %&#123;ModeCurrent()&#125;"</span>

  <span class="token comment">" Current git branch</span>
  <span class="token keyword">let</span> <span class="token builtin">statusline</span> <span class="token operator">.=</span> <span class="token string">"%#Git# %&#123;GitBranch(fugitive#head())&#125; %)"</span>

  <span class="token keyword">let</span> <span class="token builtin">statusline</span> <span class="token operator">.=</span> <span class="token string">"%#Base#"</span>

  <span class="token comment">" Align items to right</span>
  <span class="token keyword">let</span> <span class="token builtin">statusline</span> <span class="token operator">.=</span> <span class="token string">"%="</span>

  <span class="token comment">" Current modified status and filename</span>
  <span class="token keyword">let</span> <span class="token builtin">statusline</span> <span class="token operator">.=</span> <span class="token string">"%#Modi# %&#123;CheckMod(&amp;modified)&#125; "</span>

  <span class="token comment">" Current filetype</span>
  <span class="token keyword">let</span> <span class="token builtin">statusline</span> <span class="token operator">.=</span> <span class="token string">"%#Filetype# %&#123;CheckFT(&amp;filetype)&#125; "</span>

  <span class="token comment">" Current line and column</span>
  <span class="token keyword">let</span> <span class="token builtin">statusline</span> <span class="token operator">.=</span> <span class="token string">"%#LineCol# Ln %l, Col %c "</span>
  <span class="token keyword">return</span> <span class="token builtin">statusline</span>
<span class="token keyword">endfunction</span>

<span class="token keyword">function</span><span class="token operator">!</span> <span class="token function">InactiveLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token comment">" Set empty statusline and colors</span>
  <span class="token keyword">let</span> <span class="token builtin">statusline</span> <span class="token operator">=</span> <span class="token string">""</span>
  <span class="token keyword">let</span> <span class="token builtin">statusline</span> <span class="token operator">.=</span> <span class="token string">"%#Base#"</span>

  <span class="token comment">" Full path of the file</span>
  <span class="token keyword">let</span> <span class="token builtin">statusline</span> <span class="token operator">.=</span> <span class="token string">"%#Filename# %F "</span>

  <span class="token keyword">return</span> <span class="token builtin">statusline</span>
<span class="token keyword">endfunction</span></code>`,bt,_n,Ro,gt,_s,Ci=`<code class="language-vim"><span class="token comment">" Change statusline automatically</span>
augroup Statusline
  <span class="token builtin">autocmd</span><span class="token operator">!</span>
  <span class="token builtin">autocmd</span> WinEnter<span class="token punctuation">,</span>BufEnter <span class="token operator">*</span> <span class="token keyword">setlocal</span> <span class="token builtin">statusline</span><span class="token operator">=</span><span class="token operator">%</span><span class="token operator">!</span><span class="token function">ActiveLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token builtin">autocmd</span> WinLeave<span class="token punctuation">,</span>BufLeave <span class="token operator">*</span> <span class="token keyword">setlocal</span> <span class="token builtin">statusline</span><span class="token operator">=</span><span class="token operator">%</span><span class="token operator">!</span><span class="token function">InactiveLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token builtin">autocmd</span> FileType nerdtree <span class="token keyword">setlocal</span> <span class="token builtin">statusline</span><span class="token operator">=</span><span class="token operator">%</span><span class="token operator">!</span><span class="token function">NERDLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
augroup END</code>`,_t,D,Go,ua,Do,jo,Et,Es,Mi='<code class="language-vim"><span class="token keyword">set</span> <span class="token builtin">laststatus</span><span class="token operator">=</span><span class="token number">2</span></code>',It,En,Vo,Lt,In,qo,Ct,Ln,Cn,ap,Mt,j,Wo,Is,No,Oo,Pt,V,At,Ls,Mn,Uo,Tt,Pn,Yo,Bt;return S=new ii({props:{date:"2020-11-29",$$slots:{default:[Ki]},$$scope:{ctx:M}}}),V=new ii({props:{date:"2020-10-15",$$slots:{default:[Qi]},$$scope:{ctx:M}}}),{c(){f=e("h1"),v=e("a"),h=i("Table of Contents"),_=c(),d=e("ul"),m=e("li"),g=e("p"),w=e("a"),C=i("Introduction"),Cs=c(),H=e("li"),Bn=e("p"),Ms=e("a"),jt=i("Prerequisite"),Vt=c(),W=e("li"),Hn=e("p"),Ps=e("a"),qt=i("Creating the statusline"),Wt=c(),y=e("ul"),Sn=e("li"),As=e("a"),Nt=i("Deprecating the old one"),Ot=c(),$n=e("li"),Ts=e("a"),Ut=i("Making the structure"),Yt=c(),Fn=e("li"),Bs=e("a"),Jt=i("Base colour"),zt=c(),xn=e("li"),Hs=e("a"),Zt=i("Modes indicator"),Kt=c(),Rn=e("li"),Ss=e("a"),Qt=i("Git integration"),Xt=c(),Gn=e("li"),$s=e("a"),se=i("Right Section"),ne=c(),Dn=e("li"),Fs=e("a"),ae=i("Filename"),te=c(),jn=e("li"),xs=e("a"),ee=i("Filetype"),oe=c(),Vn=e("li"),Rs=e("a"),pe=i("Line Number"),le=c(),qn=e("li"),Gs=e("a"),ie=i("Inactive Line"),re=c(),Wn=e("li"),Nn=e("p"),Ds=e("a"),ce=i("Apply the statusline"),ue=c(),On=e("li"),Un=e("p"),js=e("a"),ke=i("Conclusion"),da=c(),N=e("h1"),Vs=e("a"),fe=i("Introduction"),ma=c(),qs=e("p"),de=i("Hi everyone! In this post, I will talk about making your own custom statusline in vim. There are a lot of plugins out there that makes vim statusline looks way better and works out of the box. But, if you make your own, that means you lose one dependency and it feels good to make your own custom one. That makes it unique compared to anyone else."),ha=c(),Ws=e("p"),me=i("The reason why I made this post is also because I want to change my statusline. While my current statusline looks eye candy (to me at least), it takes a whole lot of space. So, I want to simplifiy it and why not make that process as a post. Let\u2019s get into it!"),ya=c(),zo(S.$$.fragment),va=c(),O=e("h1"),Ns=e("a"),he=i("Prerequisite"),wa=c(),Os=e("p"),ye=i("First of all, we need to prepare a few things :"),ba=c(),L=e("ul"),Yn=e("li"),ve=i("(Neo)Vim Text Editor (Duh, isn\u2019t that obvious?)."),we=c(),Jn=e("li"),be=i("Terminal that is capable of true colours"),ge=c(),zn=e("li"),_e=i("Patience"),Ee=c(),Zn=e("li"),Ie=i("Googling skills incase something doesn\u2019t work correctly"),ga=c(),Us=e("p"),Le=i("All is set, let\u2019s actually make the statusline!"),_a=c(),U=e("h1"),Ys=e("a"),Ce=i("Creating the statusline"),Ea=c(),Y=e("h2"),Js=e("a"),Me=i("Deprecating the old one"),Ia=c(),zs=e("p"),Pe=i("First thing first, I removed my old statusline. You don\u2019t need to do it if you don\u2019t have it already. If you are curious how my statusline looks, let me show you."),La=c(),Zs=e("p"),Ks=e("img"),Ca=c(),$=e("p"),Ae=i("As you can see, it looks like a capsule for each module. I took the design from a reddit post that I\u2019ve found the other day. "),J=e("a"),Te=i("Here it is"),Be=i(". It looks sick when I saw it for the first time. But, as time passes I started to think that it wasted quite a lot of space. So I decided to change it"),Ma=c(),z=e("h2"),Qs=e("a"),He=i("Making the structure"),Pa=c(),Xs=e("p"),Se=i("Let\u2019s start with the structure of the statusline. Create 2 functions for your statusline as so."),Aa=c(),Z=e("pre"),Ta=c(),K=e("h2"),sn=e("a"),$e=i("Base colour"),Ba=c(),P=e("p"),Fe=i("Next, we\u2019ll define the base colour for the background. I chose a lighter colour for the background so it stands out. To add a base colour, you need to add "),Kn=e("code"),xe=i("%#Base#"),Re=i(" where "),Qn=e("code"),Ge=i("Base"),De=i(" is the name of the color highlight. To set a colour highlight, you\u2019d do:"),Ha=c(),Q=e("pre"),Sa=c(),nn=e("p"),je=i("You can freely change the colours as you like. The colour are set, let\u2019s apply it to our statusline. To apply it, you\u2019d do:"),$a=c(),X=e("pre"),Fa=c(),ss=e("h2"),an=e("a"),Ve=i("Modes indicator"),xa=c(),tn=e("p"),qe=i("Let\u2019s make a module for out statusline because so far, what we did is just setting the background colour. The most importan part for me is the indicator for the mode that you\u2019re currently in. To do that, you\u2019d add:"),Ra=c(),ns=e("pre"),Ga=c(),B=e("p"),We=i("Just calm down, don\u2019t get intimidated by the code. It looks like much, but it\u2019s just a list to indicate what mode you\u2019re currently in. Make sure you place that on top of the "),Xn=e("code"),Ne=i("ActiveLine"),Oe=i(" function. You don\u2019t need to understand all of that. All you need to know is, "),sa=e("em"),Ue=i("It just works."),Da=c(),A=e("p"),Ye=i("Let\u2019s add some colours for that module. It\u2019s the same like before, you add "),na=e("code"),Je=i("%#Mode#"),ze=i(" where "),aa=e("code"),Ze=i("Mode"),Ke=i(" is the name for highlight group. Set the colour for the highlight as so:"),ja=c(),as=e("pre"),Va=c(),F=e("p"),Qe=i("It will give the "),ta=e("code"),Xe=i("Mode"),so=i(" module a blue background and a dark colour for the text. It will also make the text bold. Let\u2019s ppply it to our statusline once again."),qa=c(),ts=e("pre"),Wa=c(),es=e("h2"),en=e("a"),no=i("Git integration"),Na=c(),x=e("p"),ao=i("Being able to see your git branch on your statusline is great. So, let\u2019s do that! First thing first, you\u2019ll need some kind of git plugin to show the git status (I think it\u2019s possible without it, but I\u2019m not sure). I\u2019ll use a vim plugin called "),os=e("a"),to=i("vim-fugitive"),eo=i(". It\u2019s not only for this reason, it has a lot of useful command too!"),Oa=c(),on=e("p"),oo=i("Let\u2019s create the module for that. First thing first, the branch name that you\u2019re currently in."),Ua=c(),ps=e("pre"),Ya=c(),pn=e("p"),po=i("Create the colours for that module and apply it by doing so:"),Ja=c(),ls=e("pre"),za=c(),is=e("h2"),ln=e("a"),lo=i("Right Section"),Za=c(),rn=e("p"),io=i("After creating the left section, let\u2019s move to the right part. To move to the right part of the statusline, what you\u2019d do is to add:"),Ka=c(),rs=e("pre"),Qa=c(),cn=e("p"),ro=i("What that block code is doing is:"),Xa=c(),R=e("ul"),ea=e("li"),co=i("It normalize the colour of the background"),uo=c(),oa=e("li"),ko=i("Move the next module to the right"),st=c(),cs=e("h2"),un=e("a"),fo=i("Filename"),nt=c(),kn=e("p"),mo=i("I want to make the filename module as the first module for the right section. I also added the feature where if your file isn\u2019t saved yet, it\u2019ll give a star symbol at the end of the filename, change the colour to white and make it bold."),at=c(),us=e("pre"),tt=c(),fn=e("p"),ho=i("Then we\u2019ll add it to our previous statusline like we did for the other modules."),et=c(),ks=e("pre"),ot=c(),fs=e("h2"),dn=e("a"),yo=i("Filetype"),pt=c(),E=e("p"),vo=i("Similar to "),pa=e("code"),wo=i("filename"),bo=i(", filetype module only display a filetype from that file. You know, like "),la=e("code"),go=i("javascript"),_o=i(", "),ia=e("code"),Eo=i("html"),Io=i(", "),ra=e("code"),Lo=i("markdown"),Co=i(", etc. Let\u2019s make that module."),lt=c(),ds=e("pre"),it=c(),mn=e("p"),Mo=i("After making it, let\u2019s apply it to our statusline."),rt=c(),ms=e("pre"),ct=c(),G=e("p"),Po=i("The reason why I use a function just to display a filetype is to make all of the letter lowercase and display "),ca=e("code"),Ao=i("-"),To=i(" when the filetype is unidentified."),ut=c(),hs=e("h2"),hn=e("a"),Bo=i("Line Number"),kt=c(),yn=e("p"),Ho=i("Last but not least, it\u2019s the line number and line column module. It\u2019s used to display the line number that you\u2019re currently in. It\u2019s a really simple module. Let\u2019s make that!"),ft=c(),ys=e("pre"),dt=c(),vs=e("h2"),vn=e("a"),So=i("Inactive Line"),mt=c(),wn=e("p"),$o=i("We\u2019ve made the statusline for the active window, let\u2019s make one for the inactive window. It\u2019s simple."),ht=c(),ws=e("pre"),yt=c(),bs=e("h1"),bn=e("a"),Fo=i("Apply the statusline"),vt=c(),gn=e("p"),xo=i("Let\u2019s see what we\u2019ve made so far."),wt=c(),gs=e("pre"),bt=c(),_n=e("p"),Ro=i("As you can see, currently we didn\u2019t do anything to our current statusline because we haven\u2019t apply it yet. So, let\u2019s apply it!"),gt=c(),_s=e("pre"),_t=c(),D=e("p"),Go=i("We use autocmd to make the statusline changed automatically based of the current window status. Make sure you\u2019ve set "),ua=e("code"),Do=i("laststatus"),jo=i(" to 2 so your vim will always display the statusline. If you don\u2019t know what I mean, add"),Et=c(),Es=e("pre"),It=c(),En=e("p"),Vo=i("to your .vimrc or init.vim"),Lt=c(),In=e("p"),qo=i("Here\u2019s what it looks like when it\u2019s finished"),Ct=c(),Ln=e("p"),Cn=e("img"),Mt=c(),j=e("p"),Wo=i(`It doesn\u2019t look like an eye candy, but it doesn\u2019t take a whole lotta space.
If you want the old one, `),Is=e("a"),No=i("Here it is"),Oo=i(". Just take what you need from that file, it\u2019s not that hard to understand ;)"),Pt=c(),zo(V.$$.fragment),At=c(),Ls=e("h1"),Mn=e("a"),Uo=i("Conclusion"),Tt=c(),Pn=e("p"),Yo=i("Making a custom statusline of your own is quite a lengthy process. But, I think it\u2019s a fun process nonetheless. If you want to tinker with it even more, just do it! It\u2019s a repetitive process once you know the basic. I\u2019m not a vim expert myself, so sorry if I\u2019ve missed something in this post. Alright then, I\u2019m gonna end this post right here. If you have any question regarding to this post, feel free to hit me up! See ya!"),this.h()},l(s){f=o(s,"H1",{id:!0});var t=p(f);v=o(t,"A",{href:!0});var ka=p(v);h=r(ka,"Table of Contents"),ka.forEach(n),t.forEach(n),_=u(s),d=o(s,"UL",{});var I=p(d);m=o(I,"LI",{});var tp=p(m);g=o(tp,"P",{});var ep=p(g);w=o(ep,"A",{href:!0});var op=p(w);C=r(op,"Introduction"),op.forEach(n),ep.forEach(n),tp.forEach(n),Cs=u(I),H=o(I,"LI",{});var pp=p(H);Bn=o(pp,"P",{});var lp=p(Bn);Ms=o(lp,"A",{href:!0});var ip=p(Ms);jt=r(ip,"Prerequisite"),ip.forEach(n),lp.forEach(n),pp.forEach(n),Vt=u(I),W=o(I,"LI",{});var Ht=p(W);Hn=o(Ht,"P",{});var rp=p(Hn);Ps=o(rp,"A",{href:!0});var cp=p(Ps);qt=r(cp,"Creating the statusline"),cp.forEach(n),rp.forEach(n),Wt=u(Ht),y=o(Ht,"UL",{});var b=p(y);Sn=o(b,"LI",{});var up=p(Sn);As=o(up,"A",{href:!0});var kp=p(As);Nt=r(kp,"Deprecating the old one"),kp.forEach(n),up.forEach(n),Ot=u(b),$n=o(b,"LI",{});var fp=p($n);Ts=o(fp,"A",{href:!0});var dp=p(Ts);Ut=r(dp,"Making the structure"),dp.forEach(n),fp.forEach(n),Yt=u(b),Fn=o(b,"LI",{});var mp=p(Fn);Bs=o(mp,"A",{href:!0});var hp=p(Bs);Jt=r(hp,"Base colour"),hp.forEach(n),mp.forEach(n),zt=u(b),xn=o(b,"LI",{});var yp=p(xn);Hs=o(yp,"A",{href:!0});var vp=p(Hs);Zt=r(vp,"Modes indicator"),vp.forEach(n),yp.forEach(n),Kt=u(b),Rn=o(b,"LI",{});var wp=p(Rn);Ss=o(wp,"A",{href:!0});var bp=p(Ss);Qt=r(bp,"Git integration"),bp.forEach(n),wp.forEach(n),Xt=u(b),Gn=o(b,"LI",{});var gp=p(Gn);$s=o(gp,"A",{href:!0});var _p=p($s);se=r(_p,"Right Section"),_p.forEach(n),gp.forEach(n),ne=u(b),Dn=o(b,"LI",{});var Ep=p(Dn);Fs=o(Ep,"A",{href:!0});var Ip=p(Fs);ae=r(Ip,"Filename"),Ip.forEach(n),Ep.forEach(n),te=u(b),jn=o(b,"LI",{});var Lp=p(jn);xs=o(Lp,"A",{href:!0});var Cp=p(xs);ee=r(Cp,"Filetype"),Cp.forEach(n),Lp.forEach(n),oe=u(b),Vn=o(b,"LI",{});var Mp=p(Vn);Rs=o(Mp,"A",{href:!0});var Pp=p(Rs);pe=r(Pp,"Line Number"),Pp.forEach(n),Mp.forEach(n),le=u(b),qn=o(b,"LI",{});var Ap=p(qn);Gs=o(Ap,"A",{href:!0});var Tp=p(Gs);ie=r(Tp,"Inactive Line"),Tp.forEach(n),Ap.forEach(n),b.forEach(n),Ht.forEach(n),re=u(I),Wn=o(I,"LI",{});var Bp=p(Wn);Nn=o(Bp,"P",{});var Hp=p(Nn);Ds=o(Hp,"A",{href:!0});var Sp=p(Ds);ce=r(Sp,"Apply the statusline"),Sp.forEach(n),Hp.forEach(n),Bp.forEach(n),ue=u(I),On=o(I,"LI",{});var $p=p(On);Un=o($p,"P",{});var Fp=p(Un);js=o(Fp,"A",{href:!0});var xp=p(js);ke=r(xp,"Conclusion"),xp.forEach(n),Fp.forEach(n),$p.forEach(n),I.forEach(n),da=u(s),N=o(s,"H1",{id:!0});var Rp=p(N);Vs=o(Rp,"A",{href:!0});var Gp=p(Vs);fe=r(Gp,"Introduction"),Gp.forEach(n),Rp.forEach(n),ma=u(s),qs=o(s,"P",{});var Dp=p(qs);de=r(Dp,"Hi everyone! In this post, I will talk about making your own custom statusline in vim. There are a lot of plugins out there that makes vim statusline looks way better and works out of the box. But, if you make your own, that means you lose one dependency and it feels good to make your own custom one. That makes it unique compared to anyone else."),Dp.forEach(n),ha=u(s),Ws=o(s,"P",{});var jp=p(Ws);me=r(jp,"The reason why I made this post is also because I want to change my statusline. While my current statusline looks eye candy (to me at least), it takes a whole lot of space. So, I want to simplifiy it and why not make that process as a post. Let\u2019s get into it!"),jp.forEach(n),ya=u(s),Zo(S.$$.fragment,s),va=u(s),O=o(s,"H1",{id:!0});var Vp=p(O);Ns=o(Vp,"A",{href:!0});var qp=p(Ns);he=r(qp,"Prerequisite"),qp.forEach(n),Vp.forEach(n),wa=u(s),Os=o(s,"P",{});var Wp=p(Os);ye=r(Wp,"First of all, we need to prepare a few things :"),Wp.forEach(n),ba=u(s),L=o(s,"UL",{});var q=p(L);Yn=o(q,"LI",{});var Np=p(Yn);ve=r(Np,"(Neo)Vim Text Editor (Duh, isn\u2019t that obvious?)."),Np.forEach(n),we=u(q),Jn=o(q,"LI",{});var Op=p(Jn);be=r(Op,"Terminal that is capable of true colours"),Op.forEach(n),ge=u(q),zn=o(q,"LI",{});var Up=p(zn);_e=r(Up,"Patience"),Up.forEach(n),Ee=u(q),Zn=o(q,"LI",{});var Yp=p(Zn);Ie=r(Yp,"Googling skills incase something doesn\u2019t work correctly"),Yp.forEach(n),q.forEach(n),ga=u(s),Us=o(s,"P",{});var Jp=p(Us);Le=r(Jp,"All is set, let\u2019s actually make the statusline!"),Jp.forEach(n),_a=u(s),U=o(s,"H1",{id:!0});var zp=p(U);Ys=o(zp,"A",{href:!0});var Zp=p(Ys);Ce=r(Zp,"Creating the statusline"),Zp.forEach(n),zp.forEach(n),Ea=u(s),Y=o(s,"H2",{id:!0});var Kp=p(Y);Js=o(Kp,"A",{href:!0});var Qp=p(Js);Me=r(Qp,"Deprecating the old one"),Qp.forEach(n),Kp.forEach(n),Ia=u(s),zs=o(s,"P",{});var Xp=p(zs);Pe=r(Xp,"First thing first, I removed my old statusline. You don\u2019t need to do it if you don\u2019t have it already. If you are curious how my statusline looks, let me show you."),Xp.forEach(n),La=u(s),Zs=o(s,"P",{});var sl=p(Zs);Ks=o(sl,"IMG",{src:!0,alt:!0}),sl.forEach(n),Ca=u(s),$=o(s,"P",{});var St=p($);Ae=r(St,"As you can see, it looks like a capsule for each module. I took the design from a reddit post that I\u2019ve found the other day. "),J=o(St,"A",{href:!0,rel:!0});var nl=p(J);Te=r(nl,"Here it is"),nl.forEach(n),Be=r(St,". It looks sick when I saw it for the first time. But, as time passes I started to think that it wasted quite a lot of space. So I decided to change it"),St.forEach(n),Ma=u(s),z=o(s,"H2",{id:!0});var al=p(z);Qs=o(al,"A",{href:!0});var tl=p(Qs);He=r(tl,"Making the structure"),tl.forEach(n),al.forEach(n),Pa=u(s),Xs=o(s,"P",{});var el=p(Xs);Se=r(el,"Let\u2019s start with the structure of the statusline. Create 2 functions for your statusline as so."),el.forEach(n),Aa=u(s),Z=o(s,"PRE",{class:!0});var Pi=p(Z);Pi.forEach(n),Ta=u(s),K=o(s,"H2",{id:!0});var ol=p(K);sn=o(ol,"A",{href:!0});var pl=p(sn);$e=r(pl,"Base colour"),pl.forEach(n),ol.forEach(n),Ba=u(s),P=o(s,"P",{});var An=p(P);Fe=r(An,"Next, we\u2019ll define the base colour for the background. I chose a lighter colour for the background so it stands out. To add a base colour, you need to add "),Kn=o(An,"CODE",{});var ll=p(Kn);xe=r(ll,"%#Base#"),ll.forEach(n),Re=r(An," where "),Qn=o(An,"CODE",{});var il=p(Qn);Ge=r(il,"Base"),il.forEach(n),De=r(An," is the name of the color highlight. To set a colour highlight, you\u2019d do:"),An.forEach(n),Ha=u(s),Q=o(s,"PRE",{class:!0});var Ai=p(Q);Ai.forEach(n),Sa=u(s),nn=o(s,"P",{});var rl=p(nn);je=r(rl,"You can freely change the colours as you like. The colour are set, let\u2019s apply it to our statusline. To apply it, you\u2019d do:"),rl.forEach(n),$a=u(s),X=o(s,"PRE",{class:!0});var Ti=p(X);Ti.forEach(n),Fa=u(s),ss=o(s,"H2",{id:!0});var cl=p(ss);an=o(cl,"A",{href:!0});var ul=p(an);Ve=r(ul,"Modes indicator"),ul.forEach(n),cl.forEach(n),xa=u(s),tn=o(s,"P",{});var kl=p(tn);qe=r(kl,"Let\u2019s make a module for out statusline because so far, what we did is just setting the background colour. The most importan part for me is the indicator for the mode that you\u2019re currently in. To do that, you\u2019d add:"),kl.forEach(n),Ra=u(s),ns=o(s,"PRE",{class:!0});var Bi=p(ns);Bi.forEach(n),Ga=u(s),B=o(s,"P",{});var fa=p(B);We=r(fa,"Just calm down, don\u2019t get intimidated by the code. It looks like much, but it\u2019s just a list to indicate what mode you\u2019re currently in. Make sure you place that on top of the "),Xn=o(fa,"CODE",{});var fl=p(Xn);Ne=r(fl,"ActiveLine"),fl.forEach(n),Oe=r(fa," function. You don\u2019t need to understand all of that. All you need to know is, "),sa=o(fa,"EM",{});var dl=p(sa);Ue=r(dl,"It just works."),dl.forEach(n),fa.forEach(n),Da=u(s),A=o(s,"P",{});var Tn=p(A);Ye=r(Tn,"Let\u2019s add some colours for that module. It\u2019s the same like before, you add "),na=o(Tn,"CODE",{});var ml=p(na);Je=r(ml,"%#Mode#"),ml.forEach(n),ze=r(Tn," where "),aa=o(Tn,"CODE",{});var hl=p(aa);Ze=r(hl,"Mode"),hl.forEach(n),Ke=r(Tn," is the name for highlight group. Set the colour for the highlight as so:"),Tn.forEach(n),ja=u(s),as=o(s,"PRE",{class:!0});var Hi=p(as);Hi.forEach(n),Va=u(s),F=o(s,"P",{});var $t=p(F);Qe=r($t,"It will give the "),ta=o($t,"CODE",{});var yl=p(ta);Xe=r(yl,"Mode"),yl.forEach(n),so=r($t," module a blue background and a dark colour for the text. It will also make the text bold. Let\u2019s ppply it to our statusline once again."),$t.forEach(n),qa=u(s),ts=o(s,"PRE",{class:!0});var Si=p(ts);Si.forEach(n),Wa=u(s),es=o(s,"H2",{id:!0});var vl=p(es);en=o(vl,"A",{href:!0});var wl=p(en);no=r(wl,"Git integration"),wl.forEach(n),vl.forEach(n),Na=u(s),x=o(s,"P",{});var Ft=p(x);ao=r(Ft,"Being able to see your git branch on your statusline is great. So, let\u2019s do that! First thing first, you\u2019ll need some kind of git plugin to show the git status (I think it\u2019s possible without it, but I\u2019m not sure). I\u2019ll use a vim plugin called "),os=o(Ft,"A",{href:!0,rel:!0});var bl=p(os);to=r(bl,"vim-fugitive"),bl.forEach(n),eo=r(Ft,". It\u2019s not only for this reason, it has a lot of useful command too!"),Ft.forEach(n),Oa=u(s),on=o(s,"P",{});var gl=p(on);oo=r(gl,"Let\u2019s create the module for that. First thing first, the branch name that you\u2019re currently in."),gl.forEach(n),Ua=u(s),ps=o(s,"PRE",{class:!0});var $i=p(ps);$i.forEach(n),Ya=u(s),pn=o(s,"P",{});var _l=p(pn);po=r(_l,"Create the colours for that module and apply it by doing so:"),_l.forEach(n),Ja=u(s),ls=o(s,"PRE",{class:!0});var Fi=p(ls);Fi.forEach(n),za=u(s),is=o(s,"H2",{id:!0});var El=p(is);ln=o(El,"A",{href:!0});var Il=p(ln);lo=r(Il,"Right Section"),Il.forEach(n),El.forEach(n),Za=u(s),rn=o(s,"P",{});var Ll=p(rn);io=r(Ll,"After creating the left section, let\u2019s move to the right part. To move to the right part of the statusline, what you\u2019d do is to add:"),Ll.forEach(n),Ka=u(s),rs=o(s,"PRE",{class:!0});var xi=p(rs);xi.forEach(n),Qa=u(s),cn=o(s,"P",{});var Cl=p(cn);ro=r(Cl,"What that block code is doing is:"),Cl.forEach(n),Xa=u(s),R=o(s,"UL",{});var xt=p(R);ea=o(xt,"LI",{});var Ml=p(ea);co=r(Ml,"It normalize the colour of the background"),Ml.forEach(n),uo=u(xt),oa=o(xt,"LI",{});var Pl=p(oa);ko=r(Pl,"Move the next module to the right"),Pl.forEach(n),xt.forEach(n),st=u(s),cs=o(s,"H2",{id:!0});var Al=p(cs);un=o(Al,"A",{href:!0});var Tl=p(un);fo=r(Tl,"Filename"),Tl.forEach(n),Al.forEach(n),nt=u(s),kn=o(s,"P",{});var Bl=p(kn);mo=r(Bl,"I want to make the filename module as the first module for the right section. I also added the feature where if your file isn\u2019t saved yet, it\u2019ll give a star symbol at the end of the filename, change the colour to white and make it bold."),Bl.forEach(n),at=u(s),us=o(s,"PRE",{class:!0});var Ri=p(us);Ri.forEach(n),tt=u(s),fn=o(s,"P",{});var Hl=p(fn);ho=r(Hl,"Then we\u2019ll add it to our previous statusline like we did for the other modules."),Hl.forEach(n),et=u(s),ks=o(s,"PRE",{class:!0});var Gi=p(ks);Gi.forEach(n),ot=u(s),fs=o(s,"H2",{id:!0});var Sl=p(fs);dn=o(Sl,"A",{href:!0});var $l=p(dn);yo=r($l,"Filetype"),$l.forEach(n),Sl.forEach(n),pt=u(s),E=o(s,"P",{});var T=p(E);vo=r(T,"Similar to "),pa=o(T,"CODE",{});var Fl=p(pa);wo=r(Fl,"filename"),Fl.forEach(n),bo=r(T,", filetype module only display a filetype from that file. You know, like "),la=o(T,"CODE",{});var xl=p(la);go=r(xl,"javascript"),xl.forEach(n),_o=r(T,", "),ia=o(T,"CODE",{});var Rl=p(ia);Eo=r(Rl,"html"),Rl.forEach(n),Io=r(T,", "),ra=o(T,"CODE",{});var Gl=p(ra);Lo=r(Gl,"markdown"),Gl.forEach(n),Co=r(T,", etc. Let\u2019s make that module."),T.forEach(n),lt=u(s),ds=o(s,"PRE",{class:!0});var Di=p(ds);Di.forEach(n),it=u(s),mn=o(s,"P",{});var Dl=p(mn);Mo=r(Dl,"After making it, let\u2019s apply it to our statusline."),Dl.forEach(n),rt=u(s),ms=o(s,"PRE",{class:!0});var ji=p(ms);ji.forEach(n),ct=u(s),G=o(s,"P",{});var Rt=p(G);Po=r(Rt,"The reason why I use a function just to display a filetype is to make all of the letter lowercase and display "),ca=o(Rt,"CODE",{});var jl=p(ca);Ao=r(jl,"-"),jl.forEach(n),To=r(Rt," when the filetype is unidentified."),Rt.forEach(n),ut=u(s),hs=o(s,"H2",{id:!0});var Vl=p(hs);hn=o(Vl,"A",{href:!0});var ql=p(hn);Bo=r(ql,"Line Number"),ql.forEach(n),Vl.forEach(n),kt=u(s),yn=o(s,"P",{});var Wl=p(yn);Ho=r(Wl,"Last but not least, it\u2019s the line number and line column module. It\u2019s used to display the line number that you\u2019re currently in. It\u2019s a really simple module. Let\u2019s make that!"),Wl.forEach(n),ft=u(s),ys=o(s,"PRE",{class:!0});var Vi=p(ys);Vi.forEach(n),dt=u(s),vs=o(s,"H2",{id:!0});var Nl=p(vs);vn=o(Nl,"A",{href:!0});var Ol=p(vn);So=r(Ol,"Inactive Line"),Ol.forEach(n),Nl.forEach(n),mt=u(s),wn=o(s,"P",{});var Ul=p(wn);$o=r(Ul,"We\u2019ve made the statusline for the active window, let\u2019s make one for the inactive window. It\u2019s simple."),Ul.forEach(n),ht=u(s),ws=o(s,"PRE",{class:!0});var qi=p(ws);qi.forEach(n),yt=u(s),bs=o(s,"H1",{id:!0});var Yl=p(bs);bn=o(Yl,"A",{href:!0});var Jl=p(bn);Fo=r(Jl,"Apply the statusline"),Jl.forEach(n),Yl.forEach(n),vt=u(s),gn=o(s,"P",{});var zl=p(gn);xo=r(zl,"Let\u2019s see what we\u2019ve made so far."),zl.forEach(n),wt=u(s),gs=o(s,"PRE",{class:!0});var Wi=p(gs);Wi.forEach(n),bt=u(s),_n=o(s,"P",{});var Zl=p(_n);Ro=r(Zl,"As you can see, currently we didn\u2019t do anything to our current statusline because we haven\u2019t apply it yet. So, let\u2019s apply it!"),Zl.forEach(n),gt=u(s),_s=o(s,"PRE",{class:!0});var Ni=p(_s);Ni.forEach(n),_t=u(s),D=o(s,"P",{});var Gt=p(D);Go=r(Gt,"We use autocmd to make the statusline changed automatically based of the current window status. Make sure you\u2019ve set "),ua=o(Gt,"CODE",{});var Kl=p(ua);Do=r(Kl,"laststatus"),Kl.forEach(n),jo=r(Gt," to 2 so your vim will always display the statusline. If you don\u2019t know what I mean, add"),Gt.forEach(n),Et=u(s),Es=o(s,"PRE",{class:!0});var Oi=p(Es);Oi.forEach(n),It=u(s),En=o(s,"P",{});var Ql=p(En);Vo=r(Ql,"to your .vimrc or init.vim"),Ql.forEach(n),Lt=u(s),In=o(s,"P",{});var Xl=p(In);qo=r(Xl,"Here\u2019s what it looks like when it\u2019s finished"),Xl.forEach(n),Ct=u(s),Ln=o(s,"P",{});var si=p(Ln);Cn=o(si,"IMG",{src:!0,alt:!0}),si.forEach(n),Mt=u(s),j=o(s,"P",{});var Dt=p(j);Wo=r(Dt,`It doesn\u2019t look like an eye candy, but it doesn\u2019t take a whole lotta space.
If you want the old one, `),Is=o(Dt,"A",{href:!0,rel:!0});var ni=p(Is);No=r(ni,"Here it is"),ni.forEach(n),Oo=r(Dt,". Just take what you need from that file, it\u2019s not that hard to understand ;)"),Dt.forEach(n),Pt=u(s),Zo(V.$$.fragment,s),At=u(s),Ls=o(s,"H1",{id:!0});var ai=p(Ls);Mn=o(ai,"A",{href:!0});var ti=p(Mn);Uo=r(ti,"Conclusion"),ti.forEach(n),ai.forEach(n),Tt=u(s),Pn=o(s,"P",{});var ei=p(Pn);Yo=r(ei,"Making a custom statusline of your own is quite a lengthy process. But, I think it\u2019s a fun process nonetheless. If you want to tinker with it even more, just do it! It\u2019s a repetitive process once you know the basic. I\u2019m not a vim expert myself, so sorry if I\u2019ve missed something in this post. Alright then, I\u2019m gonna end this post right here. If you have any question regarding to this post, feel free to hit me up! See ya!"),ei.forEach(n),this.h()},h(){k(v,"href","#table-of-contents"),k(f,"id","table-of-contents"),k(w,"href","#introduction"),k(Ms,"href","#prerequisite"),k(Ps,"href","#creating-the-statusline"),k(As,"href","#deprecating-the-old-one"),k(Ts,"href","#making-the-structure"),k(Bs,"href","#base-colour"),k(Hs,"href","#modes-indicator"),k(Ss,"href","#git-integration"),k($s,"href","#right-section"),k(Fs,"href","#filename"),k(xs,"href","#filetype"),k(Rs,"href","#line-number"),k(Gs,"href","#inactive-line"),k(Ds,"href","#apply-the-statusline"),k(js,"href","#conclusion"),k(Vs,"href","#introduction"),k(N,"id","introduction"),k(Ns,"href","#prerequisite"),k(O,"id","prerequisite"),k(Ys,"href","#creating-the-statusline"),k(U,"id","creating-the-statusline"),k(Js,"href","#deprecating-the-old-one"),k(Y,"id","deprecating-the-old-one"),li(Ks.src,np="/assets/post/vim-statusline/old.png")||k(Ks,"src",np),k(Ks,"alt","old statusline"),k(J,"href","https://www.reddit.com/r/vimporn/comments/efjcv0/gruvboxxx/?utm_source=share&utm_medium=web2x"),k(J,"rel","nofollow"),k(Qs,"href","#making-the-structure"),k(z,"id","making-the-structure"),k(Z,"class","language-vim"),k(sn,"href","#base-colour"),k(K,"id","base-colour"),k(Q,"class","language-vim"),k(X,"class","language-vim"),k(an,"href","#modes-indicator"),k(ss,"id","modes-indicator"),k(ns,"class","language-vim"),k(as,"class","language-vim"),k(ts,"class","language-vim"),k(en,"href","#git-integration"),k(es,"id","git-integration"),k(os,"href","https://github.com/tpope/vim-fugitive"),k(os,"rel","nofollow"),k(ps,"class","language-vim"),k(ls,"class","language-vim"),k(ln,"href","#right-section"),k(is,"id","right-section"),k(rs,"class","language-vim"),k(un,"href","#filename"),k(cs,"id","filename"),k(us,"class","language-vim"),k(ks,"class","language-vim"),k(dn,"href","#filetype"),k(fs,"id","filetype"),k(ds,"class","language-vim"),k(ms,"class","language-vim"),k(hn,"href","#line-number"),k(hs,"id","line-number"),k(ys,"class","language-vim"),k(vn,"href","#inactive-line"),k(vs,"id","inactive-line"),k(ws,"class","language-vim"),k(bn,"href","#apply-the-statusline"),k(bs,"id","apply-the-statusline"),k(gs,"class","language-vim"),k(_s,"class","language-vim"),k(Es,"class","language-vim"),li(Cn.src,ap="/assets/post/vim-statusline/new.png")||k(Cn,"src",ap),k(Cn,"alt","new statusline"),k(Is,"href","https://github.com/irrellia/dotfiles/blob/0c1ca17af07d7fdf72577a44d2a1e8bbab855d93/.config/nvim/modules/statusline.vim"),k(Is,"rel","nofollow"),k(Mn,"href","#conclusion"),k(Ls,"id","conclusion")},m(s,t){l(s,f,t),a(f,v),a(v,h),l(s,_,t),l(s,d,t),a(d,m),a(m,g),a(g,w),a(w,C),a(d,Cs),a(d,H),a(H,Bn),a(Bn,Ms),a(Ms,jt),a(d,Vt),a(d,W),a(W,Hn),a(Hn,Ps),a(Ps,qt),a(W,Wt),a(W,y),a(y,Sn),a(Sn,As),a(As,Nt),a(y,Ot),a(y,$n),a($n,Ts),a(Ts,Ut),a(y,Yt),a(y,Fn),a(Fn,Bs),a(Bs,Jt),a(y,zt),a(y,xn),a(xn,Hs),a(Hs,Zt),a(y,Kt),a(y,Rn),a(Rn,Ss),a(Ss,Qt),a(y,Xt),a(y,Gn),a(Gn,$s),a($s,se),a(y,ne),a(y,Dn),a(Dn,Fs),a(Fs,ae),a(y,te),a(y,jn),a(jn,xs),a(xs,ee),a(y,oe),a(y,Vn),a(Vn,Rs),a(Rs,pe),a(y,le),a(y,qn),a(qn,Gs),a(Gs,ie),a(d,re),a(d,Wn),a(Wn,Nn),a(Nn,Ds),a(Ds,ce),a(d,ue),a(d,On),a(On,Un),a(Un,js),a(js,ke),l(s,da,t),l(s,N,t),a(N,Vs),a(Vs,fe),l(s,ma,t),l(s,qs,t),a(qs,de),l(s,ha,t),l(s,Ws,t),a(Ws,me),l(s,ya,t),Ko(S,s,t),l(s,va,t),l(s,O,t),a(O,Ns),a(Ns,he),l(s,wa,t),l(s,Os,t),a(Os,ye),l(s,ba,t),l(s,L,t),a(L,Yn),a(Yn,ve),a(L,we),a(L,Jn),a(Jn,be),a(L,ge),a(L,zn),a(zn,_e),a(L,Ee),a(L,Zn),a(Zn,Ie),l(s,ga,t),l(s,Us,t),a(Us,Le),l(s,_a,t),l(s,U,t),a(U,Ys),a(Ys,Ce),l(s,Ea,t),l(s,Y,t),a(Y,Js),a(Js,Me),l(s,Ia,t),l(s,zs,t),a(zs,Pe),l(s,La,t),l(s,Zs,t),a(Zs,Ks),l(s,Ca,t),l(s,$,t),a($,Ae),a($,J),a(J,Te),a($,Be),l(s,Ma,t),l(s,z,t),a(z,Qs),a(Qs,He),l(s,Pa,t),l(s,Xs,t),a(Xs,Se),l(s,Aa,t),l(s,Z,t),Z.innerHTML=ci,l(s,Ta,t),l(s,K,t),a(K,sn),a(sn,$e),l(s,Ba,t),l(s,P,t),a(P,Fe),a(P,Kn),a(Kn,xe),a(P,Re),a(P,Qn),a(Qn,Ge),a(P,De),l(s,Ha,t),l(s,Q,t),Q.innerHTML=ui,l(s,Sa,t),l(s,nn,t),a(nn,je),l(s,$a,t),l(s,X,t),X.innerHTML=ki,l(s,Fa,t),l(s,ss,t),a(ss,an),a(an,Ve),l(s,xa,t),l(s,tn,t),a(tn,qe),l(s,Ra,t),l(s,ns,t),ns.innerHTML=fi,l(s,Ga,t),l(s,B,t),a(B,We),a(B,Xn),a(Xn,Ne),a(B,Oe),a(B,sa),a(sa,Ue),l(s,Da,t),l(s,A,t),a(A,Ye),a(A,na),a(na,Je),a(A,ze),a(A,aa),a(aa,Ze),a(A,Ke),l(s,ja,t),l(s,as,t),as.innerHTML=di,l(s,Va,t),l(s,F,t),a(F,Qe),a(F,ta),a(ta,Xe),a(F,so),l(s,qa,t),l(s,ts,t),ts.innerHTML=mi,l(s,Wa,t),l(s,es,t),a(es,en),a(en,no),l(s,Na,t),l(s,x,t),a(x,ao),a(x,os),a(os,to),a(x,eo),l(s,Oa,t),l(s,on,t),a(on,oo),l(s,Ua,t),l(s,ps,t),ps.innerHTML=hi,l(s,Ya,t),l(s,pn,t),a(pn,po),l(s,Ja,t),l(s,ls,t),ls.innerHTML=yi,l(s,za,t),l(s,is,t),a(is,ln),a(ln,lo),l(s,Za,t),l(s,rn,t),a(rn,io),l(s,Ka,t),l(s,rs,t),rs.innerHTML=vi,l(s,Qa,t),l(s,cn,t),a(cn,ro),l(s,Xa,t),l(s,R,t),a(R,ea),a(ea,co),a(R,uo),a(R,oa),a(oa,ko),l(s,st,t),l(s,cs,t),a(cs,un),a(un,fo),l(s,nt,t),l(s,kn,t),a(kn,mo),l(s,at,t),l(s,us,t),us.innerHTML=wi,l(s,tt,t),l(s,fn,t),a(fn,ho),l(s,et,t),l(s,ks,t),ks.innerHTML=bi,l(s,ot,t),l(s,fs,t),a(fs,dn),a(dn,yo),l(s,pt,t),l(s,E,t),a(E,vo),a(E,pa),a(pa,wo),a(E,bo),a(E,la),a(la,go),a(E,_o),a(E,ia),a(ia,Eo),a(E,Io),a(E,ra),a(ra,Lo),a(E,Co),l(s,lt,t),l(s,ds,t),ds.innerHTML=gi,l(s,it,t),l(s,mn,t),a(mn,Mo),l(s,rt,t),l(s,ms,t),ms.innerHTML=_i,l(s,ct,t),l(s,G,t),a(G,Po),a(G,ca),a(ca,Ao),a(G,To),l(s,ut,t),l(s,hs,t),a(hs,hn),a(hn,Bo),l(s,kt,t),l(s,yn,t),a(yn,Ho),l(s,ft,t),l(s,ys,t),ys.innerHTML=Ei,l(s,dt,t),l(s,vs,t),a(vs,vn),a(vn,So),l(s,mt,t),l(s,wn,t),a(wn,$o),l(s,ht,t),l(s,ws,t),ws.innerHTML=Ii,l(s,yt,t),l(s,bs,t),a(bs,bn),a(bn,Fo),l(s,vt,t),l(s,gn,t),a(gn,xo),l(s,wt,t),l(s,gs,t),gs.innerHTML=Li,l(s,bt,t),l(s,_n,t),a(_n,Ro),l(s,gt,t),l(s,_s,t),_s.innerHTML=Ci,l(s,_t,t),l(s,D,t),a(D,Go),a(D,ua),a(ua,Do),a(D,jo),l(s,Et,t),l(s,Es,t),Es.innerHTML=Mi,l(s,It,t),l(s,En,t),a(En,Vo),l(s,Lt,t),l(s,In,t),a(In,qo),l(s,Ct,t),l(s,Ln,t),a(Ln,Cn),l(s,Mt,t),l(s,j,t),a(j,Wo),a(j,Is),a(Is,No),a(j,Oo),l(s,Pt,t),Ko(V,s,t),l(s,At,t),l(s,Ls,t),a(Ls,Mn),a(Mn,Uo),l(s,Tt,t),l(s,Pn,t),a(Pn,Yo),Bt=!0},p(s,t){const ka={};t&2&&(ka.$$scope={dirty:t,ctx:s}),S.$set(ka);const I={};t&2&&(I.$$scope={dirty:t,ctx:s}),V.$set(I)},i(s){Bt||(Qo(S.$$.fragment,s),Qo(V.$$.fragment,s),Bt=!0)},o(s){Xo(S.$$.fragment,s),Xo(V.$$.fragment,s),Bt=!1},d(s){s&&n(f),s&&n(_),s&&n(d),s&&n(da),s&&n(N),s&&n(ma),s&&n(qs),s&&n(ha),s&&n(Ws),s&&n(ya),sp(S,s),s&&n(va),s&&n(O),s&&n(wa),s&&n(Os),s&&n(ba),s&&n(L),s&&n(ga),s&&n(Us),s&&n(_a),s&&n(U),s&&n(Ea),s&&n(Y),s&&n(Ia),s&&n(zs),s&&n(La),s&&n(Zs),s&&n(Ca),s&&n($),s&&n(Ma),s&&n(z),s&&n(Pa),s&&n(Xs),s&&n(Aa),s&&n(Z),s&&n(Ta),s&&n(K),s&&n(Ba),s&&n(P),s&&n(Ha),s&&n(Q),s&&n(Sa),s&&n(nn),s&&n($a),s&&n(X),s&&n(Fa),s&&n(ss),s&&n(xa),s&&n(tn),s&&n(Ra),s&&n(ns),s&&n(Ga),s&&n(B),s&&n(Da),s&&n(A),s&&n(ja),s&&n(as),s&&n(Va),s&&n(F),s&&n(qa),s&&n(ts),s&&n(Wa),s&&n(es),s&&n(Na),s&&n(x),s&&n(Oa),s&&n(on),s&&n(Ua),s&&n(ps),s&&n(Ya),s&&n(pn),s&&n(Ja),s&&n(ls),s&&n(za),s&&n(is),s&&n(Za),s&&n(rn),s&&n(Ka),s&&n(rs),s&&n(Qa),s&&n(cn),s&&n(Xa),s&&n(R),s&&n(st),s&&n(cs),s&&n(nt),s&&n(kn),s&&n(at),s&&n(us),s&&n(tt),s&&n(fn),s&&n(et),s&&n(ks),s&&n(ot),s&&n(fs),s&&n(pt),s&&n(E),s&&n(lt),s&&n(ds),s&&n(it),s&&n(mn),s&&n(rt),s&&n(ms),s&&n(ct),s&&n(G),s&&n(ut),s&&n(hs),s&&n(kt),s&&n(yn),s&&n(ft),s&&n(ys),s&&n(dt),s&&n(vs),s&&n(mt),s&&n(wn),s&&n(ht),s&&n(ws),s&&n(yt),s&&n(bs),s&&n(vt),s&&n(gn),s&&n(wt),s&&n(gs),s&&n(bt),s&&n(_n),s&&n(gt),s&&n(_s),s&&n(_t),s&&n(D),s&&n(Et),s&&n(Es),s&&n(It),s&&n(En),s&&n(Lt),s&&n(In),s&&n(Ct),s&&n(Ln),s&&n(Mt),s&&n(j),s&&n(Pt),sp(V,s),s&&n(At),s&&n(Ls),s&&n(Tt),s&&n(Pn)}}}function sr(M){let f,v;const h=[M[0],ri];let _={$$slots:{default:[Xi]},$$scope:{ctx:M}};for(let d=0;d<h.length;d+=1)_=Jo(_,h[d]);return f=new Zi({props:_}),{c(){zo(f.$$.fragment)},l(d){Zo(f.$$.fragment,d)},m(d,m){Ko(f,d,m),v=!0},p(d,[m]){const g=m&1?zi(h,[m&1&&oi(d[0]),m&0&&oi(ri)]):{};m&2&&(g.$$scope={dirty:m,ctx:d}),f.$set(g)},i(d){v||(Qo(f.$$.fragment,d),v=!0)},o(d){Xo(f.$$.fragment,d),v=!1},d(d){sp(f,d)}}}const ri={draft:!1,title:"Making your own statusline in (Neo)vim",date:"2020-02-15T00:00:00.000Z",desc:"A post where I made my own statusline to make my vim looks more personalised",tags:["neovim"]};function nr(M,f,v){return M.$$set=h=>{v(0,f=Jo(Jo({},f),pi(h)))},f=pi(f),[f]}class cr extends Ui{constructor(f){super();Yi(this,f,nr,sr,Ji,{})}}export{cr as default,ri as metadata};
