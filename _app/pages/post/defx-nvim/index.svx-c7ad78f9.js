import{S as co,i as uo,s as ko,C as Rt,w as fo,x as mo,y as ho,z as yo,A as ze,q as wo,o as _o,B as vo,U as Ke,e as t,t as r,k as c,c as e,a as p,h as i,d as n,m as u,b as k,a1 as Nt,g as l,F as a,H as go}from"../../../chunks/vendor-a3554607.js";import{P as xo}from"../../../chunks/post-84b6700e.js";import"../../../chunks/stores-5109c37e.js";import"../../../chunks/Progress-da00dd34.js";import"../../../chunks/theme-4e4001f1.js";/* empty css                                      */function Eo(ps){let d,m,v,E,f,h,b,ls,ta,ea,Ys,qs,rs,oa,pa,R,Gs,is,la,ra,g,$s,cs,ia,ca,Us,us,ua,ka,Fs,ks,fa,da,zs,Ks,fs,ma,ln,N,ds,ha,rn,y,ya,C,wa,_a,S,va,ga,cn,H,ms,xa,un,I,Ea,M,ba,Ia,kn,O,Be=`<code class="language-vim"><span class="token keyword">if</span> <span class="token function">has</span><span class="token punctuation">(</span><span class="token string">'nvim'</span><span class="token punctuation">)</span>
  Plug <span class="token string">'Shougo/defx.nvim'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> <span class="token string">'do'</span><span class="token punctuation">:</span> <span class="token string">':UpdateRemotePlugins'</span> <span class="token punctuation">&#125;</span>
<span class="token keyword">else</span>
  Plug <span class="token string">'Shougo/defx.nvim'</span>
  Plug <span class="token string">'roxma/nvim-yarp'</span>
  Plug <span class="token string">'roxma/vim-hug-neovim-rpc'</span>
<span class="token keyword">endif</span></code>`,fn,w,Ta,Ws,Pa,Da,Bs,Aa,La,dn,Y,hs,ja,mn,q,ys,Ra,hn,T,Na,Vs,Ca,Sa,yn,G,Ve='<code class="language-vim">nnoremap <span class="token operator">&lt;</span>C<span class="token operator">-</span><span class="token keyword">n</span><span class="token operator">></span> <span class="token punctuation">:</span>Defx</code>',wn,P,Ha,Zs,Ma,Oa,_n,D,Ya,$,qa,Ga,vn,U,Ze=`<code class="language-vim"><span class="token builtin">autocmd</span> FileType defx <span class="token keyword">call</span> s<span class="token punctuation">:</span><span class="token function">defx_my_settings</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">function</span><span class="token operator">!</span> s<span class="token punctuation">:</span><span class="token function">defx_my_settings</span><span class="token punctuation">(</span><span class="token punctuation">)</span> abort
  <span class="token comment">" Define mappings</span>
  nnoremap <span class="token operator">&lt;</span><span class="token keyword">silent</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token keyword">buffer</span><span class="token operator">></span><span class="token operator">&lt;</span>expr<span class="token operator">></span> <span class="token operator">&lt;</span>CR<span class="token operator">></span> defx#<span class="token function">do_action</span><span class="token punctuation">(</span><span class="token string">'drop'</span><span class="token punctuation">)</span>
  nnoremap <span class="token operator">&lt;</span><span class="token keyword">silent</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token keyword">buffer</span><span class="token operator">></span><span class="token operator">&lt;</span>expr<span class="token operator">></span> <span class="token keyword">c</span> defx#<span class="token function">do_action</span><span class="token punctuation">(</span><span class="token string">'copy'</span><span class="token punctuation">)</span>
  nnoremap <span class="token operator">&lt;</span><span class="token keyword">silent</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token keyword">buffer</span><span class="token operator">></span><span class="token operator">&lt;</span>expr<span class="token operator">></span> <span class="token keyword">m</span> defx#<span class="token function">do_action</span><span class="token punctuation">(</span><span class="token string">'move'</span><span class="token punctuation">)</span>
  nnoremap <span class="token operator">&lt;</span><span class="token keyword">silent</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token keyword">buffer</span><span class="token operator">></span><span class="token operator">&lt;</span>expr<span class="token operator">></span> <span class="token keyword">p</span> defx#<span class="token function">do_action</span><span class="token punctuation">(</span><span class="token string">'paste'</span><span class="token punctuation">)</span>
  nnoremap <span class="token operator">&lt;</span><span class="token keyword">silent</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token keyword">buffer</span><span class="token operator">></span><span class="token operator">&lt;</span>expr<span class="token operator">></span> <span class="token keyword">l</span> defx#<span class="token function">do_action</span><span class="token punctuation">(</span><span class="token string">'open'</span><span class="token punctuation">)</span>
  nnoremap <span class="token operator">&lt;</span><span class="token keyword">silent</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token keyword">buffer</span><span class="token operator">></span><span class="token operator">&lt;</span>expr<span class="token operator">></span> E defx#<span class="token function">do_action</span><span class="token punctuation">(</span><span class="token string">'open'</span><span class="token punctuation">,</span> <span class="token string">'vsplit'</span><span class="token punctuation">)</span>
  nnoremap <span class="token operator">&lt;</span><span class="token keyword">silent</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token keyword">buffer</span><span class="token operator">></span><span class="token operator">&lt;</span>expr<span class="token operator">></span> <span class="token keyword">P</span> defx#<span class="token function">do_action</span><span class="token punctuation">(</span><span class="token string">'open'</span><span class="token punctuation">,</span> <span class="token string">'pedit'</span><span class="token punctuation">)</span>
  nnoremap <span class="token operator">&lt;</span><span class="token keyword">silent</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token keyword">buffer</span><span class="token operator">></span><span class="token operator">&lt;</span>expr<span class="token operator">></span> <span class="token keyword">o</span> defx#<span class="token function">do_action</span><span class="token punctuation">(</span><span class="token string">'open_or_close_tree'</span><span class="token punctuation">)</span>
  nnoremap <span class="token operator">&lt;</span><span class="token keyword">silent</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token keyword">buffer</span><span class="token operator">></span><span class="token operator">&lt;</span>expr<span class="token operator">></span> K defx#<span class="token function">do_action</span><span class="token punctuation">(</span><span class="token string">'new_directory'</span><span class="token punctuation">)</span>
  nnoremap <span class="token operator">&lt;</span><span class="token keyword">silent</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token keyword">buffer</span><span class="token operator">></span><span class="token operator">&lt;</span>expr<span class="token operator">></span> <span class="token keyword">N</span> defx#<span class="token function">do_action</span><span class="token punctuation">(</span><span class="token string">'new_file'</span><span class="token punctuation">)</span>
  nnoremap <span class="token operator">&lt;</span><span class="token keyword">silent</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token keyword">buffer</span><span class="token operator">></span><span class="token operator">&lt;</span>expr<span class="token operator">></span> M defx#<span class="token function">do_action</span><span class="token punctuation">(</span><span class="token string">'new_multiple_files'</span><span class="token punctuation">)</span>
  nnoremap <span class="token operator">&lt;</span><span class="token keyword">silent</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token keyword">buffer</span><span class="token operator">></span><span class="token operator">&lt;</span>expr<span class="token operator">></span> C defx#<span class="token function">do_action</span><span class="token punctuation">(</span><span class="token string">'toggle_columns'</span><span class="token punctuation">,</span> <span class="token string">'mark:indent:icon:filename:type:size:time'</span><span class="token punctuation">)</span>
  nnoremap <span class="token operator">&lt;</span><span class="token keyword">silent</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token keyword">buffer</span><span class="token operator">></span><span class="token operator">&lt;</span>expr<span class="token operator">></span> S defx#<span class="token function">do_action</span><span class="token punctuation">(</span><span class="token string">'toggle_sort'</span><span class="token punctuation">,</span> <span class="token string">'time'</span><span class="token punctuation">)</span>
  nnoremap <span class="token operator">&lt;</span><span class="token keyword">silent</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token keyword">buffer</span><span class="token operator">></span><span class="token operator">&lt;</span>expr<span class="token operator">></span> <span class="token keyword">d</span> defx#<span class="token function">do_action</span><span class="token punctuation">(</span><span class="token string">'remove'</span><span class="token punctuation">)</span>
  nnoremap <span class="token operator">&lt;</span><span class="token keyword">silent</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token keyword">buffer</span><span class="token operator">></span><span class="token operator">&lt;</span>expr<span class="token operator">></span> <span class="token keyword">r</span> defx#<span class="token function">do_action</span><span class="token punctuation">(</span><span class="token string">'rename'</span><span class="token punctuation">)</span>
  nnoremap <span class="token operator">&lt;</span><span class="token keyword">silent</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token keyword">buffer</span><span class="token operator">></span><span class="token operator">&lt;</span>expr<span class="token operator">></span> <span class="token operator">!</span> defx#<span class="token function">do_action</span><span class="token punctuation">(</span><span class="token string">'execute_command'</span><span class="token punctuation">)</span>
  nnoremap <span class="token operator">&lt;</span><span class="token keyword">silent</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token keyword">buffer</span><span class="token operator">></span><span class="token operator">&lt;</span>expr<span class="token operator">></span> <span class="token keyword">x</span> defx#<span class="token function">do_action</span><span class="token punctuation">(</span><span class="token string">'execute_system'</span><span class="token punctuation">)</span>
  nnoremap <span class="token operator">&lt;</span><span class="token keyword">silent</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token keyword">buffer</span><span class="token operator">></span><span class="token operator">&lt;</span>expr<span class="token operator">></span> yy defx#<span class="token function">do_action</span><span class="token punctuation">(</span><span class="token string">'yank_path'</span><span class="token punctuation">)</span>
  nnoremap <span class="token operator">&lt;</span><span class="token keyword">silent</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token keyword">buffer</span><span class="token operator">></span><span class="token operator">&lt;</span>expr<span class="token operator">></span> <span class="token operator">.</span> defx#<span class="token function">do_action</span><span class="token punctuation">(</span><span class="token string">'toggle_ignored_files'</span><span class="token punctuation">)</span>
  nnoremap <span class="token operator">&lt;</span><span class="token keyword">silent</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token keyword">buffer</span><span class="token operator">></span><span class="token operator">&lt;</span>expr<span class="token operator">></span> <span class="token punctuation">;</span> defx#<span class="token function">do_action</span><span class="token punctuation">(</span><span class="token string">'repeat'</span><span class="token punctuation">)</span>
  nnoremap <span class="token operator">&lt;</span><span class="token keyword">silent</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token keyword">buffer</span><span class="token operator">></span><span class="token operator">&lt;</span>expr<span class="token operator">></span> <span class="token keyword">h</span> defx#<span class="token function">do_action</span><span class="token punctuation">(</span><span class="token string">'cd'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'..'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
  nnoremap <span class="token operator">&lt;</span><span class="token keyword">silent</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token keyword">buffer</span><span class="token operator">></span><span class="token operator">&lt;</span>expr<span class="token operator">></span> ~ defx#<span class="token function">do_action</span><span class="token punctuation">(</span><span class="token string">'cd'</span><span class="token punctuation">)</span>
  nnoremap <span class="token operator">&lt;</span><span class="token keyword">silent</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token keyword">buffer</span><span class="token operator">></span><span class="token operator">&lt;</span>expr<span class="token operator">></span> <span class="token keyword">q</span> defx#<span class="token function">do_action</span><span class="token punctuation">(</span><span class="token string">'quit'</span><span class="token punctuation">)</span>
  nnoremap <span class="token operator">&lt;</span><span class="token keyword">silent</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token keyword">buffer</span><span class="token operator">></span><span class="token operator">&lt;</span>expr<span class="token operator">></span> <span class="token operator">&lt;</span>Space<span class="token operator">></span> defx#<span class="token function">do_action</span><span class="token punctuation">(</span><span class="token string">'toggle_select'</span><span class="token punctuation">)</span> <span class="token operator">.</span> <span class="token string">'j'</span>
  nnoremap <span class="token operator">&lt;</span><span class="token keyword">silent</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token keyword">buffer</span><span class="token operator">></span><span class="token operator">&lt;</span>expr<span class="token operator">></span> <span class="token operator">*</span> defx#<span class="token function">do_action</span><span class="token punctuation">(</span><span class="token string">'toggle_select_all'</span><span class="token punctuation">)</span>
  nnoremap <span class="token operator">&lt;</span><span class="token keyword">silent</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token keyword">buffer</span><span class="token operator">></span><span class="token operator">&lt;</span>expr<span class="token operator">></span> <span class="token keyword">j</span> <span class="token function">line</span><span class="token punctuation">(</span><span class="token string">'.'</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token function">line</span><span class="token punctuation">(</span><span class="token string">'$'</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token string">'gg'</span> <span class="token punctuation">:</span> <span class="token string">'j'</span>
  nnoremap <span class="token operator">&lt;</span><span class="token keyword">silent</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token keyword">buffer</span><span class="token operator">></span><span class="token operator">&lt;</span>expr<span class="token operator">></span> <span class="token keyword">k</span> <span class="token function">line</span><span class="token punctuation">(</span><span class="token string">'.'</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">?</span> <span class="token string">'G'</span> <span class="token punctuation">:</span> <span class="token string">'k'</span>
  nnoremap <span class="token operator">&lt;</span><span class="token keyword">silent</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token keyword">buffer</span><span class="token operator">></span><span class="token operator">&lt;</span>expr<span class="token operator">></span> <span class="token operator">&lt;</span>C<span class="token operator">-</span><span class="token keyword">l</span><span class="token operator">></span> defx#<span class="token function">do_action</span><span class="token punctuation">(</span><span class="token string">'redraw'</span><span class="token punctuation">)</span>
  nnoremap <span class="token operator">&lt;</span><span class="token keyword">silent</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token keyword">buffer</span><span class="token operator">></span><span class="token operator">&lt;</span>expr<span class="token operator">></span> <span class="token operator">&lt;</span>C<span class="token operator">-</span>g<span class="token operator">></span> defx#<span class="token function">do_action</span><span class="token punctuation">(</span><span class="token string">'print'</span><span class="token punctuation">)</span>
  nnoremap <span class="token operator">&lt;</span><span class="token keyword">silent</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token keyword">buffer</span><span class="token operator">></span><span class="token operator">&lt;</span>expr<span class="token operator">></span> <span class="token keyword">cd</span> defx#<span class="token function">do_action</span><span class="token punctuation">(</span><span class="token string">'change_vim_cwd'</span><span class="token punctuation">)</span>
<span class="token keyword">endfunction</span></code>`,gn,ws,$a,xn,F,_s,Ua,En,vs,Fa,bn,z,Je=`<code class="language-vim"><span class="token comment">" Set appearance</span>
<span class="token keyword">call</span> defx#custom#<span class="token function">option</span><span class="token punctuation">(</span><span class="token string">'_'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>
       <span class="token string">'winwidth'</span><span class="token punctuation">:</span> <span class="token number">30</span><span class="token punctuation">,</span>
       <span class="token string">'split'</span><span class="token punctuation">:</span> <span class="token string">'vertical'</span><span class="token punctuation">,</span>
       <span class="token string">'direction'</span><span class="token punctuation">:</span> <span class="token string">'topleft'</span><span class="token punctuation">,</span>
       <span class="token string">'show_ignored_files'</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
       <span class="token string">'buffer_name'</span><span class="token punctuation">:</span> <span class="token string">'defxplorer'</span><span class="token punctuation">,</span>
       <span class="token string">'toggle'</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
       <span class="token string">'resume'</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
       <span class="token punctuation">&#125;</span><span class="token punctuation">)</span></code>`,In,gs,za,Tn,K,Js,Ka,Wa,Pn,W,Qs,Ba,Va,Dn,x,Xs,Za,Ja,sn,Qa,Xa,An,B,nn,st,nt,Ln,V,an,at,tt,jn,Z,tn,et,ot,Rn,J,en,pt,lt,Nn,xs,rt,Cn,Es,bs,Ct,Sn,Is,it,Hn,Q,Ts,ct,Mn,Ps,ut,On,A,kt,X,ft,dt,Yn,ss,Qe=`<code class="language-vim">Plug <span class="token string">'kristijanhusak/defx-icons'</span></code>`,qn,_,mt,on,ht,yt,ns,wt,_t,Gn,as,Xe=`<code class="language-vim"><span class="token comment">" Set appearance</span>
<span class="token keyword">call</span> defx#custom#<span class="token function">option</span><span class="token punctuation">(</span><span class="token string">'_'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>
       <span class="token string">'winwidth'</span><span class="token punctuation">:</span> <span class="token number">30</span><span class="token punctuation">,</span>
       <span class="token string">'split'</span><span class="token punctuation">:</span> <span class="token string">'vertical'</span><span class="token punctuation">,</span>
       <span class="token string">'direction'</span><span class="token punctuation">:</span> <span class="token string">'topleft'</span><span class="token punctuation">,</span>
       <span class="token string">'show_ignored_files'</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
       <span class="token string">'buffer_name'</span><span class="token punctuation">:</span> <span class="token string">'defxplorer'</span><span class="token punctuation">,</span>
       <span class="token string">'toggle'</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
       <span class="token string">'columns'</span><span class="token punctuation">:</span> <span class="token string">'icons:filename'</span><span class="token punctuation">,</span>
       <span class="token string">'resume'</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
       <span class="token punctuation">&#125;</span><span class="token punctuation">)</span></code>`,$n,Ds,vt,Un,ts,so=`<code class="language-vim"><span class="token keyword">call</span> defx#custom#<span class="token function">column</span><span class="token punctuation">(</span><span class="token string">'icon'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>
       <span class="token string">'directory_icon'</span><span class="token punctuation">:</span> <span class="token string">'\u25B8'</span><span class="token punctuation">,</span>
       <span class="token string">'opened_icon'</span><span class="token punctuation">:</span> <span class="token string">'\u25BE'</span><span class="token punctuation">,</span>
       <span class="token punctuation">&#125;</span><span class="token punctuation">)</span></code>`,Fn,As,gt,zn,es,no=`<code class="language-vim"><span class="token comment">" Set appearance</span>
<span class="token keyword">call</span> defx#custom#<span class="token function">option</span><span class="token punctuation">(</span><span class="token string">'_'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>
       <span class="token string">'winwidth'</span><span class="token punctuation">:</span> <span class="token number">30</span><span class="token punctuation">,</span>
       <span class="token string">'split'</span><span class="token punctuation">:</span> <span class="token string">'vertical'</span><span class="token punctuation">,</span>
       <span class="token string">'direction'</span><span class="token punctuation">:</span> <span class="token string">'topleft'</span><span class="token punctuation">,</span>
       <span class="token string">'show_ignored_files'</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
       <span class="token string">'buffer_name'</span><span class="token punctuation">:</span> <span class="token string">'defxplorer'</span><span class="token punctuation">,</span>
       <span class="token string">'toggle'</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
       <span class="token string">'columns'</span><span class="token punctuation">:</span> <span class="token string">'icon:indent:icons:filename'</span><span class="token punctuation">,</span>
       <span class="token string">'resume'</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
       <span class="token punctuation">&#125;</span><span class="token punctuation">)</span></code>`,Kn,Ls,xt,Wn,L,js,St,Et,Rs,Ht,Bn,os,Ns,bt,Vn,Cs,It;return{c(){d=t("h1"),m=t("a"),v=r("Table of Contents"),E=c(),f=t("ul"),h=t("li"),b=t("p"),ls=t("a"),ta=r("Introduction"),ea=c(),Ys=t("li"),qs=t("p"),rs=t("a"),oa=r("Installation"),pa=c(),R=t("li"),Gs=t("p"),is=t("a"),la=r("Configuration"),ra=c(),g=t("ul"),$s=t("li"),cs=t("a"),ia=r("Keybindings"),ca=c(),Us=t("li"),us=t("a"),ua=r("Using split window"),ka=c(),Fs=t("li"),ks=t("a"),fa=r("Adding icons"),da=c(),zs=t("li"),Ks=t("p"),fs=t("a"),ma=r("Conclusion"),ln=c(),N=t("h1"),ds=t("a"),ha=r("Introduction"),rn=c(),y=t("p"),ya=r("Hi everyone! This time I will talk about a (Neo)vim plugin called "),C=t("a"),wa=r("Defx"),_a=r(". I\u2019ve been looking for an alternative to "),S=t("a"),va=r("NERDTree"),ga=r(" for quite a while now. I came across this plugin from a telegram channel called \u201CVim Indonesia\u201D. Since I have no project that I\u2019m currently working on, why don\u2019t I give it a shot?"),cn=c(),H=t("h1"),ms=t("a"),xa=r("Installation"),un=c(),I=t("p"),Ea=r("The installation is pretty simple. You can add this plugin just like any other plugin from your plugin manager. I\u2019m using "),M=t("a"),ba=r("vim-plug"),Ia=r(" as my plugin manager. To add a plugin, I would simply add this into my plugin list."),kn=c(),O=t("pre"),fn=c(),w=t("p"),Ta=r("After doing that, I source my init.vim using "),Ws=t("code"),Pa=r(":so ~/.config/nvim/init.vim"),Da=r(" and then just run "),Bs=t("code"),Aa=r(":PlugInstall"),La=r(" to install it. Make sure your (Neo)vim supports Python 3."),dn=c(),Y=t("h1"),hs=t("a"),ja=r("Configuration"),mn=c(),q=t("h2"),ys=t("a"),Ra=r("Keybindings"),hn=c(),T=t("p"),Na=r("To toggle Defx, you\u2019d run "),Vs=t("code"),Ca=r(":Defx"),Sa=r(". To make it efficient, let\u2019s assign that to a keystroke. To do that, I add this into my config"),yn=c(),G=t("pre"),wn=c(),P=t("p"),Ha=r("Finally, we can just simply press "),Zs=t("code"),Ma=r("ctrl+n"),Oa=r(" to toggle it. Awesome!"),_n=c(),D=t("p"),Ya=r("You\u2019ll notice that by default it doesn\u2019t handle keypress to open a directory, open a file, add a file, etc like NERDTree. You have to add that by yourself. Thankfully, there is "),$=t("a"),qa=r("this blog"),Ga=r(" that helped me making those keybindings. What you need to do is to add this long lines of vimscript to your config file."),vn=c(),U=t("pre"),gn=c(),ws=t("p"),$a=r("As usual, don\u2019t get intimidated by the long block of code. It\u2019s just a bunch of keybinds. You can customize it however you want."),xn=c(),F=t("h2"),_s=t("a"),Ua=r("Using split window"),En=c(),vs=t("p"),Fa=r("As you can see, Defx looks way more plain than NERDTree. Let\u2019s change that! First thing first, we make it split instead of fullscreen and put it to the left of our screen. To do that, add this to your config."),bn=c(),z=t("pre"),In=c(),gs=t("p"),za=r("Let me quickly explain to you what does what."),Tn=c(),K=t("p"),Js=t("strong"),Ka=r("winwidth"),Wa=r(" : It\u2019s pretty straight forward. This field sets the minimum width for the Defx window width."),Pn=c(),W=t("p"),Qs=t("strong"),Ba=r("split"),Va=r(" : This field sets the mode of the split. You can fill this with horizontal or vertical. In our case, it\u2019s vertical."),Dn=c(),x=t("p"),Xs=t("strong"),Za=r("direction"),Ja=r(" : This field sets the position of the split. In our case, it\u2019s topleft which will make it split to the left. The other possible values are available through "),sn=t("code"),Qa=r(":h defx"),Xa=r("."),An=c(),B=t("p"),nn=t("strong"),st=r("show_ignored_files"),nt=r(" : This option will decide whether it will display the hidden files or not. In our case, it\u2019s not getting displayed."),Ln=c(),V=t("p"),an=t("strong"),at=r("buffer_name"),tt=r(" : Basically, it sets the buffer name for defx window."),jn=c(),Z=t("p"),tn=t("strong"),et=r("toggle"),ot=r(" : This field makes Defx window toggleable. I recommend you to fill this field with 1."),Rn=c(),J=t("p"),en=t("strong"),pt=r("resume"),lt=r(" : This field makes Defx resume-able. It saves the state of where your cursor is so you don\u2019t have to navigate from the root of your project directory again after you close Defx and open it again."),Nn=c(),xs=t("p"),rt=r("All right, let\u2019s see what we\u2019ve got so far."),Cn=c(),Es=t("p"),bs=t("img"),Sn=c(),Is=t("p"),it=r("It looks ok to me, but not quite yet. Let\u2019s take it even further by adding some icons to make it eye candy. This next step is optional. If you don\u2019t want any icon, you can skip it."),Hn=c(),Q=t("h2"),Ts=t("a"),ct=r("Adding icons"),Mn=c(),Ps=t("p"),ut=r("You know how file explorer in most text editor right? They have an icon that indicates whether it\u2019s a folder or a file. Let\u2019s replicate that in our case."),On=c(),A=t("p"),kt=r("I use a plugin called "),X=t("a"),ft=r("defx-icons"),dt=r(". As the name says, it will add some fancy icons to our file explorer. The installation is the same as Defx installation. Add this line to your config."),Yn=c(),ss=t("pre"),qn=c(),_=t("p"),mt=r("Make sure to source your new config and do "),on=t("code"),ht=r(":PlugInstall"),yt=r(" after that. Make sure your terminal is using a patched font which you can get from "),ns=t("a"),wt=r("here"),_t=r(" so the icons will be displayed correctly. The installation process is finished, let\u2019s configure it now! It\u2019s simple, just add this block of code into your config."),Gn=c(),as=t("pre"),$n=c(),Ds=t("p"),vt=r("As you can see, I added the columns field to the custom option function. It tells Defx to display the icons from our previous plugin. Now, I want to add those arrow symbol that indicates a directory. Let\u2019s add that to our config."),Un=c(),ts=t("pre"),Fn=c(),As=t("p"),gt=r("This block of code creates a new column for the arrow icon. Let\u2019s add that to our custom option function."),zn=c(),es=t("pre"),Kn=c(),Ls=t("p"),xt=r("There we have it, people. We just transformed Defx to look like most IDE/Text Editor file explorer. Let\u2019s compare it side by side."),Wn=c(),L=t("p"),js=t("img"),Et=c(),Rs=t("img"),Bn=c(),os=t("h1"),Ns=t("a"),bt=r("Conclusion"),Vn=c(),Cs=t("p"),It=r("I think Defx is a good alternative to NERDTree and is worth to try. Some people said that it\u2019s faster and lighter than NERDTree, but it\u2019s not that significant in my experience. Anyway, let\u2019s end this post here. If you get confused, feel free to hit me up! That\u2019s it, see ya next time :)"),this.h()},l(s){d=e(s,"H1",{id:!0});var o=p(d);m=e(o,"A",{href:!0});var Mt=p(m);v=i(Mt,"Table of Contents"),Mt.forEach(n),o.forEach(n),E=u(s),f=e(s,"UL",{});var j=p(f);h=e(j,"LI",{});var Ot=p(h);b=e(Ot,"P",{});var Yt=p(b);ls=e(Yt,"A",{href:!0});var qt=p(ls);ta=i(qt,"Introduction"),qt.forEach(n),Yt.forEach(n),Ot.forEach(n),ea=u(j),Ys=e(j,"LI",{});var Gt=p(Ys);qs=e(Gt,"P",{});var $t=p(qs);rs=e($t,"A",{href:!0});var Ut=p(rs);oa=i(Ut,"Installation"),Ut.forEach(n),$t.forEach(n),Gt.forEach(n),pa=u(j),R=e(j,"LI",{});var Zn=p(R);Gs=e(Zn,"P",{});var Ft=p(Gs);is=e(Ft,"A",{href:!0});var zt=p(is);la=i(zt,"Configuration"),zt.forEach(n),Ft.forEach(n),ra=u(Zn),g=e(Zn,"UL",{});var Ss=p(g);$s=e(Ss,"LI",{});var Kt=p($s);cs=e(Kt,"A",{href:!0});var Wt=p(cs);ia=i(Wt,"Keybindings"),Wt.forEach(n),Kt.forEach(n),ca=u(Ss),Us=e(Ss,"LI",{});var Bt=p(Us);us=e(Bt,"A",{href:!0});var Vt=p(us);ua=i(Vt,"Using split window"),Vt.forEach(n),Bt.forEach(n),ka=u(Ss),Fs=e(Ss,"LI",{});var Zt=p(Fs);ks=e(Zt,"A",{href:!0});var Jt=p(ks);fa=i(Jt,"Adding icons"),Jt.forEach(n),Zt.forEach(n),Ss.forEach(n),Zn.forEach(n),da=u(j),zs=e(j,"LI",{});var Qt=p(zs);Ks=e(Qt,"P",{});var Xt=p(Ks);fs=e(Xt,"A",{href:!0});var se=p(fs);ma=i(se,"Conclusion"),se.forEach(n),Xt.forEach(n),Qt.forEach(n),j.forEach(n),ln=u(s),N=e(s,"H1",{id:!0});var ne=p(N);ds=e(ne,"A",{href:!0});var ae=p(ds);ha=i(ae,"Introduction"),ae.forEach(n),ne.forEach(n),rn=u(s),y=e(s,"P",{});var Hs=p(y);ya=i(Hs,"Hi everyone! This time I will talk about a (Neo)vim plugin called "),C=e(Hs,"A",{href:!0,rel:!0});var te=p(C);wa=i(te,"Defx"),te.forEach(n),_a=i(Hs,". I\u2019ve been looking for an alternative to "),S=e(Hs,"A",{href:!0,rel:!0});var ee=p(S);va=i(ee,"NERDTree"),ee.forEach(n),ga=i(Hs," for quite a while now. I came across this plugin from a telegram channel called \u201CVim Indonesia\u201D. Since I have no project that I\u2019m currently working on, why don\u2019t I give it a shot?"),Hs.forEach(n),cn=u(s),H=e(s,"H1",{id:!0});var oe=p(H);ms=e(oe,"A",{href:!0});var pe=p(ms);xa=i(pe,"Installation"),pe.forEach(n),oe.forEach(n),un=u(s),I=e(s,"P",{});var Jn=p(I);Ea=i(Jn,"The installation is pretty simple. You can add this plugin just like any other plugin from your plugin manager. I\u2019m using "),M=e(Jn,"A",{href:!0,rel:!0});var le=p(M);ba=i(le,"vim-plug"),le.forEach(n),Ia=i(Jn," as my plugin manager. To add a plugin, I would simply add this into my plugin list."),Jn.forEach(n),kn=u(s),O=e(s,"PRE",{class:!0});var ao=p(O);ao.forEach(n),fn=u(s),w=e(s,"P",{});var Ms=p(w);Ta=i(Ms,"After doing that, I source my init.vim using "),Ws=e(Ms,"CODE",{});var re=p(Ws);Pa=i(re,":so ~/.config/nvim/init.vim"),re.forEach(n),Da=i(Ms," and then just run "),Bs=e(Ms,"CODE",{});var ie=p(Bs);Aa=i(ie,":PlugInstall"),ie.forEach(n),La=i(Ms," to install it. Make sure your (Neo)vim supports Python 3."),Ms.forEach(n),dn=u(s),Y=e(s,"H1",{id:!0});var ce=p(Y);hs=e(ce,"A",{href:!0});var ue=p(hs);ja=i(ue,"Configuration"),ue.forEach(n),ce.forEach(n),mn=u(s),q=e(s,"H2",{id:!0});var ke=p(q);ys=e(ke,"A",{href:!0});var fe=p(ys);Ra=i(fe,"Keybindings"),fe.forEach(n),ke.forEach(n),hn=u(s),T=e(s,"P",{});var Qn=p(T);Na=i(Qn,"To toggle Defx, you\u2019d run "),Vs=e(Qn,"CODE",{});var de=p(Vs);Ca=i(de,":Defx"),de.forEach(n),Sa=i(Qn,". To make it efficient, let\u2019s assign that to a keystroke. To do that, I add this into my config"),Qn.forEach(n),yn=u(s),G=e(s,"PRE",{class:!0});var to=p(G);to.forEach(n),wn=u(s),P=e(s,"P",{});var Xn=p(P);Ha=i(Xn,"Finally, we can just simply press "),Zs=e(Xn,"CODE",{});var me=p(Zs);Ma=i(me,"ctrl+n"),me.forEach(n),Oa=i(Xn," to toggle it. Awesome!"),Xn.forEach(n),_n=u(s),D=e(s,"P",{});var sa=p(D);Ya=i(sa,"You\u2019ll notice that by default it doesn\u2019t handle keypress to open a directory, open a file, add a file, etc like NERDTree. You have to add that by yourself. Thankfully, there is "),$=e(sa,"A",{href:!0,rel:!0});var he=p($);qa=i(he,"this blog"),he.forEach(n),Ga=i(sa," that helped me making those keybindings. What you need to do is to add this long lines of vimscript to your config file."),sa.forEach(n),vn=u(s),U=e(s,"PRE",{class:!0});var eo=p(U);eo.forEach(n),gn=u(s),ws=e(s,"P",{});var ye=p(ws);$a=i(ye,"As usual, don\u2019t get intimidated by the long block of code. It\u2019s just a bunch of keybinds. You can customize it however you want."),ye.forEach(n),xn=u(s),F=e(s,"H2",{id:!0});var we=p(F);_s=e(we,"A",{href:!0});var _e=p(_s);Ua=i(_e,"Using split window"),_e.forEach(n),we.forEach(n),En=u(s),vs=e(s,"P",{});var ve=p(vs);Fa=i(ve,"As you can see, Defx looks way more plain than NERDTree. Let\u2019s change that! First thing first, we make it split instead of fullscreen and put it to the left of our screen. To do that, add this to your config."),ve.forEach(n),bn=u(s),z=e(s,"PRE",{class:!0});var oo=p(z);oo.forEach(n),In=u(s),gs=e(s,"P",{});var ge=p(gs);za=i(ge,"Let me quickly explain to you what does what."),ge.forEach(n),Tn=u(s),K=e(s,"P",{});var Tt=p(K);Js=e(Tt,"STRONG",{});var xe=p(Js);Ka=i(xe,"winwidth"),xe.forEach(n),Wa=i(Tt," : It\u2019s pretty straight forward. This field sets the minimum width for the Defx window width."),Tt.forEach(n),Pn=u(s),W=e(s,"P",{});var Pt=p(W);Qs=e(Pt,"STRONG",{});var Ee=p(Qs);Ba=i(Ee,"split"),Ee.forEach(n),Va=i(Pt," : This field sets the mode of the split. You can fill this with horizontal or vertical. In our case, it\u2019s vertical."),Pt.forEach(n),Dn=u(s),x=e(s,"P",{});var pn=p(x);Xs=e(pn,"STRONG",{});var be=p(Xs);Za=i(be,"direction"),be.forEach(n),Ja=i(pn," : This field sets the position of the split. In our case, it\u2019s topleft which will make it split to the left. The other possible values are available through "),sn=e(pn,"CODE",{});var Ie=p(sn);Qa=i(Ie,":h defx"),Ie.forEach(n),Xa=i(pn,"."),pn.forEach(n),An=u(s),B=e(s,"P",{});var Dt=p(B);nn=e(Dt,"STRONG",{});var Te=p(nn);st=i(Te,"show_ignored_files"),Te.forEach(n),nt=i(Dt," : This option will decide whether it will display the hidden files or not. In our case, it\u2019s not getting displayed."),Dt.forEach(n),Ln=u(s),V=e(s,"P",{});var At=p(V);an=e(At,"STRONG",{});var Pe=p(an);at=i(Pe,"buffer_name"),Pe.forEach(n),tt=i(At," : Basically, it sets the buffer name for defx window."),At.forEach(n),jn=u(s),Z=e(s,"P",{});var Lt=p(Z);tn=e(Lt,"STRONG",{});var De=p(tn);et=i(De,"toggle"),De.forEach(n),ot=i(Lt," : This field makes Defx window toggleable. I recommend you to fill this field with 1."),Lt.forEach(n),Rn=u(s),J=e(s,"P",{});var jt=p(J);en=e(jt,"STRONG",{});var Ae=p(en);pt=i(Ae,"resume"),Ae.forEach(n),lt=i(jt," : This field makes Defx resume-able. It saves the state of where your cursor is so you don\u2019t have to navigate from the root of your project directory again after you close Defx and open it again."),jt.forEach(n),Nn=u(s),xs=e(s,"P",{});var Le=p(xs);rt=i(Le,"All right, let\u2019s see what we\u2019ve got so far."),Le.forEach(n),Cn=u(s),Es=e(s,"P",{});var je=p(Es);bs=e(je,"IMG",{src:!0,alt:!0}),je.forEach(n),Sn=u(s),Is=e(s,"P",{});var Re=p(Is);it=i(Re,"It looks ok to me, but not quite yet. Let\u2019s take it even further by adding some icons to make it eye candy. This next step is optional. If you don\u2019t want any icon, you can skip it."),Re.forEach(n),Hn=u(s),Q=e(s,"H2",{id:!0});var Ne=p(Q);Ts=e(Ne,"A",{href:!0});var Ce=p(Ts);ct=i(Ce,"Adding icons"),Ce.forEach(n),Ne.forEach(n),Mn=u(s),Ps=e(s,"P",{});var Se=p(Ps);ut=i(Se,"You know how file explorer in most text editor right? They have an icon that indicates whether it\u2019s a folder or a file. Let\u2019s replicate that in our case."),Se.forEach(n),On=u(s),A=e(s,"P",{});var na=p(A);kt=i(na,"I use a plugin called "),X=e(na,"A",{href:!0,rel:!0});var He=p(X);ft=i(He,"defx-icons"),He.forEach(n),dt=i(na,". As the name says, it will add some fancy icons to our file explorer. The installation is the same as Defx installation. Add this line to your config."),na.forEach(n),Yn=u(s),ss=e(s,"PRE",{class:!0});var po=p(ss);po.forEach(n),qn=u(s),_=e(s,"P",{});var Os=p(_);mt=i(Os,"Make sure to source your new config and do "),on=e(Os,"CODE",{});var Me=p(on);ht=i(Me,":PlugInstall"),Me.forEach(n),yt=i(Os," after that. Make sure your terminal is using a patched font which you can get from "),ns=e(Os,"A",{href:!0,rel:!0});var Oe=p(ns);wt=i(Oe,"here"),Oe.forEach(n),_t=i(Os," so the icons will be displayed correctly. The installation process is finished, let\u2019s configure it now! It\u2019s simple, just add this block of code into your config."),Os.forEach(n),Gn=u(s),as=e(s,"PRE",{class:!0});var lo=p(as);lo.forEach(n),$n=u(s),Ds=e(s,"P",{});var Ye=p(Ds);vt=i(Ye,"As you can see, I added the columns field to the custom option function. It tells Defx to display the icons from our previous plugin. Now, I want to add those arrow symbol that indicates a directory. Let\u2019s add that to our config."),Ye.forEach(n),Un=u(s),ts=e(s,"PRE",{class:!0});var ro=p(ts);ro.forEach(n),Fn=u(s),As=e(s,"P",{});var qe=p(As);gt=i(qe,"This block of code creates a new column for the arrow icon. Let\u2019s add that to our custom option function."),qe.forEach(n),zn=u(s),es=e(s,"PRE",{class:!0});var io=p(es);io.forEach(n),Kn=u(s),Ls=e(s,"P",{});var Ge=p(Ls);xt=i(Ge,"There we have it, people. We just transformed Defx to look like most IDE/Text Editor file explorer. Let\u2019s compare it side by side."),Ge.forEach(n),Wn=u(s),L=e(s,"P",{});var aa=p(L);js=e(aa,"IMG",{src:!0,alt:!0}),Et=u(aa),Rs=e(aa,"IMG",{src:!0,alt:!0}),aa.forEach(n),Bn=u(s),os=e(s,"H1",{id:!0});var $e=p(os);Ns=e($e,"A",{href:!0});var Ue=p(Ns);bt=i(Ue,"Conclusion"),Ue.forEach(n),$e.forEach(n),Vn=u(s),Cs=e(s,"P",{});var Fe=p(Cs);It=i(Fe,"I think Defx is a good alternative to NERDTree and is worth to try. Some people said that it\u2019s faster and lighter than NERDTree, but it\u2019s not that significant in my experience. Anyway, let\u2019s end this post here. If you get confused, feel free to hit me up! That\u2019s it, see ya next time :)"),Fe.forEach(n),this.h()},h(){k(m,"href","#table-of-contents"),k(d,"id","table-of-contents"),k(ls,"href","#introduction"),k(rs,"href","#installation"),k(is,"href","#configuration"),k(cs,"href","#keybindings"),k(us,"href","#using-split-window"),k(ks,"href","#adding-icons"),k(fs,"href","#conclusion"),k(ds,"href","#introduction"),k(N,"id","introduction"),k(C,"href","https://github.com/airblade/defx.nvim"),k(C,"rel","nofollow"),k(S,"href","https://github.com/preservim/nerdtree"),k(S,"rel","nofollow"),k(ms,"href","#installation"),k(H,"id","installation"),k(M,"href","https://github.com/junegunn/vim-plug"),k(M,"rel","nofollow"),k(O,"class","language-vim"),k(hs,"href","#configuration"),k(Y,"id","configuration"),k(ys,"href","#keybindings"),k(q,"id","keybindings"),k(G,"class","language-vim"),k($,"href","https://tsarafatma.com/neovim/2020/02/08/defx-file-explorer-for-neovim"),k($,"rel","nofollow"),k(U,"class","language-vim"),k(_s,"href","#using-split-window"),k(F,"id","using-split-window"),k(z,"class","language-vim"),Nt(bs.src,Ct="/assets/post/defx-nvim/preview.png")||k(bs,"src",Ct),k(bs,"alt","preview"),k(Ts,"href","#adding-icons"),k(Q,"id","adding-icons"),k(X,"href","https://github.com/kristijanhusak/defx-icons"),k(X,"rel","nofollow"),k(ss,"class","language-vim"),k(ns,"href","https://www.nerdfonts.com/font-downloads"),k(ns,"rel","nofollow"),k(as,"class","language-vim"),k(ts,"class","language-vim"),k(es,"class","language-vim"),Nt(js.src,St="/assets/post/defx-nvim/before.png")||k(js,"src",St),k(js,"alt","before"),Nt(Rs.src,Ht="/assets/post/defx-nvim/after.png")||k(Rs,"src",Ht),k(Rs,"alt","after"),k(Ns,"href","#conclusion"),k(os,"id","conclusion")},m(s,o){l(s,d,o),a(d,m),a(m,v),l(s,E,o),l(s,f,o),a(f,h),a(h,b),a(b,ls),a(ls,ta),a(f,ea),a(f,Ys),a(Ys,qs),a(qs,rs),a(rs,oa),a(f,pa),a(f,R),a(R,Gs),a(Gs,is),a(is,la),a(R,ra),a(R,g),a(g,$s),a($s,cs),a(cs,ia),a(g,ca),a(g,Us),a(Us,us),a(us,ua),a(g,ka),a(g,Fs),a(Fs,ks),a(ks,fa),a(f,da),a(f,zs),a(zs,Ks),a(Ks,fs),a(fs,ma),l(s,ln,o),l(s,N,o),a(N,ds),a(ds,ha),l(s,rn,o),l(s,y,o),a(y,ya),a(y,C),a(C,wa),a(y,_a),a(y,S),a(S,va),a(y,ga),l(s,cn,o),l(s,H,o),a(H,ms),a(ms,xa),l(s,un,o),l(s,I,o),a(I,Ea),a(I,M),a(M,ba),a(I,Ia),l(s,kn,o),l(s,O,o),O.innerHTML=Be,l(s,fn,o),l(s,w,o),a(w,Ta),a(w,Ws),a(Ws,Pa),a(w,Da),a(w,Bs),a(Bs,Aa),a(w,La),l(s,dn,o),l(s,Y,o),a(Y,hs),a(hs,ja),l(s,mn,o),l(s,q,o),a(q,ys),a(ys,Ra),l(s,hn,o),l(s,T,o),a(T,Na),a(T,Vs),a(Vs,Ca),a(T,Sa),l(s,yn,o),l(s,G,o),G.innerHTML=Ve,l(s,wn,o),l(s,P,o),a(P,Ha),a(P,Zs),a(Zs,Ma),a(P,Oa),l(s,_n,o),l(s,D,o),a(D,Ya),a(D,$),a($,qa),a(D,Ga),l(s,vn,o),l(s,U,o),U.innerHTML=Ze,l(s,gn,o),l(s,ws,o),a(ws,$a),l(s,xn,o),l(s,F,o),a(F,_s),a(_s,Ua),l(s,En,o),l(s,vs,o),a(vs,Fa),l(s,bn,o),l(s,z,o),z.innerHTML=Je,l(s,In,o),l(s,gs,o),a(gs,za),l(s,Tn,o),l(s,K,o),a(K,Js),a(Js,Ka),a(K,Wa),l(s,Pn,o),l(s,W,o),a(W,Qs),a(Qs,Ba),a(W,Va),l(s,Dn,o),l(s,x,o),a(x,Xs),a(Xs,Za),a(x,Ja),a(x,sn),a(sn,Qa),a(x,Xa),l(s,An,o),l(s,B,o),a(B,nn),a(nn,st),a(B,nt),l(s,Ln,o),l(s,V,o),a(V,an),a(an,at),a(V,tt),l(s,jn,o),l(s,Z,o),a(Z,tn),a(tn,et),a(Z,ot),l(s,Rn,o),l(s,J,o),a(J,en),a(en,pt),a(J,lt),l(s,Nn,o),l(s,xs,o),a(xs,rt),l(s,Cn,o),l(s,Es,o),a(Es,bs),l(s,Sn,o),l(s,Is,o),a(Is,it),l(s,Hn,o),l(s,Q,o),a(Q,Ts),a(Ts,ct),l(s,Mn,o),l(s,Ps,o),a(Ps,ut),l(s,On,o),l(s,A,o),a(A,kt),a(A,X),a(X,ft),a(A,dt),l(s,Yn,o),l(s,ss,o),ss.innerHTML=Qe,l(s,qn,o),l(s,_,o),a(_,mt),a(_,on),a(on,ht),a(_,yt),a(_,ns),a(ns,wt),a(_,_t),l(s,Gn,o),l(s,as,o),as.innerHTML=Xe,l(s,$n,o),l(s,Ds,o),a(Ds,vt),l(s,Un,o),l(s,ts,o),ts.innerHTML=so,l(s,Fn,o),l(s,As,o),a(As,gt),l(s,zn,o),l(s,es,o),es.innerHTML=no,l(s,Kn,o),l(s,Ls,o),a(Ls,xt),l(s,Wn,o),l(s,L,o),a(L,js),a(L,Et),a(L,Rs),l(s,Bn,o),l(s,os,o),a(os,Ns),a(Ns,bt),l(s,Vn,o),l(s,Cs,o),a(Cs,It)},p:go,d(s){s&&n(d),s&&n(E),s&&n(f),s&&n(ln),s&&n(N),s&&n(rn),s&&n(y),s&&n(cn),s&&n(H),s&&n(un),s&&n(I),s&&n(kn),s&&n(O),s&&n(fn),s&&n(w),s&&n(dn),s&&n(Y),s&&n(mn),s&&n(q),s&&n(hn),s&&n(T),s&&n(yn),s&&n(G),s&&n(wn),s&&n(P),s&&n(_n),s&&n(D),s&&n(vn),s&&n(U),s&&n(gn),s&&n(ws),s&&n(xn),s&&n(F),s&&n(En),s&&n(vs),s&&n(bn),s&&n(z),s&&n(In),s&&n(gs),s&&n(Tn),s&&n(K),s&&n(Pn),s&&n(W),s&&n(Dn),s&&n(x),s&&n(An),s&&n(B),s&&n(Ln),s&&n(V),s&&n(jn),s&&n(Z),s&&n(Rn),s&&n(J),s&&n(Nn),s&&n(xs),s&&n(Cn),s&&n(Es),s&&n(Sn),s&&n(Is),s&&n(Hn),s&&n(Q),s&&n(Mn),s&&n(Ps),s&&n(On),s&&n(A),s&&n(Yn),s&&n(ss),s&&n(qn),s&&n(_),s&&n(Gn),s&&n(as),s&&n($n),s&&n(Ds),s&&n(Un),s&&n(ts),s&&n(Fn),s&&n(As),s&&n(zn),s&&n(es),s&&n(Kn),s&&n(Ls),s&&n(Wn),s&&n(L),s&&n(Bn),s&&n(os),s&&n(Vn),s&&n(Cs)}}}function bo(ps){let d,m;const v=[ps[0],We];let E={$$slots:{default:[Eo]},$$scope:{ctx:ps}};for(let f=0;f<v.length;f+=1)E=Rt(E,v[f]);return d=new xo({props:E}),{c(){fo(d.$$.fragment)},l(f){mo(d.$$.fragment,f)},m(f,h){ho(d,f,h),m=!0},p(f,[h]){const b=h&1?yo(v,[h&1&&ze(f[0]),h&0&&ze(We)]):{};h&2&&(b.$$scope={dirty:h,ctx:f}),d.$set(b)},i(f){m||(wo(d.$$.fragment,f),m=!0)},o(f){_o(d.$$.fragment,f),m=!1},d(f){vo(d,f)}}}const We={draft:!1,title:"Defx, A Dark Powered File Explorer",date:"2020-02-22T00:00:00.000Z",desc:"Trying out yet another plugin for neovim called defx.nvim.",tags:["neovim"]};function Io(ps,d,m){return ps.$$set=v=>{m(0,d=Rt(Rt({},d),Ke(v)))},d=Ke(d),[d]}class Ro extends co{constructor(d){super();uo(this,d,Io,bo,ko,{})}}export{Ro as default,We as metadata};
