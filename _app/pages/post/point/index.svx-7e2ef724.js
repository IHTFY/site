import{S as Wn,i as Zn,s as Nn,C as tn,w as Dn,x as On,y as sa,z as na,A as Yn,q as aa,o as ta,B as pa,U as Kn,e as p,t as f,k as u,c as o,a as l,h as d,d as n,m as i,b as a,a1 as m,g as e,F as c,H as oa}from"../../../chunks/vendor-f73903c8.js";import{P as ea}from"../../../chunks/post-178ca962.js";import"../../../chunks/stores-2e642f94.js";import"../../../chunks/Progress-2d81d7be.js";/* empty css                                      */function ca(B){let r,g,v,_,k,y,j,L,Rs,ms,b,R,pn,zs,z,on,fs,I,J,Js,ds,F,Fs,_s,h,U,en,Us,X,cn,ys,Y,Xs,gs,K,M,Q,ln,vs,G,T,Ys,ws,V,Ks,bs,x,W,un,Qs,Z,rn,hs,A,N,Ts,xs,D,Vs,Es,w,O,kn,Ws,ss,mn,Zs,ns,fn,Ps,q,as,Ns,js,ts,Ds,Is,E,ps,dn,Os,os,_n,Ms,H,es,sn,Gs,P,cs,yn,nn,ls,gn,As,us,$,is,vn,qs,C,rs,an,Hs,S,Tn=`<code class="language-java"><span class="token class-name">PImage</span> bg<span class="token punctuation">;</span>
<span class="token class-name">String</span> img<span class="token punctuation">;</span>
<span class="token keyword">float</span> min<span class="token punctuation">;</span>
<span class="token keyword">float</span> max<span class="token punctuation">;</span>
<span class="token keyword">int</span> shape<span class="token punctuation">;</span>
<span class="token keyword">boolean</span> draw<span class="token punctuation">;</span>
<span class="token keyword">float</span> t <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>
<span class="token keyword">boolean</span> recording <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
<span class="token keyword">boolean</span> progressive <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
 
<span class="token keyword">void</span> <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token function">size</span><span class="token punctuation">(</span><span class="token number">1600</span><span class="token punctuation">,</span><span class="token number">900</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// source image resolution</span>
  img <span class="token operator">=</span> <span class="token string">"lake.png"</span><span class="token punctuation">;</span> <span class="token comment">// source image name</span>
  bg <span class="token operator">=</span> <span class="token function">loadImage</span><span class="token punctuation">(</span><span class="token string">"./images/"</span> <span class="token operator">+</span> img<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// source image directory</span>
  <span class="token function">imageMode</span><span class="token punctuation">(</span>CENTER<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">background</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  min <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// minimum shape size</span>
  max <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">;</span> <span class="token comment">// maximum shape size</span>
  shape <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">// 0 circle, 1 quad</span>
  draw <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token comment">// use mouse to color in</span>
  recording <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span> <span class="token comment">// output movie frames</span>
  progressive <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span> <span class="token comment">// simulated annealing</span>
<span class="token punctuation">&#125;</span>
 
<span class="token keyword">void</span> <span class="token function">draw</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>progressive<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    t <span class="token operator">+=</span> <span class="token number">20</span><span class="token punctuation">;</span>
    max <span class="token operator">=</span> <span class="token number">50000.</span><span class="token operator">/</span>t<span class="token punctuation">;</span>
    <span class="token function">println</span><span class="token punctuation">(</span><span class="token number">50000.</span><span class="token operator">/</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span><span class="token number">500</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>shape <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>draw<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token comment">// for hand drawing</span>
        <span class="token keyword">int</span> x <span class="token operator">=</span> mouseX<span class="token punctuation">;</span>
        <span class="token keyword">int</span> y <span class="token operator">=</span> mouseY<span class="token punctuation">;</span>
        <span class="token keyword">int</span> dx <span class="token operator">=</span> <span class="token function">abs</span><span class="token punctuation">(</span>x<span class="token operator">-</span>pmouseX<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> dy <span class="token operator">=</span> <span class="token function">abs</span><span class="token punctuation">(</span>y<span class="token operator">-</span>pmouseY<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">float</span> speed <span class="token operator">=</span> <span class="token function">sqrt</span><span class="token punctuation">(</span>dx<span class="token operator">*</span>dx<span class="token operator">+</span>dy<span class="token operator">*</span>dy<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">noStroke</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        color c <span class="token operator">=</span> bg<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">fill</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span><span class="token number">128</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">ellipse</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span><span class="token function">sqrt</span><span class="token punctuation">(</span>speed<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">sqrt</span><span class="token punctuation">(</span>speed<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">&#125;</span>
      <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token function">random</span><span class="token punctuation">(</span>bg<span class="token punctuation">.</span>width<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> y <span class="token operator">=</span><span class="token keyword">int</span><span class="token punctuation">(</span><span class="token function">random</span><span class="token punctuation">(</span>bg<span class="token punctuation">.</span>height<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        x <span class="token operator">-=</span> x<span class="token operator">%</span>min<span class="token punctuation">;</span>
        y <span class="token operator">-=</span> y<span class="token operator">%</span>min<span class="token punctuation">;</span>
        <span class="token keyword">int</span> r <span class="token operator">=</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token function">random</span><span class="token punctuation">(</span>max<span class="token operator">-</span>min<span class="token punctuation">)</span><span class="token operator">+</span>min<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">noStroke</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        color c <span class="token operator">=</span> bg<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">fill</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span><span class="token number">128</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">ellipse</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>r<span class="token punctuation">,</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>shape <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token function">random</span><span class="token punctuation">(</span>bg<span class="token punctuation">.</span>width<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">int</span> y <span class="token operator">=</span><span class="token keyword">int</span><span class="token punctuation">(</span><span class="token function">random</span><span class="token punctuation">(</span>bg<span class="token punctuation">.</span>height<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token function">noStroke</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      color c <span class="token operator">=</span> bg<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token function">fill</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span><span class="token number">128</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token function">quad</span><span class="token punctuation">(</span>x<span class="token operator">-</span><span class="token keyword">int</span><span class="token punctuation">(</span><span class="token function">random</span><span class="token punctuation">(</span>max<span class="token operator">-</span>min<span class="token punctuation">)</span><span class="token operator">+</span>min<span class="token punctuation">)</span><span class="token punctuation">,</span>y<span class="token operator">-</span><span class="token keyword">int</span><span class="token punctuation">(</span><span class="token function">random</span><span class="token punctuation">(</span>max<span class="token operator">-</span>min<span class="token punctuation">)</span><span class="token operator">+</span>min<span class="token punctuation">)</span><span class="token punctuation">,</span>x<span class="token operator">+</span><span class="token keyword">int</span><span class="token punctuation">(</span><span class="token function">random</span><span class="token punctuation">(</span>max<span class="token operator">-</span>min<span class="token punctuation">)</span><span class="token operator">+</span>min<span class="token punctuation">)</span><span class="token punctuation">,</span>y<span class="token operator">-</span><span class="token keyword">int</span><span class="token punctuation">(</span><span class="token function">random</span><span class="token punctuation">(</span>max<span class="token operator">-</span>min<span class="token punctuation">)</span><span class="token operator">+</span>min<span class="token punctuation">)</span><span class="token punctuation">,</span>x<span class="token operator">+</span><span class="token keyword">int</span><span class="token punctuation">(</span><span class="token function">random</span><span class="token punctuation">(</span>max<span class="token operator">-</span>min<span class="token punctuation">)</span><span class="token operator">+</span>min<span class="token punctuation">)</span><span class="token punctuation">,</span>y<span class="token operator">+</span><span class="token keyword">int</span><span class="token punctuation">(</span><span class="token function">random</span><span class="token punctuation">(</span>max<span class="token operator">-</span>min<span class="token punctuation">)</span><span class="token operator">+</span>min<span class="token punctuation">)</span><span class="token punctuation">,</span>x<span class="token operator">-</span><span class="token keyword">int</span><span class="token punctuation">(</span><span class="token function">random</span><span class="token punctuation">(</span>max<span class="token operator">-</span>min<span class="token punctuation">)</span><span class="token operator">+</span>min<span class="token punctuation">)</span><span class="token punctuation">,</span>y<span class="token operator">+</span><span class="token keyword">int</span><span class="token punctuation">(</span><span class="token function">random</span><span class="token punctuation">(</span>max<span class="token operator">-</span>min<span class="token punctuation">)</span><span class="token operator">+</span>min<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>recording<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token function">saveFrame</span><span class="token punctuation">(</span><span class="token string">"./images/movie/frames####.png"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// output frame</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
 
<span class="token keyword">void</span> <span class="token function">keyPressed</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>key <span class="token operator">==</span> <span class="token char">'r'</span> <span class="token operator">||</span> key <span class="token operator">==</span> <span class="token char">'R'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    recording <span class="token operator">=</span> <span class="token operator">!</span>recording<span class="token punctuation">;</span> <span class="token comment">// flag to save frames for animation</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>key <span class="token operator">==</span> <span class="token char">'p'</span> <span class="token operator">||</span> key <span class="token operator">==</span> <span class="token char">'P'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token function">saveFrame</span><span class="token punctuation">(</span><span class="token string">"./images/Capped-"</span> <span class="token operator">+</span> img<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// output image</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code>`;return{c(){r=p("p"),g=f("I made this in June of 2014. I was using processing (a java library) to make mosaic and pointillism style images from existing pictures."),v=u(),_=p("h3"),k=p("a"),y=f("Cloud"),j=u(),L=p("p"),Rs=f("Generated circles are semi-uniformly distributed (small deviations from initial lattice)"),ms=u(),b=p("p"),R=p("img"),zs=u(),z=p("img"),fs=u(),I=p("h3"),J=p("a"),Js=f("Lake"),ds=u(),F=p("p"),Fs=f("Using randomly placed circles of roughly equal diameter"),_s=u(),h=p("p"),U=p("img"),Us=u(),X=p("img"),ys=u(),Y=p("p"),Xs=f("Video showing shrinking polygons to reduce uncovered spots. I just realized this is the same concept of simulated annealing."),gs=u(),K=p("p"),M=p("a"),Q=p("img"),vs=u(),G=p("h3"),T=p("a"),Ys=f("Fruit"),ws=u(),V=p("p"),Ks=f("Randomly placed quadrilaterals"),bs=u(),x=p("p"),W=p("img"),Qs=u(),Z=p("img"),hs=u(),A=p("h3"),N=p("a"),Ts=f("Jaguar"),xs=u(),D=p("p"),Vs=f("Using small polygons and larger polygons"),Es=u(),w=p("p"),O=p("img"),Ws=u(),ss=p("img"),Zs=u(),ns=p("img"),Ps=u(),q=p("h3"),as=p("a"),Ns=f("Another Jaguar"),js=u(),ts=p("p"),Ds=f("Random circles"),Is=u(),E=p("p"),ps=p("img"),Os=u(),os=p("img"),Ms=u(),H=p("h3"),es=p("a"),sn=f("White and Pink"),Gs=u(),P=p("p"),cs=p("img"),nn=u(),ls=p("img"),As=u(),us=p("p"),$=p("a"),is=p("img"),qs=u(),C=p("h3"),rs=p("a"),an=f("Source:"),Hs=u(),S=p("pre"),this.h()},l(s){r=o(s,"P",{});var t=l(r);g=d(t,"I made this in June of 2014. I was using processing (a java library) to make mosaic and pointillism style images from existing pictures."),t.forEach(n),v=i(s),_=o(s,"H3",{id:!0});var wn=l(_);k=o(wn,"A",{href:!0});var bn=l(k);y=d(bn,"Cloud"),bn.forEach(n),wn.forEach(n),j=i(s),L=o(s,"P",{});var hn=l(L);Rs=d(hn,"Generated circles are semi-uniformly distributed (small deviations from initial lattice)"),hn.forEach(n),ms=i(s),b=o(s,"P",{});var $s=l(b);R=o($s,"IMG",{src:!0,alt:!0}),zs=i($s),z=o($s,"IMG",{src:!0,alt:!0}),$s.forEach(n),fs=i(s),I=o(s,"H3",{id:!0});var xn=l(I);J=o(xn,"A",{href:!0});var En=l(J);Js=d(En,"Lake"),En.forEach(n),xn.forEach(n),ds=i(s),F=o(s,"P",{});var Pn=l(F);Fs=d(Pn,"Using randomly placed circles of roughly equal diameter"),Pn.forEach(n),_s=i(s),h=o(s,"P",{});var Cs=l(h);U=o(Cs,"IMG",{src:!0,alt:!0}),Us=i(Cs),X=o(Cs,"IMG",{src:!0,alt:!0}),Cs.forEach(n),ys=i(s),Y=o(s,"P",{});var jn=l(Y);Xs=d(jn,"Video showing shrinking polygons to reduce uncovered spots. I just realized this is the same concept of simulated annealing."),jn.forEach(n),gs=i(s),K=o(s,"P",{});var In=l(K);M=o(In,"A",{href:!0,rel:!0});var Mn=l(M);Q=o(Mn,"IMG",{src:!0,alt:!0}),Mn.forEach(n),In.forEach(n),vs=i(s),G=o(s,"H3",{id:!0});var Gn=l(G);T=o(Gn,"A",{href:!0});var An=l(T);Ys=d(An,"Fruit"),An.forEach(n),Gn.forEach(n),ws=i(s),V=o(s,"P",{});var qn=l(V);Ks=d(qn,"Randomly placed quadrilaterals"),qn.forEach(n),bs=i(s),x=o(s,"P",{});var Ss=l(x);W=o(Ss,"IMG",{src:!0,alt:!0}),Qs=i(Ss),Z=o(Ss,"IMG",{src:!0,alt:!0}),Ss.forEach(n),hs=i(s),A=o(s,"H3",{id:!0});var Hn=l(A);N=o(Hn,"A",{href:!0});var $n=l(N);Ts=d($n,"Jaguar"),$n.forEach(n),Hn.forEach(n),xs=i(s),D=o(s,"P",{});var Cn=l(D);Vs=d(Cn,"Using small polygons and larger polygons"),Cn.forEach(n),Es=i(s),w=o(s,"P",{});var ks=l(w);O=o(ks,"IMG",{src:!0,alt:!0}),Ws=i(ks),ss=o(ks,"IMG",{src:!0,alt:!0}),Zs=i(ks),ns=o(ks,"IMG",{src:!0,alt:!0}),ks.forEach(n),Ps=i(s),q=o(s,"H3",{id:!0});var Sn=l(q);as=o(Sn,"A",{href:!0});var Bn=l(as);Ns=d(Bn,"Another Jaguar"),Bn.forEach(n),Sn.forEach(n),js=i(s),ts=o(s,"P",{});var Ln=l(ts);Ds=d(Ln,"Random circles"),Ln.forEach(n),Is=i(s),E=o(s,"P",{});var Bs=l(E);ps=o(Bs,"IMG",{src:!0,alt:!0}),Os=i(Bs),os=o(Bs,"IMG",{src:!0,alt:!0}),Bs.forEach(n),Ms=i(s),H=o(s,"H3",{id:!0});var Rn=l(H);es=o(Rn,"A",{href:!0});var zn=l(es);sn=d(zn,"White and Pink"),zn.forEach(n),Rn.forEach(n),Gs=i(s),P=o(s,"P",{});var Ls=l(P);cs=o(Ls,"IMG",{src:!0,alt:!0}),nn=i(Ls),ls=o(Ls,"IMG",{src:!0,alt:!0}),Ls.forEach(n),As=i(s),us=o(s,"P",{});var Jn=l(us);$=o(Jn,"A",{href:!0,rel:!0});var Fn=l($);is=o(Fn,"IMG",{src:!0,alt:!0}),Fn.forEach(n),Jn.forEach(n),qs=i(s),C=o(s,"H3",{id:!0});var Un=l(C);rs=o(Un,"A",{href:!0});var Xn=l(rs);an=d(Xn,"Source:"),Xn.forEach(n),Un.forEach(n),Hs=i(s),S=o(s,"PRE",{class:!0});var Vn=l(S);Vn.forEach(n),this.h()},h(){a(k,"href","#cloud"),a(_,"id","cloud"),m(R.src,pn="/assets/post/point/cloud.png")||a(R,"src",pn),a(R,"alt","cloud"),m(z.src,on="/assets/post/point/capped-cloud.png")||a(z,"src",on),a(z,"alt","capped-cloud"),a(J,"href","#lake"),a(I,"id","lake"),m(U.src,en="/assets/post/point/lake.png")||a(U,"src",en),a(U,"alt","lake"),m(X.src,cn="/assets/post/point/capped-lake.png")||a(X,"src",cn),a(X,"alt","capped-lake"),m(Q.src,ln="http://i3.ytimg.com/vi/st9v2upmL70/maxresdefault.jpg")||a(Q,"src",ln),a(Q,"alt","Annealed Mosaic - Breaking Bad"),a(M,"href","https://youtu.be/st9v2upmL70"),a(M,"rel","nofollow"),a(T,"href","#fruit"),a(G,"id","fruit"),m(W.src,un="/assets/post/point/banana.jpg")||a(W,"src",un),a(W,"alt","banana"),m(Z.src,rn="/assets/post/point/capped-banana.jpg")||a(Z,"src",rn),a(Z,"alt","capped-banana"),a(N,"href","#jaguar"),a(A,"id","jaguar"),m(O.src,kn="/assets/post/point/leo.jpg")||a(O,"src",kn),a(O,"alt","leo"),m(ss.src,mn="/assets/post/point/capped-leo1.jpg")||a(ss,"src",mn),a(ss,"alt","capped-leo1"),m(ns.src,fn="/assets/post/point/capped-leo2.jpg")||a(ns,"src",fn),a(ns,"alt","capped-leo2"),a(as,"href","#another-jaguar"),a(q,"id","another-jaguar"),m(ps.src,dn="/assets/post/point/cheetah.png")||a(ps,"src",dn),a(ps,"alt","cheetah"),m(os.src,_n="/assets/post/point/capped-cheetah.png")||a(os,"src",_n),a(os,"alt","capped-cheetah"),a(es,"href","#white-and-pink"),a(H,"id","white-and-pink"),m(cs.src,yn="/assets/post/point/bb.jpg")||a(cs,"src",yn),a(cs,"alt","bb"),m(ls.src,gn="/assets/post/point/capped-bb.jpg")||a(ls,"src",gn),a(ls,"alt","capped-bb"),m(is.src,vn="http://i3.ytimg.com/vi/BCXYKs8LsZQ/maxresdefault.jpg")||a(is,"src",vn),a(is,"alt","Annealed Mosaic - Breaking Bad"),a($,"href","https://youtu.be/BCXYKs8LsZQ"),a($,"rel","nofollow"),a(rs,"href","#source"),a(C,"id","source"),a(S,"class","language-java")},m(s,t){e(s,r,t),c(r,g),e(s,v,t),e(s,_,t),c(_,k),c(k,y),e(s,j,t),e(s,L,t),c(L,Rs),e(s,ms,t),e(s,b,t),c(b,R),c(b,zs),c(b,z),e(s,fs,t),e(s,I,t),c(I,J),c(J,Js),e(s,ds,t),e(s,F,t),c(F,Fs),e(s,_s,t),e(s,h,t),c(h,U),c(h,Us),c(h,X),e(s,ys,t),e(s,Y,t),c(Y,Xs),e(s,gs,t),e(s,K,t),c(K,M),c(M,Q),e(s,vs,t),e(s,G,t),c(G,T),c(T,Ys),e(s,ws,t),e(s,V,t),c(V,Ks),e(s,bs,t),e(s,x,t),c(x,W),c(x,Qs),c(x,Z),e(s,hs,t),e(s,A,t),c(A,N),c(N,Ts),e(s,xs,t),e(s,D,t),c(D,Vs),e(s,Es,t),e(s,w,t),c(w,O),c(w,Ws),c(w,ss),c(w,Zs),c(w,ns),e(s,Ps,t),e(s,q,t),c(q,as),c(as,Ns),e(s,js,t),e(s,ts,t),c(ts,Ds),e(s,Is,t),e(s,E,t),c(E,ps),c(E,Os),c(E,os),e(s,Ms,t),e(s,H,t),c(H,es),c(es,sn),e(s,Gs,t),e(s,P,t),c(P,cs),c(P,nn),c(P,ls),e(s,As,t),e(s,us,t),c(us,$),c($,is),e(s,qs,t),e(s,C,t),c(C,rs),c(rs,an),e(s,Hs,t),e(s,S,t),S.innerHTML=Tn},p:oa,d(s){s&&n(r),s&&n(v),s&&n(_),s&&n(j),s&&n(L),s&&n(ms),s&&n(b),s&&n(fs),s&&n(I),s&&n(ds),s&&n(F),s&&n(_s),s&&n(h),s&&n(ys),s&&n(Y),s&&n(gs),s&&n(K),s&&n(vs),s&&n(G),s&&n(ws),s&&n(V),s&&n(bs),s&&n(x),s&&n(hs),s&&n(A),s&&n(xs),s&&n(D),s&&n(Es),s&&n(w),s&&n(Ps),s&&n(q),s&&n(js),s&&n(ts),s&&n(Is),s&&n(E),s&&n(Ms),s&&n(H),s&&n(Gs),s&&n(P),s&&n(As),s&&n(us),s&&n(qs),s&&n(C),s&&n(Hs),s&&n(S)}}}function la(B){let r,g;const v=[B[0],Qn];let _={$$slots:{default:[ca]},$$scope:{ctx:B}};for(let k=0;k<v.length;k+=1)_=tn(_,v[k]);return r=new ea({props:_}),{c(){Dn(r.$$.fragment)},l(k){On(r.$$.fragment,k)},m(k,y){sa(r,k,y),g=!0},p(k,[y]){const j=y&1?na(v,[y&1&&Yn(k[0]),y&0&&Yn(Qn)]):{};y&2&&(j.$$scope={dirty:y,ctx:k}),r.$set(j)},i(k){g||(aa(r.$$.fragment,k),g=!0)},o(k){ta(r.$$.fragment,k),g=!1},d(k){pa(r,k)}}}const Qn={draft:!1,title:"point",date:"2016-01-07",coverImage:"points2000x1500.png",desc:"Gernerative art using Processing",tags:["coding","art","math"]};function ua(B,r,g){return B.$$set=v=>{g(0,r=tn(tn({},r),Kn(v)))},r=Kn(r),[r]}class da extends Wn{constructor(r){super();Zn(this,r,ua,la,Nn,{})}}export{da as default,Qn as metadata};
