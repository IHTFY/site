import{S as sa,i as na,s as aa,C as on,w as Tn,x as Kn,y as Qn,z as ta,A as Vn,q as Wn,o as Zn,B as Nn,T as Dn,e as p,t as _,k as i,c as o,a as l,h as y,d as n,m as r,b as t,a1 as d,g as e,J as c,G as pa}from"../../../chunks/vendor-4e826582.js";import{P as oa}from"../../../chunks/post-f0963b8b.js";import{C as ea}from"../../../chunks/CodeBlock-7a3c3e1d.js";import"../../../chunks/stores-6bae2da7.js";import"../../../chunks/Progress-83a8291b.js";/* empty css                                      */function ca(w){let u,g=`<code class="language-java"><span class="token class-name">PImage</span> bg<span class="token punctuation">;</span>
<span class="token class-name">String</span> img<span class="token punctuation">;</span>
<span class="token keyword">float</span> min<span class="token punctuation">;</span>
<span class="token keyword">float</span> max<span class="token punctuation">;</span>
<span class="token keyword">int</span> shape<span class="token punctuation">;</span>
<span class="token keyword">boolean</span> draw<span class="token punctuation">;</span>
<span class="token keyword">float</span> t <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>
<span class="token keyword">boolean</span> recording <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
<span class="token keyword">boolean</span> progressive <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
 
<span class="token keyword">void</span> <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token function">size</span><span class="token punctuation">(</span><span class="token number">1600</span><span class="token punctuation">,</span><span class="token number">900</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// source image resolution</span>
  img <span class="token operator">=</span> <span class="token string">"lake.png"</span><span class="token punctuation">;</span> <span class="token comment">// source image name</span>
  bg <span class="token operator">=</span> <span class="token function">loadImage</span><span class="token punctuation">(</span><span class="token string">"./images/"</span> <span class="token operator">+</span> img<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// source image directory</span>
  <span class="token function">imageMode</span><span class="token punctuation">(</span>CENTER<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">background</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  min <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// minimum shape size</span>
  max <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">;</span> <span class="token comment">// maximum shape size</span>
  shape <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">// 0 circle, 1 quad</span>
  draw <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token comment">// use mouse to color in</span>
  recording <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span> <span class="token comment">// output movie frames</span>
  progressive <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span> <span class="token comment">// simulated annealing</span>
<span class="token punctuation">&#125;</span>
 
<span class="token keyword">void</span> <span class="token function">draw</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>progressive<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    t <span class="token operator">+=</span> <span class="token number">20</span><span class="token punctuation">;</span>
    max <span class="token operator">=</span> <span class="token number">50000.</span><span class="token operator">/</span>t<span class="token punctuation">;</span>
    <span class="token function">println</span><span class="token punctuation">(</span><span class="token number">50000.</span><span class="token operator">/</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span><span class="token number">500</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>shape <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>draw<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token comment">// for hand drawing</span>
        <span class="token keyword">int</span> x <span class="token operator">=</span> mouseX<span class="token punctuation">;</span>
        <span class="token keyword">int</span> y <span class="token operator">=</span> mouseY<span class="token punctuation">;</span>
        <span class="token keyword">int</span> dx <span class="token operator">=</span> <span class="token function">abs</span><span class="token punctuation">(</span>x<span class="token operator">-</span>pmouseX<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> dy <span class="token operator">=</span> <span class="token function">abs</span><span class="token punctuation">(</span>y<span class="token operator">-</span>pmouseY<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">float</span> speed <span class="token operator">=</span> <span class="token function">sqrt</span><span class="token punctuation">(</span>dx<span class="token operator">*</span>dx<span class="token operator">+</span>dy<span class="token operator">*</span>dy<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">noStroke</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        color c <span class="token operator">=</span> bg<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">fill</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span><span class="token number">128</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">ellipse</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span><span class="token function">sqrt</span><span class="token punctuation">(</span>speed<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">sqrt</span><span class="token punctuation">(</span>speed<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">&#125;</span>
      <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token function">random</span><span class="token punctuation">(</span>bg<span class="token punctuation">.</span>width<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> y <span class="token operator">=</span><span class="token keyword">int</span><span class="token punctuation">(</span><span class="token function">random</span><span class="token punctuation">(</span>bg<span class="token punctuation">.</span>height<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        x <span class="token operator">-=</span> x<span class="token operator">%</span>min<span class="token punctuation">;</span>
        y <span class="token operator">-=</span> y<span class="token operator">%</span>min<span class="token punctuation">;</span>
        <span class="token keyword">int</span> r <span class="token operator">=</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token function">random</span><span class="token punctuation">(</span>max<span class="token operator">-</span>min<span class="token punctuation">)</span><span class="token operator">+</span>min<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">noStroke</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        color c <span class="token operator">=</span> bg<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">fill</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span><span class="token number">128</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">ellipse</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>r<span class="token punctuation">,</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>shape <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token function">random</span><span class="token punctuation">(</span>bg<span class="token punctuation">.</span>width<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">int</span> y <span class="token operator">=</span><span class="token keyword">int</span><span class="token punctuation">(</span><span class="token function">random</span><span class="token punctuation">(</span>bg<span class="token punctuation">.</span>height<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token function">noStroke</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      color c <span class="token operator">=</span> bg<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token function">fill</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span><span class="token number">128</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token function">quad</span><span class="token punctuation">(</span>x<span class="token operator">-</span><span class="token keyword">int</span><span class="token punctuation">(</span><span class="token function">random</span><span class="token punctuation">(</span>max<span class="token operator">-</span>min<span class="token punctuation">)</span><span class="token operator">+</span>min<span class="token punctuation">)</span><span class="token punctuation">,</span>y<span class="token operator">-</span><span class="token keyword">int</span><span class="token punctuation">(</span><span class="token function">random</span><span class="token punctuation">(</span>max<span class="token operator">-</span>min<span class="token punctuation">)</span><span class="token operator">+</span>min<span class="token punctuation">)</span><span class="token punctuation">,</span>x<span class="token operator">+</span><span class="token keyword">int</span><span class="token punctuation">(</span><span class="token function">random</span><span class="token punctuation">(</span>max<span class="token operator">-</span>min<span class="token punctuation">)</span><span class="token operator">+</span>min<span class="token punctuation">)</span><span class="token punctuation">,</span>y<span class="token operator">-</span><span class="token keyword">int</span><span class="token punctuation">(</span><span class="token function">random</span><span class="token punctuation">(</span>max<span class="token operator">-</span>min<span class="token punctuation">)</span><span class="token operator">+</span>min<span class="token punctuation">)</span><span class="token punctuation">,</span>x<span class="token operator">+</span><span class="token keyword">int</span><span class="token punctuation">(</span><span class="token function">random</span><span class="token punctuation">(</span>max<span class="token operator">-</span>min<span class="token punctuation">)</span><span class="token operator">+</span>min<span class="token punctuation">)</span><span class="token punctuation">,</span>y<span class="token operator">+</span><span class="token keyword">int</span><span class="token punctuation">(</span><span class="token function">random</span><span class="token punctuation">(</span>max<span class="token operator">-</span>min<span class="token punctuation">)</span><span class="token operator">+</span>min<span class="token punctuation">)</span><span class="token punctuation">,</span>x<span class="token operator">-</span><span class="token keyword">int</span><span class="token punctuation">(</span><span class="token function">random</span><span class="token punctuation">(</span>max<span class="token operator">-</span>min<span class="token punctuation">)</span><span class="token operator">+</span>min<span class="token punctuation">)</span><span class="token punctuation">,</span>y<span class="token operator">+</span><span class="token keyword">int</span><span class="token punctuation">(</span><span class="token function">random</span><span class="token punctuation">(</span>max<span class="token operator">-</span>min<span class="token punctuation">)</span><span class="token operator">+</span>min<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>recording<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token function">saveFrame</span><span class="token punctuation">(</span><span class="token string">"./images/movie/frames####.png"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// output frame</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
 
<span class="token keyword">void</span> <span class="token function">keyPressed</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>key <span class="token operator">==</span> <span class="token char">'r'</span> <span class="token operator">||</span> key <span class="token operator">==</span> <span class="token char">'R'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    recording <span class="token operator">=</span> <span class="token operator">!</span>recording<span class="token punctuation">;</span> <span class="token comment">// flag to save frames for animation</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>key <span class="token operator">==</span> <span class="token char">'p'</span> <span class="token operator">||</span> key <span class="token operator">==</span> <span class="token char">'P'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token function">saveFrame</span><span class="token punctuation">(</span><span class="token string">"./images/Capped-"</span> <span class="token operator">+</span> img<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// output image</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code>`;return{c(){u=p("pre"),this.h()},l(m){u=o(m,"PRE",{class:!0});var f=l(u);f.forEach(n),this.h()},h(){t(u,"class","language-java")},m(m,f){e(m,u,f),u.innerHTML=g},p:pa,d(m){m&&n(u)}}}function la(w){let u,g,m,f,k,v,$,J,zs,fs,h,L,en,Fs,R,cn,ds,G,z,Us,_s,F,Xs,ys,x,U,ln,Ys,X,un,gs,Y,Ts,vs,T,M,K,rn,bs,A,Q,Ks,ws,V,Qs,hs,E,W,kn,Vs,Z,mn,xs,q,N,Ws,Es,D,Zs,js,b,O,fn,Ns,ss,dn,Ds,ns,_n,Ps,C,as,Os,Is,ts,sn,$s,j,ps,yn,nn,os,gn,Gs,B,es,an,Ms,P,cs,vn,tn,ls,bn,As,us,H,is,wn,qs,S,rs,pn,Cs,I,Bs;return I=new ea({props:{filename:"points.pde",lang:"processing",$$slots:{default:[ca]},$$scope:{ctx:w}}}),{c(){u=p("p"),g=_("I made this in June of 2014. I was using processing (a java library) to make mosaic and pointillism style images from existing pictures."),m=i(),f=p("h3"),k=p("a"),v=_("Cloud"),$=i(),J=p("p"),zs=_("Generated circles are semi-uniformly distributed (small deviations from initial lattice)"),fs=i(),h=p("p"),L=p("img"),Fs=i(),R=p("img"),ds=i(),G=p("h3"),z=p("a"),Us=_("Lake"),_s=i(),F=p("p"),Xs=_("Using randomly placed circles of roughly equal diameter"),ys=i(),x=p("p"),U=p("img"),Ys=i(),X=p("img"),gs=i(),Y=p("p"),Ts=_("Video showing shrinking polygons to reduce uncovered spots. I just realized this is the same concept of simulated annealing."),vs=i(),T=p("p"),M=p("a"),K=p("img"),bs=i(),A=p("h3"),Q=p("a"),Ks=_("Fruit"),ws=i(),V=p("p"),Qs=_("Randomly placed quadrilaterals"),hs=i(),E=p("p"),W=p("img"),Vs=i(),Z=p("img"),xs=i(),q=p("h3"),N=p("a"),Ws=_("Jaguar"),Es=i(),D=p("p"),Zs=_("Using small polygons and larger polygons"),js=i(),b=p("p"),O=p("img"),Ns=i(),ss=p("img"),Ds=i(),ns=p("img"),Ps=i(),C=p("h3"),as=p("a"),Os=_("Another Jaguar"),Is=i(),ts=p("p"),sn=_("Random circles"),$s=i(),j=p("p"),ps=p("img"),nn=i(),os=p("img"),Gs=i(),B=p("h3"),es=p("a"),an=_("White and Pink"),Ms=i(),P=p("p"),cs=p("img"),tn=i(),ls=p("img"),As=i(),us=p("p"),H=p("a"),is=p("img"),qs=i(),S=p("h3"),rs=p("a"),pn=_("Source:"),Cs=i(),Tn(I.$$.fragment),this.h()},l(s){u=o(s,"P",{});var a=l(u);g=y(a,"I made this in June of 2014. I was using processing (a java library) to make mosaic and pointillism style images from existing pictures."),a.forEach(n),m=r(s),f=o(s,"H3",{id:!0});var ms=l(f);k=o(ms,"A",{href:!0});var hn=l(k);v=y(hn,"Cloud"),hn.forEach(n),ms.forEach(n),$=r(s),J=o(s,"P",{});var xn=l(J);zs=y(xn,"Generated circles are semi-uniformly distributed (small deviations from initial lattice)"),xn.forEach(n),fs=r(s),h=o(s,"P",{});var Hs=l(h);L=o(Hs,"IMG",{src:!0,alt:!0}),Fs=r(Hs),R=o(Hs,"IMG",{src:!0,alt:!0}),Hs.forEach(n),ds=r(s),G=o(s,"H3",{id:!0});var En=l(G);z=o(En,"A",{href:!0});var jn=l(z);Us=y(jn,"Lake"),jn.forEach(n),En.forEach(n),_s=r(s),F=o(s,"P",{});var Pn=l(F);Xs=y(Pn,"Using randomly placed circles of roughly equal diameter"),Pn.forEach(n),ys=r(s),x=o(s,"P",{});var Ss=l(x);U=o(Ss,"IMG",{src:!0,alt:!0}),Ys=r(Ss),X=o(Ss,"IMG",{src:!0,alt:!0}),Ss.forEach(n),gs=r(s),Y=o(s,"P",{});var In=l(Y);Ts=y(In,"Video showing shrinking polygons to reduce uncovered spots. I just realized this is the same concept of simulated annealing."),In.forEach(n),vs=r(s),T=o(s,"P",{});var $n=l(T);M=o($n,"A",{href:!0,rel:!0});var Gn=l(M);K=o(Gn,"IMG",{src:!0,alt:!0}),Gn.forEach(n),$n.forEach(n),bs=r(s),A=o(s,"H3",{id:!0});var Mn=l(A);Q=o(Mn,"A",{href:!0});var An=l(Q);Ks=y(An,"Fruit"),An.forEach(n),Mn.forEach(n),ws=r(s),V=o(s,"P",{});var qn=l(V);Qs=y(qn,"Randomly placed quadrilaterals"),qn.forEach(n),hs=r(s),E=o(s,"P",{});var Js=l(E);W=o(Js,"IMG",{src:!0,alt:!0}),Vs=r(Js),Z=o(Js,"IMG",{src:!0,alt:!0}),Js.forEach(n),xs=r(s),q=o(s,"H3",{id:!0});var Cn=l(q);N=o(Cn,"A",{href:!0});var Bn=l(N);Ws=y(Bn,"Jaguar"),Bn.forEach(n),Cn.forEach(n),Es=r(s),D=o(s,"P",{});var Hn=l(D);Zs=y(Hn,"Using small polygons and larger polygons"),Hn.forEach(n),js=r(s),b=o(s,"P",{});var ks=l(b);O=o(ks,"IMG",{src:!0,alt:!0}),Ns=r(ks),ss=o(ks,"IMG",{src:!0,alt:!0}),Ds=r(ks),ns=o(ks,"IMG",{src:!0,alt:!0}),ks.forEach(n),Ps=r(s),C=o(s,"H3",{id:!0});var Sn=l(C);as=o(Sn,"A",{href:!0});var Jn=l(as);Os=y(Jn,"Another Jaguar"),Jn.forEach(n),Sn.forEach(n),Is=r(s),ts=o(s,"P",{});var Ln=l(ts);sn=y(Ln,"Random circles"),Ln.forEach(n),$s=r(s),j=o(s,"P",{});var Ls=l(j);ps=o(Ls,"IMG",{src:!0,alt:!0}),nn=r(Ls),os=o(Ls,"IMG",{src:!0,alt:!0}),Ls.forEach(n),Gs=r(s),B=o(s,"H3",{id:!0});var Rn=l(B);es=o(Rn,"A",{href:!0});var zn=l(es);an=y(zn,"White and Pink"),zn.forEach(n),Rn.forEach(n),Ms=r(s),P=o(s,"P",{});var Rs=l(P);cs=o(Rs,"IMG",{src:!0,alt:!0}),tn=r(Rs),ls=o(Rs,"IMG",{src:!0,alt:!0}),Rs.forEach(n),As=r(s),us=o(s,"P",{});var Fn=l(us);H=o(Fn,"A",{href:!0,rel:!0});var Un=l(H);is=o(Un,"IMG",{src:!0,alt:!0}),Un.forEach(n),Fn.forEach(n),qs=r(s),S=o(s,"H3",{id:!0});var Xn=l(S);rs=o(Xn,"A",{href:!0});var Yn=l(rs);pn=y(Yn,"Source:"),Yn.forEach(n),Xn.forEach(n),Cs=r(s),Kn(I.$$.fragment,s),this.h()},h(){t(k,"href","#cloud"),t(f,"id","cloud"),d(L.src,en="/assets/post/point/cloud.png")||t(L,"src",en),t(L,"alt","cloud"),d(R.src,cn="/assets/post/point/capped-cloud.png")||t(R,"src",cn),t(R,"alt","capped-cloud"),t(z,"href","#lake"),t(G,"id","lake"),d(U.src,ln="/assets/post/point/lake.png")||t(U,"src",ln),t(U,"alt","lake"),d(X.src,un="/assets/post/point/capped-lake.png")||t(X,"src",un),t(X,"alt","capped-lake"),d(K.src,rn="http://i3.ytimg.com/vi/st9v2upmL70/maxresdefault.jpg")||t(K,"src",rn),t(K,"alt","Annealed Mosaic - Breaking Bad"),t(M,"href","https://youtu.be/st9v2upmL70"),t(M,"rel","nofollow"),t(Q,"href","#fruit"),t(A,"id","fruit"),d(W.src,kn="/assets/post/point/banana.jpg")||t(W,"src",kn),t(W,"alt","banana"),d(Z.src,mn="/assets/post/point/capped-banana.jpg")||t(Z,"src",mn),t(Z,"alt","capped-banana"),t(N,"href","#jaguar"),t(q,"id","jaguar"),d(O.src,fn="/assets/post/point/leo.jpg")||t(O,"src",fn),t(O,"alt","leo"),d(ss.src,dn="/assets/post/point/capped-leo1.jpg")||t(ss,"src",dn),t(ss,"alt","capped-leo1"),d(ns.src,_n="/assets/post/point/capped-leo2.jpg")||t(ns,"src",_n),t(ns,"alt","capped-leo2"),t(as,"href","#another-jaguar"),t(C,"id","another-jaguar"),d(ps.src,yn="/assets/post/point/cheetah.png")||t(ps,"src",yn),t(ps,"alt","cheetah"),d(os.src,gn="/assets/post/point/capped-cheetah.png")||t(os,"src",gn),t(os,"alt","capped-cheetah"),t(es,"href","#white-and-pink"),t(B,"id","white-and-pink"),d(cs.src,vn="/assets/post/point/bb.jpg")||t(cs,"src",vn),t(cs,"alt","bb"),d(ls.src,bn="/assets/post/point/capped-bb.jpg")||t(ls,"src",bn),t(ls,"alt","capped-bb"),d(is.src,wn="http://i3.ytimg.com/vi/BCXYKs8LsZQ/maxresdefault.jpg")||t(is,"src",wn),t(is,"alt","Annealed Mosaic - Breaking Bad"),t(H,"href","https://youtu.be/BCXYKs8LsZQ"),t(H,"rel","nofollow"),t(rs,"href","#source"),t(S,"id","source")},m(s,a){e(s,u,a),c(u,g),e(s,m,a),e(s,f,a),c(f,k),c(k,v),e(s,$,a),e(s,J,a),c(J,zs),e(s,fs,a),e(s,h,a),c(h,L),c(h,Fs),c(h,R),e(s,ds,a),e(s,G,a),c(G,z),c(z,Us),e(s,_s,a),e(s,F,a),c(F,Xs),e(s,ys,a),e(s,x,a),c(x,U),c(x,Ys),c(x,X),e(s,gs,a),e(s,Y,a),c(Y,Ts),e(s,vs,a),e(s,T,a),c(T,M),c(M,K),e(s,bs,a),e(s,A,a),c(A,Q),c(Q,Ks),e(s,ws,a),e(s,V,a),c(V,Qs),e(s,hs,a),e(s,E,a),c(E,W),c(E,Vs),c(E,Z),e(s,xs,a),e(s,q,a),c(q,N),c(N,Ws),e(s,Es,a),e(s,D,a),c(D,Zs),e(s,js,a),e(s,b,a),c(b,O),c(b,Ns),c(b,ss),c(b,Ds),c(b,ns),e(s,Ps,a),e(s,C,a),c(C,as),c(as,Os),e(s,Is,a),e(s,ts,a),c(ts,sn),e(s,$s,a),e(s,j,a),c(j,ps),c(j,nn),c(j,os),e(s,Gs,a),e(s,B,a),c(B,es),c(es,an),e(s,Ms,a),e(s,P,a),c(P,cs),c(P,tn),c(P,ls),e(s,As,a),e(s,us,a),c(us,H),c(H,is),e(s,qs,a),e(s,S,a),c(S,rs),c(rs,pn),e(s,Cs,a),Qn(I,s,a),Bs=!0},p(s,a){const ms={};a&2&&(ms.$$scope={dirty:a,ctx:s}),I.$set(ms)},i(s){Bs||(Wn(I.$$.fragment,s),Bs=!0)},o(s){Zn(I.$$.fragment,s),Bs=!1},d(s){s&&n(u),s&&n(m),s&&n(f),s&&n($),s&&n(J),s&&n(fs),s&&n(h),s&&n(ds),s&&n(G),s&&n(_s),s&&n(F),s&&n(ys),s&&n(x),s&&n(gs),s&&n(Y),s&&n(vs),s&&n(T),s&&n(bs),s&&n(A),s&&n(ws),s&&n(V),s&&n(hs),s&&n(E),s&&n(xs),s&&n(q),s&&n(Es),s&&n(D),s&&n(js),s&&n(b),s&&n(Ps),s&&n(C),s&&n(Is),s&&n(ts),s&&n($s),s&&n(j),s&&n(Gs),s&&n(B),s&&n(Ms),s&&n(P),s&&n(As),s&&n(us),s&&n(qs),s&&n(S),s&&n(Cs),Nn(I,s)}}}function ua(w){let u,g;const m=[w[0],On];let f={$$slots:{default:[la]},$$scope:{ctx:w}};for(let k=0;k<m.length;k+=1)f=on(f,m[k]);return u=new oa({props:f}),{c(){Tn(u.$$.fragment)},l(k){Kn(u.$$.fragment,k)},m(k,v){Qn(u,k,v),g=!0},p(k,[v]){const $=v&1?ta(m,[v&1&&Vn(k[0]),v&0&&Vn(On)]):{};v&2&&($.$$scope={dirty:v,ctx:k}),u.$set($)},i(k){g||(Wn(u.$$.fragment,k),g=!0)},o(k){Zn(u.$$.fragment,k),g=!1},d(k){Nn(u,k)}}}const On={draft:!1,title:"point",date:"2016-01-07",coverImage:"points2000x1500.png",desc:"Gernerative art using Processing",tags:["code","art","math"]};function ia(w,u,g){return w.$$set=m=>{g(0,u=on(on({},u),Dn(m)))},u=Dn(u),[u]}class ya extends sa{constructor(u){super();na(this,u,ia,ua,aa,{})}}export{ya as default,On as metadata};
