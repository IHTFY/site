import{S as xd,i as qd,s as jd,C as Kp,w as Hn,x as $n,y as Sn,z as Ud,A as nd,q as Mn,o as Nn,B as Rn,U as od,e as s,t as o,k as f,c as l,a as n,h as i,d as t,m as c,b as u,g as p,F as a}from"../../../chunks/vendor-a3554607.js";import{P as zd}from"../../../chunks/post-84b6700e.js";import{U as Zp}from"../../../chunks/Update-db150b7f.js";import"../../../chunks/stores-5109c37e.js";import"../../../chunks/Progress-da00dd34.js";import"../../../chunks/theme-4e4001f1.js";/* empty css                                      *//* empty css                                                           */function Fd(L){let d,_,h,E,m;return{c(){d=s("p"),_=o("After doing this for a while, yeah, it\u2019s not a good idea :p"),h=f(),E=s("p"),m=o("Sometimes it gets wonky.")},l(v){d=l(v,"P",{});var k=n(d);_=i(k,"After doing this for a while, yeah, it\u2019s not a good idea :p"),k.forEach(t),h=c(v),E=l(v,"P",{});var A=n(E);m=i(A,"Sometimes it gets wonky."),A.forEach(t)},m(v,k){p(v,d,k),a(d,_),p(v,h,k),p(v,E,k),a(E,m)},d(v){v&&t(d),v&&t(h),v&&t(E)}}}function Yd(L){let d,_,h,E,m;return{c(){d=s("p"),_=o("I now moved to "),h=s("a"),E=o("nvim-cmp"),m=o(" from the same author and it does some lazy loading internally so I don\u2019t need to do that anymore."),this.h()},l(v){d=l(v,"P",{});var k=n(d);_=i(k,"I now moved to "),h=l(k,"A",{href:!0,rel:!0});var A=n(h);E=i(A,"nvim-cmp"),A.forEach(t),m=i(k," from the same author and it does some lazy loading internally so I don\u2019t need to do that anymore."),k.forEach(t),this.h()},h(){u(h,"href","https://github.com/hrsh7th/nvim-cmp"),u(h,"rel","nofollow")},m(v,k){p(v,d,k),a(d,_),a(d,h),a(h,E),a(d,m)},d(v){v&&t(d)}}}function Bd(L){let d,_;return{c(){d=s("p"),_=o("I\u2019ve decreased the amount of lazy loading because sometimes they can cause some issue with autocmd")},l(h){d=l(h,"P",{});var E=n(d);_=i(E,"I\u2019ve decreased the amount of lazy loading because sometimes they can cause some issue with autocmd"),E.forEach(t)},m(h,E){p(h,d,E),a(d,_)},d(h){h&&t(d)}}}function Wd(L){let d,_,h,E,m,v,k,A,xn,qn,ga,ya,ht,jn,Un,me,Ia,_t,zn,Fn,wa,ba,Et,Yn,Bn,ve,Pa,kt,Wn,Gn,q,La,gt,Jn,Vn,Aa,yt,Kn,Zn,Ta,It,Qn,Xn,Ca,wt,eo,to,Oa,Da,bt,ao,so,he,Ha,Pt,lo,no,_e,$a,Lt,oo,io,Sa,At,ro,po,Ma,Na,Tt,uo,fo,Ee,Ra,Ct,co,mo,j,xa,Ot,vo,ho,qa,Dt,_o,Eo,ja,Ht,ko,go,Ua,$t,yo,Io,za,Fa,St,wo,Gs,ke,Mt,bo,Js,Nt,Rt,Ya,Po,Lo,Vs,W,Ao,Ba,To,Co,Ks,xt,Oo,Zs,ge,qt,Do,Qs,G,Ho,ye,$o,So,Xs,Ie,Wa,Mo,No,el,jt,Ga,Ro,tl,we,Ut,xo,al,be,zt,qo,sl,T,jo,Pe,Uo,zo,Ja,Fo,Yo,Va,Bo,Wo,ll,Ft,Go,nl,Le,rd=`<code class="language-lua"><span class="token punctuation">&#123;</span>
  <span class="token string">"kyazdani42/nvim-web-devicons"</span><span class="token punctuation">,</span>
  module <span class="token operator">=</span> <span class="token string">"nvim-web-devicons"</span><span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span></code>`,ol,Ae,Yt,Jo,il,Te,Bt,Vo,rl,P,Ce,Ko,Zo,Ka,Qo,Xo,Za,ei,ti,Qa,ai,si,pl,Oe,pd=`<code class="language-lua"><span class="token punctuation">&#123;</span>
  <span class="token string">"junegunn/vim-easy-align"</span><span class="token punctuation">,</span>
  keys <span class="token operator">=</span> <span class="token string">"&lt;Plug>(EasyAlign)"</span><span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span></code>`,ul,J,li,Xa,ni,oi,fl,De,Wt,ii,cl,y,ri,He,pi,ui,es,fi,ci,ts,di,mi,as,vi,hi,ss,_i,Ei,dl,$e,ud=`<code class="language-lua"><span class="token punctuation">&#123;</span>
  <span class="token string">"~/repos/telescope.nvim"</span><span class="token punctuation">,</span>
  module <span class="token operator">=</span> <span class="token string">"telescope"</span><span class="token punctuation">,</span>
  keys <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
    <span class="token punctuation">&#123;</span><span class="token string">""</span><span class="token punctuation">,</span> <span class="token string">"&lt;C-p>"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    <span class="token punctuation">&#123;</span><span class="token string">""</span><span class="token punctuation">,</span> <span class="token string">"&lt;C-f>"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    <span class="token punctuation">&#123;</span><span class="token string">"n"</span><span class="token punctuation">,</span> <span class="token string">"&lt;Leader>f"</span><span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span></code>`,ml,I,ki,ls,gi,yi,ns,Ii,wi,os,bi,Pi,is,Li,Ai,rs,Ti,Ci,vl,Se,Gt,Oi,hl,C,Di,Me,Hi,$i,ps,Si,Mi,us,Ni,Ri,_l,Ne,fd=`<code class="language-lua">  <span class="token punctuation">&#123;</span>
    <span class="token string">"nvim-lua/plenary.nvim"</span><span class="token punctuation">,</span>
    module <span class="token operator">=</span> <span class="token string">"plenary"</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span></code>`,El,Re,Jt,xi,kl,V,qi,xe,ji,Ui,gl,qe,cd=`<code class="language-lua"><span class="token punctuation">&#123;</span>
  <span class="token string">"vim-test/vim-test"</span><span class="token punctuation">,</span>
  cmd <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token string">"TestFile"</span><span class="token punctuation">,</span> <span class="token string">"TestNearest"</span><span class="token punctuation">,</span> <span class="token string">"TestSuite"</span><span class="token punctuation">,</span> <span class="token string">"TestVisit"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span></code>`,yl,K,zi,fs,Fi,Yi,Il,je,Vt,Bi,wl,O,Wi,Ue,Gi,Ji,ze,Vi,Ki,cs,Zi,Qi,bl,Kt,Xi,Pl,Fe,dd=`<code class="language-lua"><span class="token punctuation">&#123;</span>
  <span class="token string">"plasticboy/vim-markdown"</span><span class="token punctuation">,</span> <span class="token comment">-- or "lervag/vimtex"</span>
  filetype <span class="token operator">=</span> <span class="token string">"markdown"</span><span class="token punctuation">,</span> <span class="token comment">-- or "latex"</span>
  setup <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    vim<span class="token punctuation">.</span>g<span class="token punctuation">.</span>vim_markdown_folding_disabled <span class="token operator">=</span> <span class="token number">1</span>
    vim<span class="token punctuation">.</span>g<span class="token punctuation">.</span>vim_markdown_frontmatter <span class="token operator">=</span> <span class="token number">1</span>
  <span class="token keyword">end</span>
<span class="token punctuation">&#125;</span></code>`,Ll,D,er,ds,tr,ar,ms,sr,lr,vs,nr,or,Al,Ye,Zt,ir,Tl,H,rr,hs,pr,ur,_s,fr,cr,Es,dr,mr,Cl,Qt,vr,Ol,Be,Xt,hr,Dl,U,_r,ks,Er,kr,gs,gr,yr,Hl,ea,Ir,$l,We,md=`<code class="language-lua"><span class="token punctuation">&#123;</span>
  <span class="token string">"simrat39/rust-tools.nvim"</span><span class="token punctuation">,</span> <span class="token comment">-- or "akinsho/flutter-tools.nvim", etc</span>
  ft <span class="token operator">=</span> <span class="token string">"rust"</span><span class="token punctuation">,</span> <span class="token comment">-- this is the important field, adjust them to the appropriate filetype</span>
<span class="token punctuation">&#125;</span></code>`,Sl,ta,wr,Ml,Z,Nl,Ge,aa,br,Rl,Q,xl,b,Pr,Je,Lr,Ar,ys,Tr,Cr,Is,Or,Dr,ws,Hr,$r,ql,sa,Sr,jl,Ve,vd=`<code class="language-lua"><span class="token punctuation">&#123;</span>
  <span class="token string">"hrsh7th/nvim-compe"</span><span class="token punctuation">,</span>
  event <span class="token operator">=</span> <span class="token string">"InsertEnter"</span><span class="token punctuation">,</span>
  requires <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
    <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"plugins.luasnip"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>plugin
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code>`,Ul,$,Mr,bs,Nr,Rr,Ps,xr,qr,Ke,jr,Ur,zl,Ze,la,zr,Fl,w,Fr,Qe,Yr,Br,Ls,Wr,Gr,As,Jr,Vr,Ts,Kr,Zr,Cs,Qr,Xr,Yl,Xe,hd=`<code class="language-lua"><span class="token punctuation">&#123;</span>
  <span class="token string">"mfussenegger/nvim-dap"</span><span class="token punctuation">,</span>
  keys <span class="token operator">=</span> <span class="token string">"&lt;Leader>d"</span><span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span></code>`,Bl,et,na,ep,Wl,tt,oa,tp,Gl,z,ap,Os,sp,lp,Ds,np,op,Jl,S,ip,Hs,rp,pp,$s,up,fp,Ss,cp,dp,Vl,at,_d=`<code class="language-lua"><span class="token punctuation">&#123;</span>
  <span class="token string">"you/your-cool-plugin"</span><span class="token punctuation">,</span>
  config <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"your.config"</span><span class="token punctuation">)</span>
  <span class="token keyword">end</span>
<span class="token punctuation">&#125;</span></code>`,Kl,M,mp,Ms,vp,hp,Ns,_p,Ep,Rs,kp,gp,Zl,st,ia,yp,Ql,X,Ip,xs,wp,bp,Xl,lt,Ed=`<code class="language-lua">vim<span class="token punctuation">.</span>g<span class="token punctuation">.</span>loaded_gzip         <span class="token operator">=</span> <span class="token number">1</span>
vim<span class="token punctuation">.</span>g<span class="token punctuation">.</span>loaded_tar          <span class="token operator">=</span> <span class="token number">1</span>
vim<span class="token punctuation">.</span>g<span class="token punctuation">.</span>loaded_tarPlugin    <span class="token operator">=</span> <span class="token number">1</span>
vim<span class="token punctuation">.</span>g<span class="token punctuation">.</span>loaded_zipPlugin    <span class="token operator">=</span> <span class="token number">1</span>
vim<span class="token punctuation">.</span>g<span class="token punctuation">.</span>loaded_2html_plugin <span class="token operator">=</span> <span class="token number">1</span>
vim<span class="token punctuation">.</span>g<span class="token punctuation">.</span>loaded_netrw        <span class="token operator">=</span> <span class="token number">1</span>
vim<span class="token punctuation">.</span>g<span class="token punctuation">.</span>loaded_netrwPlugin  <span class="token operator">=</span> <span class="token number">1</span>
vim<span class="token punctuation">.</span>g<span class="token punctuation">.</span>loaded_matchit      <span class="token operator">=</span> <span class="token number">1</span>
vim<span class="token punctuation">.</span>g<span class="token punctuation">.</span>loaded_matchparen   <span class="token operator">=</span> <span class="token number">1</span>
vim<span class="token punctuation">.</span>g<span class="token punctuation">.</span>loaded_spec         <span class="token operator">=</span> <span class="token number">1</span></code>`,en,nt,ra,Pp,tn,pa,Lp,an,ot,kd='<code class="language-lua">vim<span class="token punctuation">.</span>cmd <span class="token string">[[ packadd packer.nvim ]]</span></code>',sn,ee,Ap,qs,Tp,Cp,ln,it,ua,Op,nn,fa,Dp,on,F,js,rt,Hp,$p,Us,pt,Sp,Mp,zs,ut,Np,rn,ft,ca,Rp,pn,da,xp,un,te,qp,ct,jp,Up,fn,ae,cn,se,dt,Fs,zp,Fp,ma,gd=`<code class="language-undefined">Total Time:  219.446 -- Outstanding

Slowest 10 plugins (out of 30)~
                    [vimrc]	 173.742
                        icy	 17.158
                  [runtime]	 11.249
                 nvim-compe	 5.735
                vim-matchup	 4.569
nvim-treesitter-textobjects	 2.347
               vim-nonicons	 1.997
              vim-sandwhich	 1.158
            nvim-treesitter	 0.995
              splitjoin.vim	 0.496</code>`,Yp,mt,Ys,Bp,Wp,va,yd='<code class="language-undefined">Total Time:   93.796 -- Flawless Victory</code>',dn,ha,Gp,mn,vt,Id=`<code class="language-undefined">
You can find the list of my plugins [here][plugins-link]. Anyway, hope you find something useful from this post and have a nice day! \u30C4
</code>`,vn;return Z=new Zp({props:{date:"2021-07-20",$$slots:{default:[Fd]},$$scope:{ctx:L}}}),Q=new Zp({props:{date:"2021-08-13",$$slots:{default:[Yd]},$$scope:{ctx:L}}}),ae=new Zp({props:{date:"2021-07-07",$$slots:{default:[Bd]},$$scope:{ctx:L}}}),{c(){d=s("h1"),_=s("a"),h=o("Table of Contents"),E=f(),m=s("ul"),v=s("li"),k=s("p"),A=s("a"),xn=o("Introduction"),qn=f(),ga=s("li"),ya=s("p"),ht=s("a"),jn=o("Prerequisite"),Un=f(),me=s("li"),Ia=s("p"),_t=s("a"),zn=o("UI-related Plugins"),Fn=f(),wa=s("ul"),ba=s("li"),Et=s("a"),Yn=o("DevIcons"),Bn=f(),ve=s("li"),Pa=s("p"),kt=s("a"),Wn=o("Utility-related Plugins"),Gn=f(),q=s("ul"),La=s("li"),gt=s("a"),Jn=o("vim-easy-align"),Vn=f(),Aa=s("li"),yt=s("a"),Kn=o("Telescope"),Zn=f(),Ta=s("li"),It=s("a"),Qn=o("Plenary"),Xn=f(),Ca=s("li"),wt=s("a"),eo=o("vim-test"),to=f(),Oa=s("li"),Da=s("p"),bt=s("a"),ao=o("Language-related Plugins"),so=f(),he=s("li"),Ha=s("p"),Pt=s("a"),lo=o("LSP-related Plugins"),no=f(),_e=s("ul"),$a=s("li"),Lt=s("a"),oo=o("Flutter, Rust, Java, and Typescript servers"),io=f(),Sa=s("li"),At=s("a"),ro=o("Completion and Snippet"),po=f(),Ma=s("li"),Na=s("p"),Tt=s("a"),uo=o("DAP Client"),fo=f(),Ee=s("li"),Ra=s("p"),Ct=s("a"),co=o("Tips"),mo=f(),j=s("ul"),xa=s("li"),Ot=s("a"),vo=o("Loading Configuration"),ho=f(),qa=s("li"),Dt=s("a"),_o=o("Disabling Built-In Plugins"),Eo=f(),ja=s("li"),Ht=s("a"),ko=o("Only Load Packer When Needed"),go=f(),Ua=s("li"),$t=s("a"),yo=o("References"),Io=f(),za=s("li"),Fa=s("p"),St=s("a"),wo=o("Closing Notes"),Gs=f(),ke=s("h1"),Mt=s("a"),bo=o("Introduction"),Js=f(),Nt=s("blockquote"),Rt=s("p"),Ya=s("strong"),Po=o("20-08-2021"),Lo=o(": This post is no longer maintained because I\u2019ve changed my config quite a bit since I wrote this and I don\u2019t feel like updating it :p"),Vs=f(),W=s("p"),Ao=o("I\u2019ve been using Neovim with "),Ba=s("em"),To=o("a lot"),Co=o(" of plugins and the startup time is horrible. I have around 50 plugins and it took roughly 300ms to load up.  Still quite fast compared to modern editors but it\u2019s definitely slower than a plain Neovim without any plugin."),Ks=f(),xt=s("p"),Oo=o("I\u2019ve found a way how to solve this problem by lazy loading almost most of my plugins, I thought it\u2019s a good idea to write it here in case people want to do the same."),Zs=f(),ge=s("h1"),qt=s("a"),Do=o("Prerequisite"),Qs=f(),G=s("p"),Ho=o("To do this, you need a package manager that supports lazy loading. I\u2019m using "),ye=s("a"),$o=o("packer.nvim"),So=o(", I don\u2019t know about the other package manager, but the core concept is just \u201Cload the plugin on a certain event\u201D rather than \u201Cload everything on startup\u201D."),Xs=f(),Ie=s("p"),Wa=s("strong"),Mo=o("NOTE:"),No=o(" I will be omitting irrelevant parts of the config for the sake of brevity"),el=f(),jt=s("p"),Ga=s("strong"),Ro=o("DISCLAIMER: THESE TIPS MAY OR MAY NOT WORK FOR YOU. PLEASE DON\u2019T LAZYLOAD EVERYTHING BLINDLY, IT CAN MESS UP YOUR CONFIG."),tl=f(),we=s("h1"),Ut=s("a"),xo=o("UI-related Plugins"),al=f(),be=s("h2"),zt=s("a"),qo=o("DevIcons"),sl=f(),T=s("p"),jo=o("I have "),Pe=s("a"),Uo=o("nvim-web-devicons"),zo=o(" installed and a few plugins depend on it. I use the "),Ja=s("code"),Fo=o("module"),Yo=o(" field to let it load only when a plugin "),Va=s("code"),Bo=o("require"),Wo=o(" it."),ll=f(),Ft=s("p"),Go=o("Here\u2019s a snippet on how I load it:"),nl=f(),Le=s("pre"),ol=f(),Ae=s("h1"),Yt=s("a"),Jo=o("Utility-related Plugins"),il=f(),Te=s("h2"),Bt=s("a"),Vo=o("vim-easy-align"),rl=f(),P=s("p"),Ce=s("a"),Ko=o("vim-easy-align"),Zo=o(" is quite a handy plugin to have, it can align stuff to make it look nicer. This plugin gets triggered by "),Ka=s("code"),Qo=o("<Plug>(EasyAlign)"),Xo=o(". It looks like a "),Za=s("code"),ei=o("cmd"),ti=o(" but it actually belongs to "),Qa=s("code"),ai=o("keys"),si=o(" because it\u2019s a mapping."),pl=f(),Oe=s("pre"),ul=f(),J=s("p"),li=o("This way, the plugin won\u2019t be available "),Xa=s("em"),ni=o("unless"),oi=o(" I trigger it."),fl=f(),De=s("h2"),Wt=s("a"),ii=o("Telescope"),cl=f(),y=s("p"),ri=o("Similar to the previous plugin, I trigger "),He=s("a"),pi=o("telescope.nvim"),ui=o(" using the "),es=s("code"),fi=o("keys"),ci=o(" field so it will get loaded "),ts=s("em"),di=o("only"),mi=o(" if I want it. But, I also have the "),as=s("code"),vi=o("module"),hi=o(" field which tells packer to load this plugin whenever it gets "),ss=s("code"),_i=o("require"),Ei=o("d by another module."),dl=f(),$e=s("pre"),ml=f(),I=s("p"),ki=o("I use "),ls=s("code"),gi=o("<C-p>"),yi=o(" to trigger "),ns=s("code"),Ii=o("find_files"),wi=o(" and "),os=s("code"),bi=o("<C-f>"),Pi=o(" to trigger "),is=s("code"),Li=o("grep_string"),Ai=o(", the rest prefixed with "),rs=s("code"),Ti=o("<Leader>f"),Ci=o("."),vl=f(),Se=s("h2"),Gt=s("a"),Oi=o("Plenary"),hl=f(),C=s("p"),Di=o("Some of my plugins depends on "),Me=s("a"),Hi=o("plenary.nvim"),$i=o(" but plenary itself is just a module so it makes sense to load it "),ps=s("em"),Si=o("only"),Mi=o(" when something needs it. Again, I\u2019m using "),us=s("code"),Ni=o("module"),Ri=o(" key for this."),_l=f(),Ne=s("pre"),El=f(),Re=s("h2"),Jt=s("a"),xi=o("vim-test"),kl=f(),V=s("p"),qi=o("Since "),xe=s("a"),ji=o("vim-test"),Ui=o(" is triggered by executing a command, I can use it to lazy-load this plugin by doing so:"),gl=f(),qe=s("pre"),yl=f(),K=s("p"),zi=o("The "),fs=s("code"),Fi=o("cmd"),Yi=o(" could also be a string if there\u2019s only 1 item."),Il=f(),je=s("h1"),Vt=s("a"),Bi=o("Language-related Plugins"),wl=f(),O=s("p"),Wi=o("I have several plugins for better language support such as "),Ue=s("a"),Gi=o("vimtex"),Ji=o(" for latex and "),ze=s("a"),Vi=o("vim-markdown"),Ki=o(" for markdown. I load them "),cs=s("em"),Zi=o("only"),Qi=o(" on certain filetypes."),bl=f(),Kt=s("p"),Xi=o("Here\u2019s a snippet for vim-markdown:"),Pl=f(),Fe=s("pre"),Ll=f(),D=s("p"),er=o("As you can see, I do the config inside the "),ds=s("code"),tr=o("setup"),ar=o(" key instead of "),ms=s("code"),sr=o("config"),lr=o(" key. This makes those global variables get set "),vs=s("em"),nr=o("before"),or=o(" the plugin gets loaded, otherwise it won\u2019t affect the plugin."),Al=f(),Ye=s("h1"),Zt=s("a"),ir=o("LSP-related Plugins"),Tl=f(),H=s("p"),rr=o("I made LSP-related plugins to be loaded on "),hs=s("code"),pr=o("BufRead"),ur=o(" event or specific "),_s=s("code"),fr=o("filetype"),cr=o(", because it gets triggered "),Es=s("em"),dr=o("after"),mr=o(" a file gets loaded into a buffer. I sometimes open Neovim as a scratch which doesn\u2019t load any file to a buffer so these plugins won\u2019t get loaded."),Cl=f(),Qt=s("p"),vr=o("Here\u2019s some example from my config"),Ol=f(),Be=s("h2"),Xt=s("a"),hr=o("Flutter, Rust, Java, and Typescript servers"),Dl=f(),U=s("p"),_r=o("I load them using a "),ks=s("code"),Er=o("filetype"),kr=o(" because they have their own \u2018extension\u2019, so to speak. I don\u2019t use the one provided in "),gs=s("code"),gr=o("nvim-lspconfig"),yr=o(" because these servers have some special functionalities which can only be achieved using some extra implementation rather than just \u2018starting the server\u2019 like inlay hints, widget guides, etc."),Hl=f(),ea=s("p"),Ir=o("Here\u2019s a snippet:"),$l=f(),We=s("pre"),Sl=f(),ta=s("p"),wr=o("If I open any filetype that doesn\u2019t match them, they won\u2019t get loaded, reducing the time needed to open Neovim."),Ml=f(),Hn(Z.$$.fragment),Nl=f(),Ge=s("h2"),aa=s("a"),br=o("Completion and Snippet"),Rl=f(),Hn(Q.$$.fragment),xl=f(),b=s("p"),Pr=o("I use "),Je=s("a"),Lr=o("nvim-compe"),Ar=o(" for autocompletion. I load it on the "),ys=s("code"),Tr=o("InsertEnter"),Cr=o(" event. It only makes sense to load an autocompletion plugin after I go to "),Is=s("em"),Or=o("Insert Mode"),Dr=o(". Sometimes, I open Neovim just to look at a file, move around, never get into Insert Mode, and quit Neovim. For this reason, "),ws=s("em"),Hr=o("always"),$r=o(" loading nvim-compe will be redundant."),ql=f(),sa=s("p"),Sr=o("Here\u2019s a snippet for it:"),jl=f(),Ve=s("pre"),Ul=f(),$=s("p"),Mr=o("If you noticed, I have a "),bs=s("code"),Nr=o("requires"),Rr=o(" field. I like to structure my plugin definition to be linked to each other if a plugin "),Ps=s("em"),xr=o("requires"),qr=o(" another plugin, in this case, it\u2019s "),Ke=s("a"),jr=o("LuaSnip"),Ur=o("."),zl=f(),Ze=s("h1"),la=s("a"),zr=o("DAP Client"),Fl=f(),w=s("p"),Fr=o("I have "),Qe=s("a"),Yr=o("nvim-dap"),Br=o(" installed for debugging, since I trigger its functionality using "),Ls=s("code"),Wr=o("<Leader>d"),Gr=o(" prefix \u2013 "),As=s("code"),Jr=o("<Leader>db"),Vr=o(" to add a breakpoint, for example \u2013 so I load it only when I press "),Ts=s("code"),Kr=o("<Leader>d"),Zr=o(". Packer has a field called "),Cs=s("code"),Qr=o("keys"),Xr=o(" to place the keybind that triggers this plugin."),Yl=f(),Xe=s("pre"),Bl=f(),et=s("h1"),na=s("a"),ep=o("Tips"),Wl=f(),tt=s("h2"),oa=s("a"),tp=o("Loading Configuration"),Gl=f(),z=s("p"),ap=o("Since we\u2019re loading them on a certain event, their config needs to get loaded "),Os=s("em"),sp=o("after"),lp=o(" the plugin has been loaded. Fortunately, packer has a feature where you can specify the configuration for the plugin. If you\u2019re trying to load the configuration separately, you might load the configuration "),Ds=s("em"),np=o("before"),op=o(" the plugin gets loaded which will cause an unwanted error."),Jl=f(),S=s("p"),ip=o("We can do it by using the "),Hs=s("code"),rp=o("config"),pp=o(" field provided by packer. If it\u2019s a huge config, I\u2019d recommend putting it to another file and do "),$s=s("code"),up=o('require("your.config")'),fp=o(" inside the "),Ss=s("code"),cp=o("config"),dp=o(" function like so:"),Vl=f(),at=s("pre"),Kl=f(),M=s("p"),mp=o("The reason is everything inside packer definition will get compiled into "),Ms=s("code"),vp=o("packer_compiled.vim"),hp=o(" so if you want to update your config inside that "),Ns=s("code"),_p=o("config"),Ep=o(" field, you\u2019ll need to recompile every time. This way, you don\u2019t need to do that, you can just edit "),Rs=s("code"),kp=o("your/config.lua"),gp=o(" file."),Zl=f(),st=s("h2"),ia=s("a"),yp=o("Disabling Built-In Plugins"),Ql=f(),X=s("p"),Ip=o(`If you want more speedup, I\u2019d recommend disabling the builtin vim plugins \u2013 or don\u2019t if you\u2019re using them \u2013 like so:
This won\u2019t add `),xs=s("em"),wp=o("that"),bp=o(" much, but I like to disable them since I\u2019m not using them anyway."),Xl=f(),lt=s("pre"),en=f(),nt=s("h2"),ra=s("a"),Pp=o("Only Load Packer When Needed"),tn=f(),pa=s("p"),Lp=o("If you don\u2019t need packer all the time, just mark it as opt and add this line at the top of the file."),an=f(),ot=s("pre"),sn=f(),ee=s("p"),Ap=o("If you need packer, you\u2019ll go to that file and do "),qs=s("code"),Tp=o("luafile %"),Cp=o(", boom, packer gets loaded and you can do packer related stuff."),ln=f(),it=s("h2"),ua=s("a"),Op=o("References"),nn=f(),fa=s("p"),Dp=o("Here are some references that I\u2019ve used:"),on=f(),F=s("ul"),js=s("li"),rt=s("a"),Hp=o("packer.nvim"),$p=f(),Us=s("li"),pt=s("a"),Sp=o("ray-x config"),Mp=f(),zs=s("li"),ut=s("a"),Np=o("vhyrro config"),rn=f(),ft=s("h1"),ca=s("a"),Rp=o("Closing Notes"),pn=f(),da=s("p"),xp=o("Those are not all of my plugins obviously, it would take forever to go through 50 plugins I used :p"),un=f(),te=s("p"),qp=o("Here\u2019s my startup time \u2013 tested using "),ct=s("a"),jp=o("startuptime.vim"),Up=o(" \u2013 for reference."),fn=f(),Hn(ae.$$.fragment),cn=f(),se=s("ul"),dt=s("li"),Fs=s("p"),zp=o("Before (fully) lazy loading:"),Fp=f(),ma=s("pre"),Yp=f(),mt=s("li"),Ys=s("p"),Bp=o("After lazy loading:"),Wp=f(),va=s("pre"),dn=f(),ha=s("p"),Gp=o(`Slowest 10 plugins (out of 18)~
packer.nvim	50.963
[runtime]	12.193
vim-matchup	10.051
[unknown]	8.848
[vimrc]	6.048
nvim-treesitter-textobjects	1.599
icy	1.500
nvim-treesitter	1.361
LuaSnip	0.478
nvim-ts-context-commentstring	0.165`),mn=f(),vt=s("pre"),this.h()},l(e){d=l(e,"H1",{id:!0});var r=n(d);_=l(r,"A",{href:!0});var Bs=n(_);h=i(Bs,"Table of Contents"),Bs.forEach(t),r.forEach(t),E=c(e),m=l(e,"UL",{});var g=n(m);v=l(g,"LI",{});var Ws=n(v);k=l(Ws,"P",{});var Qp=n(k);A=l(Qp,"A",{href:!0});var Xp=n(A);xn=i(Xp,"Introduction"),Xp.forEach(t),Qp.forEach(t),Ws.forEach(t),qn=c(g),ga=l(g,"LI",{});var eu=n(ga);ya=l(eu,"P",{});var tu=n(ya);ht=l(tu,"A",{href:!0});var au=n(ht);jn=i(au,"Prerequisite"),au.forEach(t),tu.forEach(t),eu.forEach(t),Un=c(g),me=l(g,"LI",{});var hn=n(me);Ia=l(hn,"P",{});var su=n(Ia);_t=l(su,"A",{href:!0});var lu=n(_t);zn=i(lu,"UI-related Plugins"),lu.forEach(t),su.forEach(t),Fn=c(hn),wa=l(hn,"UL",{});var nu=n(wa);ba=l(nu,"LI",{});var ou=n(ba);Et=l(ou,"A",{href:!0});var iu=n(Et);Yn=i(iu,"DevIcons"),iu.forEach(t),ou.forEach(t),nu.forEach(t),hn.forEach(t),Bn=c(g),ve=l(g,"LI",{});var _n=n(ve);Pa=l(_n,"P",{});var ru=n(Pa);kt=l(ru,"A",{href:!0});var pu=n(kt);Wn=i(pu,"Utility-related Plugins"),pu.forEach(t),ru.forEach(t),Gn=c(_n),q=l(_n,"UL",{});var le=n(q);La=l(le,"LI",{});var uu=n(La);gt=l(uu,"A",{href:!0});var fu=n(gt);Jn=i(fu,"vim-easy-align"),fu.forEach(t),uu.forEach(t),Vn=c(le),Aa=l(le,"LI",{});var cu=n(Aa);yt=l(cu,"A",{href:!0});var du=n(yt);Kn=i(du,"Telescope"),du.forEach(t),cu.forEach(t),Zn=c(le),Ta=l(le,"LI",{});var mu=n(Ta);It=l(mu,"A",{href:!0});var vu=n(It);Qn=i(vu,"Plenary"),vu.forEach(t),mu.forEach(t),Xn=c(le),Ca=l(le,"LI",{});var hu=n(Ca);wt=l(hu,"A",{href:!0});var _u=n(wt);eo=i(_u,"vim-test"),_u.forEach(t),hu.forEach(t),le.forEach(t),_n.forEach(t),to=c(g),Oa=l(g,"LI",{});var Eu=n(Oa);Da=l(Eu,"P",{});var ku=n(Da);bt=l(ku,"A",{href:!0});var gu=n(bt);ao=i(gu,"Language-related Plugins"),gu.forEach(t),ku.forEach(t),Eu.forEach(t),so=c(g),he=l(g,"LI",{});var En=n(he);Ha=l(En,"P",{});var yu=n(Ha);Pt=l(yu,"A",{href:!0});var Iu=n(Pt);lo=i(Iu,"LSP-related Plugins"),Iu.forEach(t),yu.forEach(t),no=c(En),_e=l(En,"UL",{});var kn=n(_e);$a=l(kn,"LI",{});var wu=n($a);Lt=l(wu,"A",{href:!0});var bu=n(Lt);oo=i(bu,"Flutter, Rust, Java, and Typescript servers"),bu.forEach(t),wu.forEach(t),io=c(kn),Sa=l(kn,"LI",{});var Pu=n(Sa);At=l(Pu,"A",{href:!0});var Lu=n(At);ro=i(Lu,"Completion and Snippet"),Lu.forEach(t),Pu.forEach(t),kn.forEach(t),En.forEach(t),po=c(g),Ma=l(g,"LI",{});var Au=n(Ma);Na=l(Au,"P",{});var Tu=n(Na);Tt=l(Tu,"A",{href:!0});var Cu=n(Tt);uo=i(Cu,"DAP Client"),Cu.forEach(t),Tu.forEach(t),Au.forEach(t),fo=c(g),Ee=l(g,"LI",{});var gn=n(Ee);Ra=l(gn,"P",{});var Ou=n(Ra);Ct=l(Ou,"A",{href:!0});var Du=n(Ct);co=i(Du,"Tips"),Du.forEach(t),Ou.forEach(t),mo=c(gn),j=l(gn,"UL",{});var ne=n(j);xa=l(ne,"LI",{});var Hu=n(xa);Ot=l(Hu,"A",{href:!0});var $u=n(Ot);vo=i($u,"Loading Configuration"),$u.forEach(t),Hu.forEach(t),ho=c(ne),qa=l(ne,"LI",{});var Su=n(qa);Dt=l(Su,"A",{href:!0});var Mu=n(Dt);_o=i(Mu,"Disabling Built-In Plugins"),Mu.forEach(t),Su.forEach(t),Eo=c(ne),ja=l(ne,"LI",{});var Nu=n(ja);Ht=l(Nu,"A",{href:!0});var Ru=n(Ht);ko=i(Ru,"Only Load Packer When Needed"),Ru.forEach(t),Nu.forEach(t),go=c(ne),Ua=l(ne,"LI",{});var xu=n(Ua);$t=l(xu,"A",{href:!0});var qu=n($t);yo=i(qu,"References"),qu.forEach(t),xu.forEach(t),ne.forEach(t),gn.forEach(t),Io=c(g),za=l(g,"LI",{});var ju=n(za);Fa=l(ju,"P",{});var Uu=n(Fa);St=l(Uu,"A",{href:!0});var zu=n(St);wo=i(zu,"Closing Notes"),zu.forEach(t),Uu.forEach(t),ju.forEach(t),g.forEach(t),Gs=c(e),ke=l(e,"H1",{id:!0});var Fu=n(ke);Mt=l(Fu,"A",{href:!0});var Yu=n(Mt);bo=i(Yu,"Introduction"),Yu.forEach(t),Fu.forEach(t),Js=c(e),Nt=l(e,"BLOCKQUOTE",{});var Bu=n(Nt);Rt=l(Bu,"P",{});var Jp=n(Rt);Ya=l(Jp,"STRONG",{});var Wu=n(Ya);Po=i(Wu,"20-08-2021"),Wu.forEach(t),Lo=i(Jp,": This post is no longer maintained because I\u2019ve changed my config quite a bit since I wrote this and I don\u2019t feel like updating it :p"),Jp.forEach(t),Bu.forEach(t),Vs=c(e),W=l(e,"P",{});var yn=n(W);Ao=i(yn,"I\u2019ve been using Neovim with "),Ba=l(yn,"EM",{});var Gu=n(Ba);To=i(Gu,"a lot"),Gu.forEach(t),Co=i(yn," of plugins and the startup time is horrible. I have around 50 plugins and it took roughly 300ms to load up.  Still quite fast compared to modern editors but it\u2019s definitely slower than a plain Neovim without any plugin."),yn.forEach(t),Ks=c(e),xt=l(e,"P",{});var Ju=n(xt);Oo=i(Ju,"I\u2019ve found a way how to solve this problem by lazy loading almost most of my plugins, I thought it\u2019s a good idea to write it here in case people want to do the same."),Ju.forEach(t),Zs=c(e),ge=l(e,"H1",{id:!0});var Vu=n(ge);qt=l(Vu,"A",{href:!0});var Ku=n(qt);Do=i(Ku,"Prerequisite"),Ku.forEach(t),Vu.forEach(t),Qs=c(e),G=l(e,"P",{});var In=n(G);Ho=i(In,"To do this, you need a package manager that supports lazy loading. I\u2019m using "),ye=l(In,"A",{href:!0,rel:!0});var Zu=n(ye);$o=i(Zu,"packer.nvim"),Zu.forEach(t),So=i(In,", I don\u2019t know about the other package manager, but the core concept is just \u201Cload the plugin on a certain event\u201D rather than \u201Cload everything on startup\u201D."),In.forEach(t),Xs=c(e),Ie=l(e,"P",{});var Vp=n(Ie);Wa=l(Vp,"STRONG",{});var Qu=n(Wa);Mo=i(Qu,"NOTE:"),Qu.forEach(t),No=i(Vp," I will be omitting irrelevant parts of the config for the sake of brevity"),Vp.forEach(t),el=c(e),jt=l(e,"P",{});var Xu=n(jt);Ga=l(Xu,"STRONG",{});var ef=n(Ga);Ro=i(ef,"DISCLAIMER: THESE TIPS MAY OR MAY NOT WORK FOR YOU. PLEASE DON\u2019T LAZYLOAD EVERYTHING BLINDLY, IT CAN MESS UP YOUR CONFIG."),ef.forEach(t),Xu.forEach(t),tl=c(e),we=l(e,"H1",{id:!0});var tf=n(we);Ut=l(tf,"A",{href:!0});var af=n(Ut);xo=i(af,"UI-related Plugins"),af.forEach(t),tf.forEach(t),al=c(e),be=l(e,"H2",{id:!0});var sf=n(be);zt=l(sf,"A",{href:!0});var lf=n(zt);qo=i(lf,"DevIcons"),lf.forEach(t),sf.forEach(t),sl=c(e),T=l(e,"P",{});var oe=n(T);jo=i(oe,"I have "),Pe=l(oe,"A",{href:!0,rel:!0});var nf=n(Pe);Uo=i(nf,"nvim-web-devicons"),nf.forEach(t),zo=i(oe," installed and a few plugins depend on it. I use the "),Ja=l(oe,"CODE",{});var of=n(Ja);Fo=i(of,"module"),of.forEach(t),Yo=i(oe," field to let it load only when a plugin "),Va=l(oe,"CODE",{});var rf=n(Va);Bo=i(rf,"require"),rf.forEach(t),Wo=i(oe," it."),oe.forEach(t),ll=c(e),Ft=l(e,"P",{});var pf=n(Ft);Go=i(pf,"Here\u2019s a snippet on how I load it:"),pf.forEach(t),nl=c(e),Le=l(e,"PRE",{class:!0});var wd=n(Le);wd.forEach(t),ol=c(e),Ae=l(e,"H1",{id:!0});var uf=n(Ae);Yt=l(uf,"A",{href:!0});var ff=n(Yt);Jo=i(ff,"Utility-related Plugins"),ff.forEach(t),uf.forEach(t),il=c(e),Te=l(e,"H2",{id:!0});var cf=n(Te);Bt=l(cf,"A",{href:!0});var df=n(Bt);Vo=i(df,"vim-easy-align"),df.forEach(t),cf.forEach(t),rl=c(e),P=l(e,"P",{});var B=n(P);Ce=l(B,"A",{href:!0,rel:!0});var mf=n(Ce);Ko=i(mf,"vim-easy-align"),mf.forEach(t),Zo=i(B," is quite a handy plugin to have, it can align stuff to make it look nicer. This plugin gets triggered by "),Ka=l(B,"CODE",{});var vf=n(Ka);Qo=i(vf,"<Plug>(EasyAlign)"),vf.forEach(t),Xo=i(B,". It looks like a "),Za=l(B,"CODE",{});var hf=n(Za);ei=i(hf,"cmd"),hf.forEach(t),ti=i(B," but it actually belongs to "),Qa=l(B,"CODE",{});var _f=n(Qa);ai=i(_f,"keys"),_f.forEach(t),si=i(B," because it\u2019s a mapping."),B.forEach(t),pl=c(e),Oe=l(e,"PRE",{class:!0});var bd=n(Oe);bd.forEach(t),ul=c(e),J=l(e,"P",{});var wn=n(J);li=i(wn,"This way, the plugin won\u2019t be available "),Xa=l(wn,"EM",{});var Ef=n(Xa);ni=i(Ef,"unless"),Ef.forEach(t),oi=i(wn," I trigger it."),wn.forEach(t),fl=c(e),De=l(e,"H2",{id:!0});var kf=n(De);Wt=l(kf,"A",{href:!0});var gf=n(Wt);ii=i(gf,"Telescope"),gf.forEach(t),kf.forEach(t),cl=c(e),y=l(e,"P",{});var N=n(y);ri=i(N,"Similar to the previous plugin, I trigger "),He=l(N,"A",{href:!0,rel:!0});var yf=n(He);pi=i(yf,"telescope.nvim"),yf.forEach(t),ui=i(N," using the "),es=l(N,"CODE",{});var If=n(es);fi=i(If,"keys"),If.forEach(t),ci=i(N," field so it will get loaded "),ts=l(N,"EM",{});var wf=n(ts);di=i(wf,"only"),wf.forEach(t),mi=i(N," if I want it. But, I also have the "),as=l(N,"CODE",{});var bf=n(as);vi=i(bf,"module"),bf.forEach(t),hi=i(N," field which tells packer to load this plugin whenever it gets "),ss=l(N,"CODE",{});var Pf=n(ss);_i=i(Pf,"require"),Pf.forEach(t),Ei=i(N,"d by another module."),N.forEach(t),dl=c(e),$e=l(e,"PRE",{class:!0});var Pd=n($e);Pd.forEach(t),ml=c(e),I=l(e,"P",{});var R=n(I);ki=i(R,"I use "),ls=l(R,"CODE",{});var Lf=n(ls);gi=i(Lf,"<C-p>"),Lf.forEach(t),yi=i(R," to trigger "),ns=l(R,"CODE",{});var Af=n(ns);Ii=i(Af,"find_files"),Af.forEach(t),wi=i(R," and "),os=l(R,"CODE",{});var Tf=n(os);bi=i(Tf,"<C-f>"),Tf.forEach(t),Pi=i(R," to trigger "),is=l(R,"CODE",{});var Cf=n(is);Li=i(Cf,"grep_string"),Cf.forEach(t),Ai=i(R,", the rest prefixed with "),rs=l(R,"CODE",{});var Of=n(rs);Ti=i(Of,"<Leader>f"),Of.forEach(t),Ci=i(R,"."),R.forEach(t),vl=c(e),Se=l(e,"H2",{id:!0});var Df=n(Se);Gt=l(Df,"A",{href:!0});var Hf=n(Gt);Oi=i(Hf,"Plenary"),Hf.forEach(t),Df.forEach(t),hl=c(e),C=l(e,"P",{});var ie=n(C);Di=i(ie,"Some of my plugins depends on "),Me=l(ie,"A",{href:!0,rel:!0});var $f=n(Me);Hi=i($f,"plenary.nvim"),$f.forEach(t),$i=i(ie," but plenary itself is just a module so it makes sense to load it "),ps=l(ie,"EM",{});var Sf=n(ps);Si=i(Sf,"only"),Sf.forEach(t),Mi=i(ie," when something needs it. Again, I\u2019m using "),us=l(ie,"CODE",{});var Mf=n(us);Ni=i(Mf,"module"),Mf.forEach(t),Ri=i(ie," key for this."),ie.forEach(t),_l=c(e),Ne=l(e,"PRE",{class:!0});var Ld=n(Ne);Ld.forEach(t),El=c(e),Re=l(e,"H2",{id:!0});var Nf=n(Re);Jt=l(Nf,"A",{href:!0});var Rf=n(Jt);xi=i(Rf,"vim-test"),Rf.forEach(t),Nf.forEach(t),kl=c(e),V=l(e,"P",{});var bn=n(V);qi=i(bn,"Since "),xe=l(bn,"A",{href:!0,rel:!0});var xf=n(xe);ji=i(xf,"vim-test"),xf.forEach(t),Ui=i(bn," is triggered by executing a command, I can use it to lazy-load this plugin by doing so:"),bn.forEach(t),gl=c(e),qe=l(e,"PRE",{class:!0});var Ad=n(qe);Ad.forEach(t),yl=c(e),K=l(e,"P",{});var Pn=n(K);zi=i(Pn,"The "),fs=l(Pn,"CODE",{});var qf=n(fs);Fi=i(qf,"cmd"),qf.forEach(t),Yi=i(Pn," could also be a string if there\u2019s only 1 item."),Pn.forEach(t),Il=c(e),je=l(e,"H1",{id:!0});var jf=n(je);Vt=l(jf,"A",{href:!0});var Uf=n(Vt);Bi=i(Uf,"Language-related Plugins"),Uf.forEach(t),jf.forEach(t),wl=c(e),O=l(e,"P",{});var re=n(O);Wi=i(re,"I have several plugins for better language support such as "),Ue=l(re,"A",{href:!0,rel:!0});var zf=n(Ue);Gi=i(zf,"vimtex"),zf.forEach(t),Ji=i(re," for latex and "),ze=l(re,"A",{href:!0,rel:!0});var Ff=n(ze);Vi=i(Ff,"vim-markdown"),Ff.forEach(t),Ki=i(re," for markdown. I load them "),cs=l(re,"EM",{});var Yf=n(cs);Zi=i(Yf,"only"),Yf.forEach(t),Qi=i(re," on certain filetypes."),re.forEach(t),bl=c(e),Kt=l(e,"P",{});var Bf=n(Kt);Xi=i(Bf,"Here\u2019s a snippet for vim-markdown:"),Bf.forEach(t),Pl=c(e),Fe=l(e,"PRE",{class:!0});var Td=n(Fe);Td.forEach(t),Ll=c(e),D=l(e,"P",{});var pe=n(D);er=i(pe,"As you can see, I do the config inside the "),ds=l(pe,"CODE",{});var Wf=n(ds);tr=i(Wf,"setup"),Wf.forEach(t),ar=i(pe," key instead of "),ms=l(pe,"CODE",{});var Gf=n(ms);sr=i(Gf,"config"),Gf.forEach(t),lr=i(pe," key. This makes those global variables get set "),vs=l(pe,"EM",{});var Jf=n(vs);nr=i(Jf,"before"),Jf.forEach(t),or=i(pe," the plugin gets loaded, otherwise it won\u2019t affect the plugin."),pe.forEach(t),Al=c(e),Ye=l(e,"H1",{id:!0});var Vf=n(Ye);Zt=l(Vf,"A",{href:!0});var Kf=n(Zt);ir=i(Kf,"LSP-related Plugins"),Kf.forEach(t),Vf.forEach(t),Tl=c(e),H=l(e,"P",{});var ue=n(H);rr=i(ue,"I made LSP-related plugins to be loaded on "),hs=l(ue,"CODE",{});var Zf=n(hs);pr=i(Zf,"BufRead"),Zf.forEach(t),ur=i(ue," event or specific "),_s=l(ue,"CODE",{});var Qf=n(_s);fr=i(Qf,"filetype"),Qf.forEach(t),cr=i(ue,", because it gets triggered "),Es=l(ue,"EM",{});var Xf=n(Es);dr=i(Xf,"after"),Xf.forEach(t),mr=i(ue," a file gets loaded into a buffer. I sometimes open Neovim as a scratch which doesn\u2019t load any file to a buffer so these plugins won\u2019t get loaded."),ue.forEach(t),Cl=c(e),Qt=l(e,"P",{});var ec=n(Qt);vr=i(ec,"Here\u2019s some example from my config"),ec.forEach(t),Ol=c(e),Be=l(e,"H2",{id:!0});var tc=n(Be);Xt=l(tc,"A",{href:!0});var ac=n(Xt);hr=i(ac,"Flutter, Rust, Java, and Typescript servers"),ac.forEach(t),tc.forEach(t),Dl=c(e),U=l(e,"P",{});var _a=n(U);_r=i(_a,"I load them using a "),ks=l(_a,"CODE",{});var sc=n(ks);Er=i(sc,"filetype"),sc.forEach(t),kr=i(_a," because they have their own \u2018extension\u2019, so to speak. I don\u2019t use the one provided in "),gs=l(_a,"CODE",{});var lc=n(gs);gr=i(lc,"nvim-lspconfig"),lc.forEach(t),yr=i(_a," because these servers have some special functionalities which can only be achieved using some extra implementation rather than just \u2018starting the server\u2019 like inlay hints, widget guides, etc."),_a.forEach(t),Hl=c(e),ea=l(e,"P",{});var nc=n(ea);Ir=i(nc,"Here\u2019s a snippet:"),nc.forEach(t),$l=c(e),We=l(e,"PRE",{class:!0});var Cd=n(We);Cd.forEach(t),Sl=c(e),ta=l(e,"P",{});var oc=n(ta);wr=i(oc,"If I open any filetype that doesn\u2019t match them, they won\u2019t get loaded, reducing the time needed to open Neovim."),oc.forEach(t),Ml=c(e),$n(Z.$$.fragment,e),Nl=c(e),Ge=l(e,"H2",{id:!0});var ic=n(Ge);aa=l(ic,"A",{href:!0});var rc=n(aa);br=i(rc,"Completion and Snippet"),rc.forEach(t),ic.forEach(t),Rl=c(e),$n(Q.$$.fragment,e),xl=c(e),b=l(e,"P",{});var Y=n(b);Pr=i(Y,"I use "),Je=l(Y,"A",{href:!0,rel:!0});var pc=n(Je);Lr=i(pc,"nvim-compe"),pc.forEach(t),Ar=i(Y," for autocompletion. I load it on the "),ys=l(Y,"CODE",{});var uc=n(ys);Tr=i(uc,"InsertEnter"),uc.forEach(t),Cr=i(Y," event. It only makes sense to load an autocompletion plugin after I go to "),Is=l(Y,"EM",{});var fc=n(Is);Or=i(fc,"Insert Mode"),fc.forEach(t),Dr=i(Y,". Sometimes, I open Neovim just to look at a file, move around, never get into Insert Mode, and quit Neovim. For this reason, "),ws=l(Y,"EM",{});var cc=n(ws);Hr=i(cc,"always"),cc.forEach(t),$r=i(Y," loading nvim-compe will be redundant."),Y.forEach(t),ql=c(e),sa=l(e,"P",{});var dc=n(sa);Sr=i(dc,"Here\u2019s a snippet for it:"),dc.forEach(t),jl=c(e),Ve=l(e,"PRE",{class:!0});var Od=n(Ve);Od.forEach(t),Ul=c(e),$=l(e,"P",{});var fe=n($);Mr=i(fe,"If you noticed, I have a "),bs=l(fe,"CODE",{});var mc=n(bs);Nr=i(mc,"requires"),mc.forEach(t),Rr=i(fe," field. I like to structure my plugin definition to be linked to each other if a plugin "),Ps=l(fe,"EM",{});var vc=n(Ps);xr=i(vc,"requires"),vc.forEach(t),qr=i(fe," another plugin, in this case, it\u2019s "),Ke=l(fe,"A",{href:!0,rel:!0});var hc=n(Ke);jr=i(hc,"LuaSnip"),hc.forEach(t),Ur=i(fe,"."),fe.forEach(t),zl=c(e),Ze=l(e,"H1",{id:!0});var _c=n(Ze);la=l(_c,"A",{href:!0});var Ec=n(la);zr=i(Ec,"DAP Client"),Ec.forEach(t),_c.forEach(t),Fl=c(e),w=l(e,"P",{});var x=n(w);Fr=i(x,"I have "),Qe=l(x,"A",{href:!0,rel:!0});var kc=n(Qe);Yr=i(kc,"nvim-dap"),kc.forEach(t),Br=i(x," installed for debugging, since I trigger its functionality using "),Ls=l(x,"CODE",{});var gc=n(Ls);Wr=i(gc,"<Leader>d"),gc.forEach(t),Gr=i(x," prefix \u2013 "),As=l(x,"CODE",{});var yc=n(As);Jr=i(yc,"<Leader>db"),yc.forEach(t),Vr=i(x," to add a breakpoint, for example \u2013 so I load it only when I press "),Ts=l(x,"CODE",{});var Ic=n(Ts);Kr=i(Ic,"<Leader>d"),Ic.forEach(t),Zr=i(x,". Packer has a field called "),Cs=l(x,"CODE",{});var wc=n(Cs);Qr=i(wc,"keys"),wc.forEach(t),Xr=i(x," to place the keybind that triggers this plugin."),x.forEach(t),Yl=c(e),Xe=l(e,"PRE",{class:!0});var Dd=n(Xe);Dd.forEach(t),Bl=c(e),et=l(e,"H1",{id:!0});var bc=n(et);na=l(bc,"A",{href:!0});var Pc=n(na);ep=i(Pc,"Tips"),Pc.forEach(t),bc.forEach(t),Wl=c(e),tt=l(e,"H2",{id:!0});var Lc=n(tt);oa=l(Lc,"A",{href:!0});var Ac=n(oa);tp=i(Ac,"Loading Configuration"),Ac.forEach(t),Lc.forEach(t),Gl=c(e),z=l(e,"P",{});var Ea=n(z);ap=i(Ea,"Since we\u2019re loading them on a certain event, their config needs to get loaded "),Os=l(Ea,"EM",{});var Tc=n(Os);sp=i(Tc,"after"),Tc.forEach(t),lp=i(Ea," the plugin has been loaded. Fortunately, packer has a feature where you can specify the configuration for the plugin. If you\u2019re trying to load the configuration separately, you might load the configuration "),Ds=l(Ea,"EM",{});var Cc=n(Ds);np=i(Cc,"before"),Cc.forEach(t),op=i(Ea," the plugin gets loaded which will cause an unwanted error."),Ea.forEach(t),Jl=c(e),S=l(e,"P",{});var ce=n(S);ip=i(ce,"We can do it by using the "),Hs=l(ce,"CODE",{});var Oc=n(Hs);rp=i(Oc,"config"),Oc.forEach(t),pp=i(ce," field provided by packer. If it\u2019s a huge config, I\u2019d recommend putting it to another file and do "),$s=l(ce,"CODE",{});var Dc=n($s);up=i(Dc,'require("your.config")'),Dc.forEach(t),fp=i(ce," inside the "),Ss=l(ce,"CODE",{});var Hc=n(Ss);cp=i(Hc,"config"),Hc.forEach(t),dp=i(ce," function like so:"),ce.forEach(t),Vl=c(e),at=l(e,"PRE",{class:!0});var Hd=n(at);Hd.forEach(t),Kl=c(e),M=l(e,"P",{});var de=n(M);mp=i(de,"The reason is everything inside packer definition will get compiled into "),Ms=l(de,"CODE",{});var $c=n(Ms);vp=i($c,"packer_compiled.vim"),$c.forEach(t),hp=i(de," so if you want to update your config inside that "),Ns=l(de,"CODE",{});var Sc=n(Ns);_p=i(Sc,"config"),Sc.forEach(t),Ep=i(de," field, you\u2019ll need to recompile every time. This way, you don\u2019t need to do that, you can just edit "),Rs=l(de,"CODE",{});var Mc=n(Rs);kp=i(Mc,"your/config.lua"),Mc.forEach(t),gp=i(de," file."),de.forEach(t),Zl=c(e),st=l(e,"H2",{id:!0});var Nc=n(st);ia=l(Nc,"A",{href:!0});var Rc=n(ia);yp=i(Rc,"Disabling Built-In Plugins"),Rc.forEach(t),Nc.forEach(t),Ql=c(e),X=l(e,"P",{});var Ln=n(X);Ip=i(Ln,`If you want more speedup, I\u2019d recommend disabling the builtin vim plugins \u2013 or don\u2019t if you\u2019re using them \u2013 like so:
This won\u2019t add `),xs=l(Ln,"EM",{});var xc=n(xs);wp=i(xc,"that"),xc.forEach(t),bp=i(Ln," much, but I like to disable them since I\u2019m not using them anyway."),Ln.forEach(t),Xl=c(e),lt=l(e,"PRE",{class:!0});var $d=n(lt);$d.forEach(t),en=c(e),nt=l(e,"H2",{id:!0});var qc=n(nt);ra=l(qc,"A",{href:!0});var jc=n(ra);Pp=i(jc,"Only Load Packer When Needed"),jc.forEach(t),qc.forEach(t),tn=c(e),pa=l(e,"P",{});var Uc=n(pa);Lp=i(Uc,"If you don\u2019t need packer all the time, just mark it as opt and add this line at the top of the file."),Uc.forEach(t),an=c(e),ot=l(e,"PRE",{class:!0});var Sd=n(ot);Sd.forEach(t),sn=c(e),ee=l(e,"P",{});var An=n(ee);Ap=i(An,"If you need packer, you\u2019ll go to that file and do "),qs=l(An,"CODE",{});var zc=n(qs);Tp=i(zc,"luafile %"),zc.forEach(t),Cp=i(An,", boom, packer gets loaded and you can do packer related stuff."),An.forEach(t),ln=c(e),it=l(e,"H2",{id:!0});var Fc=n(it);ua=l(Fc,"A",{href:!0});var Yc=n(ua);Op=i(Yc,"References"),Yc.forEach(t),Fc.forEach(t),nn=c(e),fa=l(e,"P",{});var Bc=n(fa);Dp=i(Bc,"Here are some references that I\u2019ve used:"),Bc.forEach(t),on=c(e),F=l(e,"UL",{});var ka=n(F);js=l(ka,"LI",{});var Wc=n(js);rt=l(Wc,"A",{href:!0,rel:!0});var Gc=n(rt);Hp=i(Gc,"packer.nvim"),Gc.forEach(t),Wc.forEach(t),$p=c(ka),Us=l(ka,"LI",{});var Jc=n(Us);pt=l(Jc,"A",{href:!0,rel:!0});var Vc=n(pt);Sp=i(Vc,"ray-x config"),Vc.forEach(t),Jc.forEach(t),Mp=c(ka),zs=l(ka,"LI",{});var Kc=n(zs);ut=l(Kc,"A",{href:!0,rel:!0});var Zc=n(ut);Np=i(Zc,"vhyrro config"),Zc.forEach(t),Kc.forEach(t),ka.forEach(t),rn=c(e),ft=l(e,"H1",{id:!0});var Qc=n(ft);ca=l(Qc,"A",{href:!0});var Xc=n(ca);Rp=i(Xc,"Closing Notes"),Xc.forEach(t),Qc.forEach(t),pn=c(e),da=l(e,"P",{});var ed=n(da);xp=i(ed,"Those are not all of my plugins obviously, it would take forever to go through 50 plugins I used :p"),ed.forEach(t),un=c(e),te=l(e,"P",{});var Tn=n(te);qp=i(Tn,"Here\u2019s my startup time \u2013 tested using "),ct=l(Tn,"A",{href:!0,rel:!0});var td=n(ct);jp=i(td,"startuptime.vim"),td.forEach(t),Up=i(Tn," \u2013 for reference."),Tn.forEach(t),fn=c(e),$n(ae.$$.fragment,e),cn=c(e),se=l(e,"UL",{});var Cn=n(se);dt=l(Cn,"LI",{});var On=n(dt);Fs=l(On,"P",{});var ad=n(Fs);zp=i(ad,"Before (fully) lazy loading:"),ad.forEach(t),Fp=c(On),ma=l(On,"PRE",{class:!0});var Md=n(ma);Md.forEach(t),On.forEach(t),Yp=c(Cn),mt=l(Cn,"LI",{});var Dn=n(mt);Ys=l(Dn,"P",{});var sd=n(Ys);Bp=i(sd,"After lazy loading:"),sd.forEach(t),Wp=c(Dn),va=l(Dn,"PRE",{class:!0});var Nd=n(va);Nd.forEach(t),Dn.forEach(t),Cn.forEach(t),dn=c(e),ha=l(e,"P",{});var ld=n(ha);Gp=i(ld,`Slowest 10 plugins (out of 18)~
packer.nvim	50.963
[runtime]	12.193
vim-matchup	10.051
[unknown]	8.848
[vimrc]	6.048
nvim-treesitter-textobjects	1.599
icy	1.500
nvim-treesitter	1.361
LuaSnip	0.478
nvim-ts-context-commentstring	0.165`),ld.forEach(t),mn=c(e),vt=l(e,"PRE",{class:!0});var Rd=n(vt);Rd.forEach(t),this.h()},h(){u(_,"href","#table-of-contents"),u(d,"id","table-of-contents"),u(A,"href","#introduction"),u(ht,"href","#prerequisite"),u(_t,"href","#ui-related-plugins"),u(Et,"href","#devicons"),u(kt,"href","#utility-related-plugins"),u(gt,"href","#vim-easy-align"),u(yt,"href","#telescope"),u(It,"href","#plenary"),u(wt,"href","#vim-test"),u(bt,"href","#language-related-plugins"),u(Pt,"href","#lsp-related-plugins"),u(Lt,"href","#flutter-rust-java-and-typescript-servers"),u(At,"href","#completion-and-snippet"),u(Tt,"href","#dap-client"),u(Ct,"href","#tips"),u(Ot,"href","#loading-configuration"),u(Dt,"href","#disabling-built-in-plugins"),u(Ht,"href","#only-load-packer-when-needed"),u($t,"href","#references"),u(St,"href","#closing-notes"),u(Mt,"href","#introduction"),u(ke,"id","introduction"),u(qt,"href","#prerequisite"),u(ge,"id","prerequisite"),u(ye,"href","https://github.com/wbthomason/packer.nvim"),u(ye,"rel","nofollow"),u(Ut,"href","#ui-related-plugins"),u(we,"id","ui-related-plugins"),u(zt,"href","#devicons"),u(be,"id","devicons"),u(Pe,"href","https://github.com/kyazdani42/nvim-web-devicons"),u(Pe,"rel","nofollow"),u(Le,"class","language-lua"),u(Yt,"href","#utility-related-plugins"),u(Ae,"id","utility-related-plugins"),u(Bt,"href","#vim-easy-align"),u(Te,"id","vim-easy-align"),u(Ce,"href","https://github.com/junegunn/vim-easy-align"),u(Ce,"rel","nofollow"),u(Oe,"class","language-lua"),u(Wt,"href","#telescope"),u(De,"id","telescope"),u(He,"href","https://github.com/nvim-telescope/telescope.nvim"),u(He,"rel","nofollow"),u($e,"class","language-lua"),u(Gt,"href","#plenary"),u(Se,"id","plenary"),u(Me,"href","https://github.com/nvim-lua/plenary.nvim"),u(Me,"rel","nofollow"),u(Ne,"class","language-lua"),u(Jt,"href","#vim-test"),u(Re,"id","vim-test"),u(xe,"href","https://github.com/vim-test/vim-test"),u(xe,"rel","nofollow"),u(qe,"class","language-lua"),u(Vt,"href","#language-related-plugins"),u(je,"id","language-related-plugins"),u(Ue,"href","https://github.com/lervag/vimtex"),u(Ue,"rel","nofollow"),u(ze,"href","https://github.com/plasticboy/vim-markdown"),u(ze,"rel","nofollow"),u(Fe,"class","language-lua"),u(Zt,"href","#lsp-related-plugins"),u(Ye,"id","lsp-related-plugins"),u(Xt,"href","#flutter-rust-java-and-typescript-servers"),u(Be,"id","flutter-rust-java-and-typescript-servers"),u(We,"class","language-lua"),u(aa,"href","#completion-and-snippet"),u(Ge,"id","completion-and-snippet"),u(Je,"href","https://github.com/hrsh7th/nvim-compe"),u(Je,"rel","nofollow"),u(Ve,"class","language-lua"),u(Ke,"href","https://github.com/L3MON4D3/LuaSnip"),u(Ke,"rel","nofollow"),u(la,"href","#dap-client"),u(Ze,"id","dap-client"),u(Qe,"href","https://github.com/mfussenegger/nvim-dap"),u(Qe,"rel","nofollow"),u(Xe,"class","language-lua"),u(na,"href","#tips"),u(et,"id","tips"),u(oa,"href","#loading-configuration"),u(tt,"id","loading-configuration"),u(at,"class","language-lua"),u(ia,"href","#disabling-built-in-plugins"),u(st,"id","disabling-built-in-plugins"),u(lt,"class","language-lua"),u(ra,"href","#only-load-packer-when-needed"),u(nt,"id","only-load-packer-when-needed"),u(ot,"class","language-lua"),u(ua,"href","#references"),u(it,"id","references"),u(rt,"href","https://github.com/wbthomason/packer.nvim"),u(rt,"rel","nofollow"),u(pt,"href","https://github.com/ray-x/nvim/tree/4afc9f52038c96f5d679c11ab46df9984dcde3e0/lua"),u(pt,"rel","nofollow"),u(ut,"href","https://github.com/vhyrro/neovhy/blob/main/lua/plugins.lua"),u(ut,"rel","nofollow"),u(ca,"href","#closing-notes"),u(ft,"id","closing-notes"),u(ct,"href","https://github.com/tweekmonster/startuptime.vim"),u(ct,"rel","nofollow"),u(ma,"class","language-undefined"),u(va,"class","language-undefined"),u(vt,"class","language-undefined")},m(e,r){p(e,d,r),a(d,_),a(_,h),p(e,E,r),p(e,m,r),a(m,v),a(v,k),a(k,A),a(A,xn),a(m,qn),a(m,ga),a(ga,ya),a(ya,ht),a(ht,jn),a(m,Un),a(m,me),a(me,Ia),a(Ia,_t),a(_t,zn),a(me,Fn),a(me,wa),a(wa,ba),a(ba,Et),a(Et,Yn),a(m,Bn),a(m,ve),a(ve,Pa),a(Pa,kt),a(kt,Wn),a(ve,Gn),a(ve,q),a(q,La),a(La,gt),a(gt,Jn),a(q,Vn),a(q,Aa),a(Aa,yt),a(yt,Kn),a(q,Zn),a(q,Ta),a(Ta,It),a(It,Qn),a(q,Xn),a(q,Ca),a(Ca,wt),a(wt,eo),a(m,to),a(m,Oa),a(Oa,Da),a(Da,bt),a(bt,ao),a(m,so),a(m,he),a(he,Ha),a(Ha,Pt),a(Pt,lo),a(he,no),a(he,_e),a(_e,$a),a($a,Lt),a(Lt,oo),a(_e,io),a(_e,Sa),a(Sa,At),a(At,ro),a(m,po),a(m,Ma),a(Ma,Na),a(Na,Tt),a(Tt,uo),a(m,fo),a(m,Ee),a(Ee,Ra),a(Ra,Ct),a(Ct,co),a(Ee,mo),a(Ee,j),a(j,xa),a(xa,Ot),a(Ot,vo),a(j,ho),a(j,qa),a(qa,Dt),a(Dt,_o),a(j,Eo),a(j,ja),a(ja,Ht),a(Ht,ko),a(j,go),a(j,Ua),a(Ua,$t),a($t,yo),a(m,Io),a(m,za),a(za,Fa),a(Fa,St),a(St,wo),p(e,Gs,r),p(e,ke,r),a(ke,Mt),a(Mt,bo),p(e,Js,r),p(e,Nt,r),a(Nt,Rt),a(Rt,Ya),a(Ya,Po),a(Rt,Lo),p(e,Vs,r),p(e,W,r),a(W,Ao),a(W,Ba),a(Ba,To),a(W,Co),p(e,Ks,r),p(e,xt,r),a(xt,Oo),p(e,Zs,r),p(e,ge,r),a(ge,qt),a(qt,Do),p(e,Qs,r),p(e,G,r),a(G,Ho),a(G,ye),a(ye,$o),a(G,So),p(e,Xs,r),p(e,Ie,r),a(Ie,Wa),a(Wa,Mo),a(Ie,No),p(e,el,r),p(e,jt,r),a(jt,Ga),a(Ga,Ro),p(e,tl,r),p(e,we,r),a(we,Ut),a(Ut,xo),p(e,al,r),p(e,be,r),a(be,zt),a(zt,qo),p(e,sl,r),p(e,T,r),a(T,jo),a(T,Pe),a(Pe,Uo),a(T,zo),a(T,Ja),a(Ja,Fo),a(T,Yo),a(T,Va),a(Va,Bo),a(T,Wo),p(e,ll,r),p(e,Ft,r),a(Ft,Go),p(e,nl,r),p(e,Le,r),Le.innerHTML=rd,p(e,ol,r),p(e,Ae,r),a(Ae,Yt),a(Yt,Jo),p(e,il,r),p(e,Te,r),a(Te,Bt),a(Bt,Vo),p(e,rl,r),p(e,P,r),a(P,Ce),a(Ce,Ko),a(P,Zo),a(P,Ka),a(Ka,Qo),a(P,Xo),a(P,Za),a(Za,ei),a(P,ti),a(P,Qa),a(Qa,ai),a(P,si),p(e,pl,r),p(e,Oe,r),Oe.innerHTML=pd,p(e,ul,r),p(e,J,r),a(J,li),a(J,Xa),a(Xa,ni),a(J,oi),p(e,fl,r),p(e,De,r),a(De,Wt),a(Wt,ii),p(e,cl,r),p(e,y,r),a(y,ri),a(y,He),a(He,pi),a(y,ui),a(y,es),a(es,fi),a(y,ci),a(y,ts),a(ts,di),a(y,mi),a(y,as),a(as,vi),a(y,hi),a(y,ss),a(ss,_i),a(y,Ei),p(e,dl,r),p(e,$e,r),$e.innerHTML=ud,p(e,ml,r),p(e,I,r),a(I,ki),a(I,ls),a(ls,gi),a(I,yi),a(I,ns),a(ns,Ii),a(I,wi),a(I,os),a(os,bi),a(I,Pi),a(I,is),a(is,Li),a(I,Ai),a(I,rs),a(rs,Ti),a(I,Ci),p(e,vl,r),p(e,Se,r),a(Se,Gt),a(Gt,Oi),p(e,hl,r),p(e,C,r),a(C,Di),a(C,Me),a(Me,Hi),a(C,$i),a(C,ps),a(ps,Si),a(C,Mi),a(C,us),a(us,Ni),a(C,Ri),p(e,_l,r),p(e,Ne,r),Ne.innerHTML=fd,p(e,El,r),p(e,Re,r),a(Re,Jt),a(Jt,xi),p(e,kl,r),p(e,V,r),a(V,qi),a(V,xe),a(xe,ji),a(V,Ui),p(e,gl,r),p(e,qe,r),qe.innerHTML=cd,p(e,yl,r),p(e,K,r),a(K,zi),a(K,fs),a(fs,Fi),a(K,Yi),p(e,Il,r),p(e,je,r),a(je,Vt),a(Vt,Bi),p(e,wl,r),p(e,O,r),a(O,Wi),a(O,Ue),a(Ue,Gi),a(O,Ji),a(O,ze),a(ze,Vi),a(O,Ki),a(O,cs),a(cs,Zi),a(O,Qi),p(e,bl,r),p(e,Kt,r),a(Kt,Xi),p(e,Pl,r),p(e,Fe,r),Fe.innerHTML=dd,p(e,Ll,r),p(e,D,r),a(D,er),a(D,ds),a(ds,tr),a(D,ar),a(D,ms),a(ms,sr),a(D,lr),a(D,vs),a(vs,nr),a(D,or),p(e,Al,r),p(e,Ye,r),a(Ye,Zt),a(Zt,ir),p(e,Tl,r),p(e,H,r),a(H,rr),a(H,hs),a(hs,pr),a(H,ur),a(H,_s),a(_s,fr),a(H,cr),a(H,Es),a(Es,dr),a(H,mr),p(e,Cl,r),p(e,Qt,r),a(Qt,vr),p(e,Ol,r),p(e,Be,r),a(Be,Xt),a(Xt,hr),p(e,Dl,r),p(e,U,r),a(U,_r),a(U,ks),a(ks,Er),a(U,kr),a(U,gs),a(gs,gr),a(U,yr),p(e,Hl,r),p(e,ea,r),a(ea,Ir),p(e,$l,r),p(e,We,r),We.innerHTML=md,p(e,Sl,r),p(e,ta,r),a(ta,wr),p(e,Ml,r),Sn(Z,e,r),p(e,Nl,r),p(e,Ge,r),a(Ge,aa),a(aa,br),p(e,Rl,r),Sn(Q,e,r),p(e,xl,r),p(e,b,r),a(b,Pr),a(b,Je),a(Je,Lr),a(b,Ar),a(b,ys),a(ys,Tr),a(b,Cr),a(b,Is),a(Is,Or),a(b,Dr),a(b,ws),a(ws,Hr),a(b,$r),p(e,ql,r),p(e,sa,r),a(sa,Sr),p(e,jl,r),p(e,Ve,r),Ve.innerHTML=vd,p(e,Ul,r),p(e,$,r),a($,Mr),a($,bs),a(bs,Nr),a($,Rr),a($,Ps),a(Ps,xr),a($,qr),a($,Ke),a(Ke,jr),a($,Ur),p(e,zl,r),p(e,Ze,r),a(Ze,la),a(la,zr),p(e,Fl,r),p(e,w,r),a(w,Fr),a(w,Qe),a(Qe,Yr),a(w,Br),a(w,Ls),a(Ls,Wr),a(w,Gr),a(w,As),a(As,Jr),a(w,Vr),a(w,Ts),a(Ts,Kr),a(w,Zr),a(w,Cs),a(Cs,Qr),a(w,Xr),p(e,Yl,r),p(e,Xe,r),Xe.innerHTML=hd,p(e,Bl,r),p(e,et,r),a(et,na),a(na,ep),p(e,Wl,r),p(e,tt,r),a(tt,oa),a(oa,tp),p(e,Gl,r),p(e,z,r),a(z,ap),a(z,Os),a(Os,sp),a(z,lp),a(z,Ds),a(Ds,np),a(z,op),p(e,Jl,r),p(e,S,r),a(S,ip),a(S,Hs),a(Hs,rp),a(S,pp),a(S,$s),a($s,up),a(S,fp),a(S,Ss),a(Ss,cp),a(S,dp),p(e,Vl,r),p(e,at,r),at.innerHTML=_d,p(e,Kl,r),p(e,M,r),a(M,mp),a(M,Ms),a(Ms,vp),a(M,hp),a(M,Ns),a(Ns,_p),a(M,Ep),a(M,Rs),a(Rs,kp),a(M,gp),p(e,Zl,r),p(e,st,r),a(st,ia),a(ia,yp),p(e,Ql,r),p(e,X,r),a(X,Ip),a(X,xs),a(xs,wp),a(X,bp),p(e,Xl,r),p(e,lt,r),lt.innerHTML=Ed,p(e,en,r),p(e,nt,r),a(nt,ra),a(ra,Pp),p(e,tn,r),p(e,pa,r),a(pa,Lp),p(e,an,r),p(e,ot,r),ot.innerHTML=kd,p(e,sn,r),p(e,ee,r),a(ee,Ap),a(ee,qs),a(qs,Tp),a(ee,Cp),p(e,ln,r),p(e,it,r),a(it,ua),a(ua,Op),p(e,nn,r),p(e,fa,r),a(fa,Dp),p(e,on,r),p(e,F,r),a(F,js),a(js,rt),a(rt,Hp),a(F,$p),a(F,Us),a(Us,pt),a(pt,Sp),a(F,Mp),a(F,zs),a(zs,ut),a(ut,Np),p(e,rn,r),p(e,ft,r),a(ft,ca),a(ca,Rp),p(e,pn,r),p(e,da,r),a(da,xp),p(e,un,r),p(e,te,r),a(te,qp),a(te,ct),a(ct,jp),a(te,Up),p(e,fn,r),Sn(ae,e,r),p(e,cn,r),p(e,se,r),a(se,dt),a(dt,Fs),a(Fs,zp),a(dt,Fp),a(dt,ma),ma.innerHTML=gd,a(se,Yp),a(se,mt),a(mt,Ys),a(Ys,Bp),a(mt,Wp),a(mt,va),va.innerHTML=yd,p(e,dn,r),p(e,ha,r),a(ha,Gp),p(e,mn,r),p(e,vt,r),vt.innerHTML=Id,vn=!0},p(e,r){const Bs={};r&2&&(Bs.$$scope={dirty:r,ctx:e}),Z.$set(Bs);const g={};r&2&&(g.$$scope={dirty:r,ctx:e}),Q.$set(g);const Ws={};r&2&&(Ws.$$scope={dirty:r,ctx:e}),ae.$set(Ws)},i(e){vn||(Mn(Z.$$.fragment,e),Mn(Q.$$.fragment,e),Mn(ae.$$.fragment,e),vn=!0)},o(e){Nn(Z.$$.fragment,e),Nn(Q.$$.fragment,e),Nn(ae.$$.fragment,e),vn=!1},d(e){e&&t(d),e&&t(E),e&&t(m),e&&t(Gs),e&&t(ke),e&&t(Js),e&&t(Nt),e&&t(Vs),e&&t(W),e&&t(Ks),e&&t(xt),e&&t(Zs),e&&t(ge),e&&t(Qs),e&&t(G),e&&t(Xs),e&&t(Ie),e&&t(el),e&&t(jt),e&&t(tl),e&&t(we),e&&t(al),e&&t(be),e&&t(sl),e&&t(T),e&&t(ll),e&&t(Ft),e&&t(nl),e&&t(Le),e&&t(ol),e&&t(Ae),e&&t(il),e&&t(Te),e&&t(rl),e&&t(P),e&&t(pl),e&&t(Oe),e&&t(ul),e&&t(J),e&&t(fl),e&&t(De),e&&t(cl),e&&t(y),e&&t(dl),e&&t($e),e&&t(ml),e&&t(I),e&&t(vl),e&&t(Se),e&&t(hl),e&&t(C),e&&t(_l),e&&t(Ne),e&&t(El),e&&t(Re),e&&t(kl),e&&t(V),e&&t(gl),e&&t(qe),e&&t(yl),e&&t(K),e&&t(Il),e&&t(je),e&&t(wl),e&&t(O),e&&t(bl),e&&t(Kt),e&&t(Pl),e&&t(Fe),e&&t(Ll),e&&t(D),e&&t(Al),e&&t(Ye),e&&t(Tl),e&&t(H),e&&t(Cl),e&&t(Qt),e&&t(Ol),e&&t(Be),e&&t(Dl),e&&t(U),e&&t(Hl),e&&t(ea),e&&t($l),e&&t(We),e&&t(Sl),e&&t(ta),e&&t(Ml),Rn(Z,e),e&&t(Nl),e&&t(Ge),e&&t(Rl),Rn(Q,e),e&&t(xl),e&&t(b),e&&t(ql),e&&t(sa),e&&t(jl),e&&t(Ve),e&&t(Ul),e&&t($),e&&t(zl),e&&t(Ze),e&&t(Fl),e&&t(w),e&&t(Yl),e&&t(Xe),e&&t(Bl),e&&t(et),e&&t(Wl),e&&t(tt),e&&t(Gl),e&&t(z),e&&t(Jl),e&&t(S),e&&t(Vl),e&&t(at),e&&t(Kl),e&&t(M),e&&t(Zl),e&&t(st),e&&t(Ql),e&&t(X),e&&t(Xl),e&&t(lt),e&&t(en),e&&t(nt),e&&t(tn),e&&t(pa),e&&t(an),e&&t(ot),e&&t(sn),e&&t(ee),e&&t(ln),e&&t(it),e&&t(nn),e&&t(fa),e&&t(on),e&&t(F),e&&t(rn),e&&t(ft),e&&t(pn),e&&t(da),e&&t(un),e&&t(te),e&&t(fn),Rn(ae,e),e&&t(cn),e&&t(se),e&&t(dn),e&&t(ha),e&&t(mn),e&&t(vt)}}}function Gd(L){let d,_;const h=[L[0],id];let E={$$slots:{default:[Wd]},$$scope:{ctx:L}};for(let m=0;m<h.length;m+=1)E=Kp(E,h[m]);return d=new zd({props:E}),{c(){Hn(d.$$.fragment)},l(m){$n(d.$$.fragment,m)},m(m,v){Sn(d,m,v),_=!0},p(m,[v]){const k=v&1?Ud(h,[v&1&&nd(m[0]),v&0&&nd(id)]):{};v&2&&(k.$$scope={dirty:v,ctx:m}),d.$set(k)},i(m){_||(Mn(d.$$.fragment,m),_=!0)},o(m){Nn(d.$$.fragment,m),_=!1},d(m){Rn(d,m)}}}const id={draft:!0,title:"Improving Neovim Startup Time Using Lazy Load",date:"2021-06-20T00:00:00.000Z",desc:"A post where I explain how I made my neovim startup time from ~200ms to <100ms with ~50 plugins",tags:["neovim"]};function Jd(L,d,_){return L.$$set=h=>{_(0,d=Kp(Kp({},d),od(h)))},d=od(d),[d]}class sm extends xd{constructor(d){super();qd(this,d,Jd,Gd,jd,{})}}export{sm as default,id as metadata};
