import{S as qd,i as Gd,s as Wd,C as Yu,w as Is,x as Cs,y as Ls,z as Ud,A as ld,q as Ps,o as $s,B as As,U as cd,e as t,t as o,k as r,c as e,a as p,h as l,d as s,m as k,b as u,a1 as id,g as i,F as a}from"../../../chunks/vendor-a3554607.js";import{P as Yd}from"../../../chunks/post-1875198a.js";import{U as Ga}from"../../../chunks/Update-e4617bdb.js";import"../../../chunks/stores-5109c37e.js";import"../../../chunks/Progress-912bc64e.js";import"../../../chunks/theme-4e4001f1.js";/* empty css                                      *//* empty css                                                           */function zd(L){let f,h;return{c(){f=t("p"),h=o("Thanks @Evgeni for the suggestion on creating a table for each section truncation width, it\u2019s easier to keep track of which component has how many width.")},l(d){f=e(d,"P",{});var w=p(f);h=l(w,"Thanks @Evgeni for the suggestion on creating a table for each section truncation width, it\u2019s easier to keep track of which component has how many width."),w.forEach(s)},m(d,w){i(d,f,w),a(f,h)},d(d){d&&s(f)}}}function Kd(L){let f,h;return{c(){f=t("p"),h=o("Now since I made my own colourscheme using Lush, I defined them directly in the [spec file][lush-theme]")},l(d){f=e(d,"P",{});var w=p(f);h=l(w,"Now since I made my own colourscheme using Lush, I defined them directly in the [spec file][lush-theme]"),w.forEach(s)},m(d,w){i(d,f,w),a(f,h)},d(d){d&&s(f)}}}function Qd(L){let f,h;return{c(){f=t("p"),h=o("I now use the blank separator.")},l(d){f=e(d,"P",{});var w=p(f);h=l(w,"I now use the blank separator."),w.forEach(s)},m(d,w){i(d,f,w),a(f,h)},d(d){d&&s(f)}}}function Zd(L){let f,h,d,w,m,v,_,P;return{c(){f=t("p"),h=o("Thanks to @Evgeni for pointing me out, I moved the "),d=t("code"),w=o("mode"),m=o(" table outside of the function because previously I was putting it inside a function which will get created every time the function is executed."),v=r(),_=t("br"),P=o("\nAlso, since I moved from `vim.fn.mode` to `vim.api.nvim_get_mode().mode`, there are *a lot* of missing keys on my `mode` table; Hence a metatable is used so it will give me an `Unknown` mode instead of throwing an error when there's no matching key on the table. (Also thanks @Evgeni :)")},l(g){f=e(g,"P",{});var E=p(f);h=l(E,"Thanks to @Evgeni for pointing me out, I moved the "),d=e(E,"CODE",{});var B=p(d);w=l(B,"mode"),B.forEach(s),m=l(E," table outside of the function because previously I was putting it inside a function which will get created every time the function is executed."),E.forEach(s),v=k(g),_=e(g,"BR",{}),P=l(g,"\nAlso, since I moved from `vim.fn.mode` to `vim.api.nvim_get_mode().mode`, there are *a lot* of missing keys on my `mode` table; Hence a metatable is used so it will give me an `Unknown` mode instead of throwing an error when there's no matching key on the table. (Also thanks @Evgeni :)")},m(g,E){i(g,f,E),a(f,h),a(f,d),a(d,w),a(f,m),i(g,v,E),i(g,_,E),i(g,P,E)},d(g){g&&s(f),g&&s(v),g&&s(_),g&&s(P)}}}function Jd(L){let f,h,d,w,m,v,_,P;return{c(){f=t("p"),h=o("I display this at my "),d=t("code"),w=o("tabline"),m=o(" instead since nvim-bufferline now supports custom section. "),v=t("a"),_=o("Here\u2019s"),P=o(" the relevant file for that. It will show the available diagnostics at the top right corner of the screen and update them in real-time."),this.h()},l(g){f=e(g,"P",{});var E=p(f);h=l(E,"I display this at my "),d=e(E,"CODE",{});var B=p(d);w=l(B,"tabline"),B.forEach(s),m=l(E," instead since nvim-bufferline now supports custom section. "),v=e(E,"A",{href:!0,rel:!0});var Q=p(v);_=l(Q,"Here\u2019s"),Q.forEach(s),P=l(E," the relevant file for that. It will show the available diagnostics at the top right corner of the screen and update them in real-time."),E.forEach(s),this.h()},h(){u(v,"href","https://github.com/elianiva/dotfiles/blob/950ba38bda8230da8071fc72cf3d8617d6288565/config/nvim/lua/plugins/nvim-bufferline.lua"),u(v,"rel","nofollow")},m(g,E){i(g,f,E),a(f,h),a(f,d),a(d,w),a(f,m),a(f,v),a(v,_),a(f,P)},d(g){g&&s(f)}}}function Xd(L){let f,h,d,w,m;return{c(){f=t("p"),h=o("I\u2019ve changed "),d=t("a"),w=o("my statusline"),m=o(" quite a bit so it won\u2019t look the same as the one you see in this post."),this.h()},l(v){f=e(v,"P",{});var _=p(f);h=l(_,"I\u2019ve changed "),d=e(_,"A",{href:!0,rel:!0});var P=p(d);w=l(P,"my statusline"),P.forEach(s),m=l(_," quite a bit so it won\u2019t look the same as the one you see in this post."),_.forEach(s),this.h()},h(){u(d,"href","https://github.com/elianiva/dotfiles/blob/950ba38bda8230da8071fc72cf3d8617d6288565/config/nvim/lua/modules/statusline.lua"),u(d,"rel","nofollow")},m(v,_){i(v,f,_),a(f,h),a(f,d),a(d,w),a(f,m)},d(v){v&&s(f)}}}function nm(L){let f,h,d,w,m,v,_,P,g,E,B,Q,Ss,go,yo,En,Wa,Ds,Eo,bo,y,Ua,Ms,Io,Co,Ya,xs,Lo,Po,za,Ts,$o,Ao,Ka,Hs,So,Do,Qa,Os,Mo,xo,Za,Ns,To,Ho,Ja,Vs,Oo,No,Xa,Bs,Vo,Bo,nt,Rs,Ro,Fo,st,Fs,jo,qo,bn,at,js,Go,Wo,R,tt,qs,Uo,Yo,et,Gs,zo,Ko,pt,Ws,Qo,Zo,ot,Us,Jo,Xo,lt,ct,Ys,nl,sl,it,ut,zs,al,_e,In,Ks,tl,ge,Z,el,Cn,pl,ol,ye,Ln,Qs,ll,Ee,Zs,cl,be,$,rt,il,ul,kt,Pn,rl,kl,ft,$n,fl,dl,dt,An,ml,hl,Sn,wl,Dn,vl,_l,gl,mt,yl,El,ht,bl,Ie,Mn,Js,Il,Ce,xn,Xs,Cl,Le,K,Ll,wt,Pl,$l,vt,Al,Pe,Tn,na,Sl,$e,H,Dl,_t,Ml,xl,gt,Tl,Hl,yt,Ol,Nl,Ae,Hn,rd=`<code class="language-lua"><span class="token keyword">local</span> fn <span class="token operator">=</span> vim<span class="token punctuation">.</span>fn
<span class="token keyword">local</span> api <span class="token operator">=</span> vim<span class="token punctuation">.</span>api
<span class="token keyword">local</span> M <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span></code>`,Se,F,Vl,Et,Bl,Rl,bt,Fl,jl,De,On,kd=`<code class="language-lua">M<span class="token punctuation">.</span>trunc_width <span class="token operator">=</span> <span class="token function">setmetatable</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
  <span class="token comment">-- You can adjust these values to your liking, if you want</span>
  <span class="token comment">-- I promise this will all makes sense later :)</span>
  mode       <span class="token operator">=</span> <span class="token number">80</span><span class="token punctuation">,</span>
  git_status <span class="token operator">=</span> <span class="token number">90</span><span class="token punctuation">,</span>
  filename   <span class="token operator">=</span> <span class="token number">140</span><span class="token punctuation">,</span>
  line_col   <span class="token operator">=</span> <span class="token number">60</span><span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>
  __index <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> <span class="token number">80</span> <span class="token comment">-- handle edge cases, if there's any</span>
  <span class="token keyword">end</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>

M<span class="token punctuation">.</span>is_truncated <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>_<span class="token punctuation">,</span> width<span class="token punctuation">)</span>
  <span class="token keyword">local</span> current_width <span class="token operator">=</span> api<span class="token punctuation">.</span><span class="token function">nvim_win_get_width</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
  <span class="token keyword">return</span> current_width <span class="token operator">&lt;</span> width
<span class="token keyword">end</span></code>`,Me,j,ql,It,Gl,Wl,Ct,Ul,Yl,xe,J,Te,Nn,sa,zl,He,aa,Kl,Oe,Vn,fd=`<code class="language-lua">M<span class="token punctuation">.</span>colors <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
  active        <span class="token operator">=</span> <span class="token string">'%#StatusLine#'</span><span class="token punctuation">,</span>
  inactive      <span class="token operator">=</span> <span class="token string">'%#StatuslineNC#'</span><span class="token punctuation">,</span>
  mode          <span class="token operator">=</span> <span class="token string">'%#Mode#'</span><span class="token punctuation">,</span>
  mode_alt      <span class="token operator">=</span> <span class="token string">'%#ModeAlt#'</span><span class="token punctuation">,</span>
  git           <span class="token operator">=</span> <span class="token string">'%#Git#'</span><span class="token punctuation">,</span>
  git_alt       <span class="token operator">=</span> <span class="token string">'%#GitAlt#'</span><span class="token punctuation">,</span>
  filetype      <span class="token operator">=</span> <span class="token string">'%#Filetype#'</span><span class="token punctuation">,</span>
  filetype_alt  <span class="token operator">=</span> <span class="token string">'%#FiletypeAlt#'</span><span class="token punctuation">,</span>
  line_col      <span class="token operator">=</span> <span class="token string">'%#LineCol#'</span><span class="token punctuation">,</span>
  line_col_alt  <span class="token operator">=</span> <span class="token string">'%#LineColAlt#'</span><span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span></code>`,Ne,X,Ql,Lt,Zl,Jl,Ve,nn,Be,Bn,dd=`<code class="language-lua"><span class="token keyword">local</span> set_hl <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>group<span class="token punctuation">,</span> options<span class="token punctuation">)</span>
  <span class="token keyword">local</span> bg <span class="token operator">=</span> options<span class="token punctuation">.</span>bg <span class="token operator">==</span> <span class="token keyword">nil</span> <span class="token keyword">and</span> <span class="token string">''</span> <span class="token keyword">or</span> <span class="token string">'guibg='</span> <span class="token operator">..</span> options<span class="token punctuation">.</span>bg
  <span class="token keyword">local</span> fg <span class="token operator">=</span> options<span class="token punctuation">.</span>fg <span class="token operator">==</span> <span class="token keyword">nil</span> <span class="token keyword">and</span> <span class="token string">''</span> <span class="token keyword">or</span> <span class="token string">'guifg='</span> <span class="token operator">..</span> options<span class="token punctuation">.</span>fg
  <span class="token keyword">local</span> gui <span class="token operator">=</span> options<span class="token punctuation">.</span>gui <span class="token operator">==</span> <span class="token keyword">nil</span> <span class="token keyword">and</span> <span class="token string">''</span> <span class="token keyword">or</span> <span class="token string">'gui='</span> <span class="token operator">..</span> options<span class="token punctuation">.</span>gui

  vim<span class="token punctuation">.</span><span class="token function">cmd</span><span class="token punctuation">(</span>string<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">'hi %s %s %s %s'</span><span class="token punctuation">,</span> group<span class="token punctuation">,</span> bg<span class="token punctuation">,</span> fg<span class="token punctuation">,</span> gui<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">end</span>

<span class="token comment">-- you can of course pick whatever colour you want, I picked these colours</span>
<span class="token comment">-- because I use Gruvbox and I like them</span>
<span class="token keyword">local</span> highlights <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
  <span class="token punctuation">&#123;</span><span class="token string">'StatusLine'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> fg <span class="token operator">=</span> <span class="token string">'#3C3836'</span><span class="token punctuation">,</span> bg <span class="token operator">=</span> <span class="token string">'#EBDBB2'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#123;</span><span class="token string">'StatusLineNC'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> fg <span class="token operator">=</span> <span class="token string">'#3C3836'</span><span class="token punctuation">,</span> bg <span class="token operator">=</span> <span class="token string">'#928374'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#123;</span><span class="token string">'Mode'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> bg <span class="token operator">=</span> <span class="token string">'#928374'</span><span class="token punctuation">,</span> fg <span class="token operator">=</span> <span class="token string">'#1D2021'</span><span class="token punctuation">,</span> gui<span class="token operator">=</span><span class="token string">"bold"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#123;</span><span class="token string">'LineCol'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> bg <span class="token operator">=</span> <span class="token string">'#928374'</span><span class="token punctuation">,</span> fg <span class="token operator">=</span> <span class="token string">'#1D2021'</span><span class="token punctuation">,</span> gui<span class="token operator">=</span><span class="token string">"bold"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#123;</span><span class="token string">'Git'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> bg <span class="token operator">=</span> <span class="token string">'#504945'</span><span class="token punctuation">,</span> fg <span class="token operator">=</span> <span class="token string">'#EBDBB2'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#123;</span><span class="token string">'Filetype'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> bg <span class="token operator">=</span> <span class="token string">'#504945'</span><span class="token punctuation">,</span> fg <span class="token operator">=</span> <span class="token string">'#EBDBB2'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#123;</span><span class="token string">'Filename'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> bg <span class="token operator">=</span> <span class="token string">'#504945'</span><span class="token punctuation">,</span> fg <span class="token operator">=</span> <span class="token string">'#EBDBB2'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#123;</span><span class="token string">'ModeAlt'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> bg <span class="token operator">=</span> <span class="token string">'#504945'</span><span class="token punctuation">,</span> fg <span class="token operator">=</span> <span class="token string">'#928374'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#123;</span><span class="token string">'GitAlt'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> bg <span class="token operator">=</span> <span class="token string">'#3C3836'</span><span class="token punctuation">,</span> fg <span class="token operator">=</span> <span class="token string">'#504945'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#123;</span><span class="token string">'LineColAlt'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> bg <span class="token operator">=</span> <span class="token string">'#504945'</span><span class="token punctuation">,</span> fg <span class="token operator">=</span> <span class="token string">'#928374'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#123;</span><span class="token string">'FiletypeAlt'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> bg <span class="token operator">=</span> <span class="token string">'#3C3836'</span><span class="token punctuation">,</span> fg <span class="token operator">=</span> <span class="token string">'#504945'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">for</span> _<span class="token punctuation">,</span> highlight <span class="token keyword">in</span> <span class="token function">ipairs</span><span class="token punctuation">(</span>highlights<span class="token punctuation">)</span> <span class="token keyword">do</span>
  <span class="token function">set_hl</span><span class="token punctuation">(</span>highlight<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> highlight<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token keyword">end</span></code>`,Re,ta,Xl,Fe,Rn,ea,nc,je,sn,sc,Fn,ac,tc,qe,jn,md=`<code class="language-lua"><span class="token comment">-- I keep this here just in case I changed my mind so I don't have to find these icons again when I need them</span>
<span class="token comment">-- you can of course just store one of them if you want</span>
M<span class="token punctuation">.</span>separators <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
  arrow <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token string">'\uE0B0'</span><span class="token punctuation">,</span> <span class="token string">'\uE0B2'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  rounded <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token string">'\uE0B4'</span><span class="token punctuation">,</span> <span class="token string">'\uE0B6'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  blank <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token string">''</span><span class="token punctuation">,</span> <span class="token string">''</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">local</span> active_sep <span class="token operator">=</span> <span class="token string">'blank'</span></code>`,Ge,pa,ec,We,an,Ue,qn,oa,pc,Ye,la,oc,ze,Gn,hd=`<code class="language-lua">M<span class="token punctuation">.</span>modes <span class="token operator">=</span> <span class="token function">setmetatable</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
  <span class="token punctuation">[</span><span class="token string">'n'</span><span class="token punctuation">]</span>  <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'Normal'</span><span class="token punctuation">,</span> <span class="token string">'N'</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
  <span class="token punctuation">[</span><span class="token string">'no'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'N\xB7Pending'</span><span class="token punctuation">,</span> <span class="token string">'N\xB7P'</span><span class="token punctuation">&#125;</span> <span class="token punctuation">;</span>
  <span class="token punctuation">[</span><span class="token string">'v'</span><span class="token punctuation">]</span>  <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'Visual'</span><span class="token punctuation">,</span> <span class="token string">'V'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
  <span class="token punctuation">[</span><span class="token string">'V'</span><span class="token punctuation">]</span>  <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'V\xB7Line'</span><span class="token punctuation">,</span> <span class="token string">'V\xB7L'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
  <span class="token punctuation">[</span><span class="token string">''</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'V\xB7Block'</span><span class="token punctuation">,</span> <span class="token string">'V\xB7B'</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
  <span class="token punctuation">[</span><span class="token string">'s'</span><span class="token punctuation">]</span>  <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'Select'</span><span class="token punctuation">,</span> <span class="token string">'S'</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
  <span class="token punctuation">[</span><span class="token string">'S'</span><span class="token punctuation">]</span>  <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'S\xB7Line'</span><span class="token punctuation">,</span> <span class="token string">'S\xB7L'</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
  <span class="token punctuation">[</span><span class="token string">''</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'S\xB7Block'</span><span class="token punctuation">,</span> <span class="token string">'S\xB7B'</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
  <span class="token punctuation">[</span><span class="token string">'i'</span><span class="token punctuation">]</span>  <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'Insert'</span><span class="token punctuation">,</span> <span class="token string">'I'</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
  <span class="token punctuation">[</span><span class="token string">'ic'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'Insert'</span><span class="token punctuation">,</span> <span class="token string">'I'</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
  <span class="token punctuation">[</span><span class="token string">'R'</span><span class="token punctuation">]</span>  <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'Replace'</span><span class="token punctuation">,</span> <span class="token string">'R'</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
  <span class="token punctuation">[</span><span class="token string">'Rv'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'V\xB7Replace'</span><span class="token punctuation">,</span> <span class="token string">'V\xB7R'</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
  <span class="token punctuation">[</span><span class="token string">'c'</span><span class="token punctuation">]</span>  <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'Command'</span><span class="token punctuation">,</span> <span class="token string">'C'</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
  <span class="token punctuation">[</span><span class="token string">'cv'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'Vim\xB7Ex '</span><span class="token punctuation">,</span> <span class="token string">'V\xB7E'</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
  <span class="token punctuation">[</span><span class="token string">'ce'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'Ex '</span><span class="token punctuation">,</span> <span class="token string">'E'</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
  <span class="token punctuation">[</span><span class="token string">'r'</span><span class="token punctuation">]</span>  <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'Prompt '</span><span class="token punctuation">,</span> <span class="token string">'P'</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
  <span class="token punctuation">[</span><span class="token string">'rm'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'More '</span><span class="token punctuation">,</span> <span class="token string">'M'</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
  <span class="token punctuation">[</span><span class="token string">'r?'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'Confirm '</span><span class="token punctuation">,</span> <span class="token string">'C'</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
  <span class="token punctuation">[</span><span class="token string">'!'</span><span class="token punctuation">]</span>  <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'Shell '</span><span class="token punctuation">,</span> <span class="token string">'S'</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
  <span class="token punctuation">[</span><span class="token string">'t'</span><span class="token punctuation">]</span>  <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'Terminal '</span><span class="token punctuation">,</span> <span class="token string">'T'</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>
  __index <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
      <span class="token keyword">return</span> <span class="token punctuation">&#123;</span><span class="token string">'Unknown'</span><span class="token punctuation">,</span> <span class="token string">'U'</span><span class="token punctuation">&#125;</span> <span class="token comment">-- handle edge cases</span>
  <span class="token keyword">end</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>

M<span class="token punctuation">.</span>get_current_mode <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token keyword">local</span> current_mode <span class="token operator">=</span> api<span class="token punctuation">.</span><span class="token function">nvim_get_mode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>mode

  <span class="token keyword">if</span> self<span class="token punctuation">:</span><span class="token function">is_truncated</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>trunc_width<span class="token punctuation">.</span>mode<span class="token punctuation">)</span> <span class="token keyword">then</span>
    <span class="token keyword">return</span> string<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">' %s '</span><span class="token punctuation">,</span> modes<span class="token punctuation">[</span>current_mode<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token function">upper</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token keyword">end</span>

  <span class="token keyword">return</span> string<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">' %s '</span><span class="token punctuation">,</span> modes<span class="token punctuation">[</span>current_mode<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token function">upper</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">end</span></code>`,Ke,b,lc,Pt,cc,ic,$t,uc,rc,At,kc,fc,St,dc,mc,Dt,hc,wc,Mt,vc,_c,xt,gc,yc,Qe,tn,Ec,Tt,bc,Ic,Ze,A,Cc,Ht,Lc,Pc,Ot,$c,Ac,Nt,Sc,Dc,Vt,Mc,xc,Bt,Tc,Hc,Rt,Oc,Nc,Je,en,Xe,Wn,ca,Vc,np,q,Bc,Un,Rc,Fc,Ft,jc,qc,sp,Yn,wd=`<code class="language-lua">M<span class="token punctuation">.</span>get_git_status <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span>
  <span class="token comment">-- use fallback because it doesn't set this variable on the initial &#96;BufEnter&#96;</span>
  <span class="token keyword">local</span> signs <span class="token operator">=</span> vim<span class="token punctuation">.</span>b<span class="token punctuation">.</span>gitsigns_status_dict <span class="token keyword">or</span> <span class="token punctuation">&#123;</span>head <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">,</span> added <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> changed <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> removed <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">&#125;</span>
  <span class="token keyword">local</span> is_head_empty <span class="token operator">=</span> signs<span class="token punctuation">.</span>head <span class="token operator">~=</span> <span class="token string">''</span>

  <span class="token keyword">if</span> self<span class="token punctuation">:</span><span class="token function">is_truncated</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>trunc_width<span class="token punctuation">.</span>git_status<span class="token punctuation">)</span> <span class="token keyword">then</span>
    <span class="token keyword">return</span> is_head_empty <span class="token keyword">and</span> string<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">' \uE725 %s '</span><span class="token punctuation">,</span> signs<span class="token punctuation">.</span>head <span class="token keyword">or</span> <span class="token string">''</span><span class="token punctuation">)</span> <span class="token keyword">or</span> <span class="token string">''</span>
  <span class="token keyword">end</span>

  <span class="token keyword">return</span> is_head_empty
    <span class="token keyword">and</span> string<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>
      <span class="token string">' +%s ~%s -%s | \uE725 %s '</span><span class="token punctuation">,</span>
      signs<span class="token punctuation">.</span>added<span class="token punctuation">,</span> signs<span class="token punctuation">.</span>changed<span class="token punctuation">,</span> signs<span class="token punctuation">.</span>removed<span class="token punctuation">,</span> signs<span class="token punctuation">.</span>head
    <span class="token punctuation">)</span>
    <span class="token keyword">or</span> <span class="token string">''</span>
<span class="token keyword">end</span></code>`,ap,O,Gc,zn,Wc,Uc,jt,Yc,zc,qt,Kc,Qc,tp,ia,Zc,ep,ua,ra,zu,pp,ka,Jc,op,I,Xc,Gt,ni,si,Wt,ai,ti,Ut,ei,pi,Yt,oi,li,zt,ci,ii,Kt,ui,ri,Kn,ki,fi,lp,Qn,fa,di,cp,pn,mi,Qt,hi,wi,ip,Zn,vd=`<code class="language-lua">M<span class="token punctuation">.</span>get_filename <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span>
  <span class="token keyword">if</span> self<span class="token punctuation">:</span><span class="token function">is_truncated</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>trunc_width<span class="token punctuation">.</span>filename<span class="token punctuation">)</span> <span class="token keyword">then</span> <span class="token keyword">return</span> <span class="token string">" %&lt;%f "</span> <span class="token keyword">end</span>
  <span class="token keyword">return</span> <span class="token string">" %&lt;%F "</span>
<span class="token keyword">end</span></code>`,up,on,vi,Zt,_i,gi,rp,ln,yi,Jt,Ei,bi,kp,Jn,da,Ii,fp,ma,Ci,dp,Xn,_d=`<code class="language-lua">M<span class="token punctuation">.</span>get_filetype <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token keyword">local</span> file_name<span class="token punctuation">,</span> file_ext <span class="token operator">=</span> fn<span class="token punctuation">.</span><span class="token function">expand</span><span class="token punctuation">(</span><span class="token string">"%:t"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> fn<span class="token punctuation">.</span><span class="token function">expand</span><span class="token punctuation">(</span><span class="token string">"%:e"</span><span class="token punctuation">)</span>
  <span class="token keyword">local</span> icon <span class="token operator">=</span> require<span class="token string">'nvim-web-devicons'</span><span class="token punctuation">.</span><span class="token function">get_icon</span><span class="token punctuation">(</span>file_name<span class="token punctuation">,</span> file_ext<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> default <span class="token operator">=</span> <span class="token keyword">true</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
  <span class="token keyword">local</span> filetype <span class="token operator">=</span> vim<span class="token punctuation">.</span>bo<span class="token punctuation">.</span>filetype

  <span class="token keyword">if</span> filetype <span class="token operator">==</span> <span class="token string">''</span> <span class="token keyword">then</span> <span class="token keyword">return</span> <span class="token string">''</span> <span class="token keyword">end</span>
  <span class="token keyword">return</span> string<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">' %s %s '</span><span class="token punctuation">,</span> icon<span class="token punctuation">,</span> filetype<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token function">lower</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">end</span></code>`,mp,G,Li,Xt,Pi,$i,ne,Ai,Si,hp,cn,Di,ns,Mi,xi,wp,ss,ha,Ti,vp,W,Hi,se,Oi,Ni,ae,Vi,Bi,_p,as,gd=`<code class="language-lua">M<span class="token punctuation">.</span>get_line_col <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span>
  <span class="token keyword">if</span> self<span class="token punctuation">:</span><span class="token function">is_truncated</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>trunc_width<span class="token punctuation">.</span>line_col<span class="token punctuation">)</span> <span class="token keyword">then</span> <span class="token keyword">return</span> <span class="token string">' %l:%c '</span> <span class="token keyword">end</span>
  <span class="token keyword">return</span> <span class="token string">' Ln %l, Col %c '</span>
<span class="token keyword">end</span></code>`,gp,U,Ri,te,Fi,ji,ee,qi,Gi,yp,ts,wa,Wi,Ep,un,Ui,pe,Yi,zi,bp,es,yd=`<code class="language-lua">M<span class="token punctuation">.</span>get_lsp_diagnostic <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span>
  <span class="token keyword">local</span> result <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
  <span class="token keyword">local</span> levels <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
    errors <span class="token operator">=</span> <span class="token string">'Error'</span><span class="token punctuation">,</span>
    warnings <span class="token operator">=</span> <span class="token string">'Warning'</span><span class="token punctuation">,</span>
    info <span class="token operator">=</span> <span class="token string">'Information'</span><span class="token punctuation">,</span>
    hints <span class="token operator">=</span> <span class="token string">'Hint'</span>
  <span class="token punctuation">&#125;</span>

  <span class="token keyword">for</span> k<span class="token punctuation">,</span> level <span class="token keyword">in</span> <span class="token function">pairs</span><span class="token punctuation">(</span>levels<span class="token punctuation">)</span> <span class="token keyword">do</span>
    result<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> vim<span class="token punctuation">.</span>lsp<span class="token punctuation">.</span>diagnostic<span class="token punctuation">.</span><span class="token function">get_count</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> level<span class="token punctuation">)</span>
  <span class="token keyword">end</span>

  <span class="token keyword">if</span> self<span class="token punctuation">:</span><span class="token function">is_truncated</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>trunc_width<span class="token punctuation">.</span>diagnostic<span class="token punctuation">)</span> <span class="token keyword">then</span>
    <span class="token keyword">return</span> <span class="token string">''</span>
  <span class="token keyword">else</span>
    <span class="token keyword">return</span> string<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>
      <span class="token string">"| \uF00D:%s \uF12A:%s \uF129:%s \uF834:%s "</span><span class="token punctuation">,</span>
      result<span class="token punctuation">[</span><span class="token string">'errors'</span><span class="token punctuation">]</span> <span class="token keyword">or</span> <span class="token number">0</span><span class="token punctuation">,</span> result<span class="token punctuation">[</span><span class="token string">'warnings'</span><span class="token punctuation">]</span> <span class="token keyword">or</span> <span class="token number">0</span><span class="token punctuation">,</span>
      result<span class="token punctuation">[</span><span class="token string">'info'</span><span class="token punctuation">]</span> <span class="token keyword">or</span> <span class="token number">0</span><span class="token punctuation">,</span> result<span class="token punctuation">[</span><span class="token string">'hints'</span><span class="token punctuation">]</span> <span class="token keyword">or</span> <span class="token number">0</span>
    <span class="token punctuation">)</span>
  <span class="token keyword">end</span>
<span class="token keyword">end</span></code>`,Ip,Y,Ki,ps,Qi,Zi,oe,Ji,Xi,Cp,rn,Lp,os,va,nu,Pp,N,su,le,au,tu,ce,eu,pu,ie,ou,lu,$p,ls,_a,cu,Ap,ga,iu,Sp,cs,Ed=`<code class="language-lua">M<span class="token punctuation">.</span>set_active <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span>
  <span class="token keyword">local</span> colors <span class="token operator">=</span> self<span class="token punctuation">.</span>colors

  <span class="token keyword">local</span> mode <span class="token operator">=</span> colors<span class="token punctuation">.</span>mode <span class="token operator">..</span> self<span class="token punctuation">:</span><span class="token function">get_current_mode</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token keyword">local</span> mode_alt <span class="token operator">=</span> colors<span class="token punctuation">.</span>mode_alt <span class="token operator">..</span> self<span class="token punctuation">.</span>separators<span class="token punctuation">[</span>active_sep<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>
  <span class="token keyword">local</span> git <span class="token operator">=</span> colors<span class="token punctuation">.</span>git <span class="token operator">..</span> self<span class="token punctuation">:</span><span class="token function">get_git_status</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token keyword">local</span> git_alt <span class="token operator">=</span> colors<span class="token punctuation">.</span>git_alt <span class="token operator">..</span> self<span class="token punctuation">.</span>separators<span class="token punctuation">[</span>active_sep<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>
  <span class="token keyword">local</span> filename <span class="token operator">=</span> colors<span class="token punctuation">.</span>inactive <span class="token operator">..</span> self<span class="token punctuation">:</span><span class="token function">get_filename</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token keyword">local</span> filetype_alt <span class="token operator">=</span> colors<span class="token punctuation">.</span>filetype_alt <span class="token operator">..</span> self<span class="token punctuation">.</span>separators<span class="token punctuation">[</span>active_sep<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span>
  <span class="token keyword">local</span> filetype <span class="token operator">=</span> colors<span class="token punctuation">.</span>filetype <span class="token operator">..</span> self<span class="token punctuation">:</span><span class="token function">get_filetype</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token keyword">local</span> line_col <span class="token operator">=</span> colors<span class="token punctuation">.</span>line_col <span class="token operator">..</span> self<span class="token punctuation">:</span><span class="token function">get_line_col</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token keyword">local</span> line_col_alt <span class="token operator">=</span> colors<span class="token punctuation">.</span>line_col_alt <span class="token operator">..</span> self<span class="token punctuation">.</span>separators<span class="token punctuation">[</span>active_sep<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span>

  <span class="token keyword">return</span> table<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
    colors<span class="token punctuation">.</span>active<span class="token punctuation">,</span> mode<span class="token punctuation">,</span> mode_alt<span class="token punctuation">,</span> git<span class="token punctuation">,</span> git_alt<span class="token punctuation">,</span>
    <span class="token string">"%="</span><span class="token punctuation">,</span> filename<span class="token punctuation">,</span> <span class="token string">"%="</span><span class="token punctuation">,</span>
    filetype_alt<span class="token punctuation">,</span> filetype<span class="token punctuation">,</span> line_col_alt<span class="token punctuation">,</span> line_col
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
<span class="token keyword">end</span></code>`,Dp,kn,uu,ue,ru,ku,Mp,is,ya,fu,xp,Ea,du,Tp,us,bd=`<code class="language-lua">M<span class="token punctuation">.</span>set_inactive <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span>
  <span class="token keyword">return</span> self<span class="token punctuation">.</span>colors<span class="token punctuation">.</span>inactive <span class="token operator">..</span> <span class="token string">'%= %F %='</span>
<span class="token keyword">end</span></code>`,Hp,ba,mu,Op,rs,Ia,hu,Np,Ca,wu,Vp,ks,Id=`<code class="language-lua">M<span class="token punctuation">.</span>set_explorer <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span>
  <span class="token keyword">local</span> title <span class="token operator">=</span> self<span class="token punctuation">.</span>colors<span class="token punctuation">.</span>mode <span class="token operator">..</span> <span class="token string">' \uF414  '</span>
  <span class="token keyword">local</span> title_alt <span class="token operator">=</span> self<span class="token punctuation">.</span>colors<span class="token punctuation">.</span>mode_alt <span class="token operator">..</span> self<span class="token punctuation">.</span>separators<span class="token punctuation">[</span>active_sep<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span>

  <span class="token keyword">return</span> table<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> self<span class="token punctuation">.</span>colors<span class="token punctuation">.</span>active<span class="token punctuation">,</span> title<span class="token punctuation">,</span> title_alt <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
<span class="token keyword">end</span></code>`,Bp,fs,La,vu,Rp,fn,_u,re,gu,yu,Fp,ds,Cd=`<code class="language-lua">Statusline <span class="token operator">=</span> <span class="token function">setmetatable</span><span class="token punctuation">(</span>M<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>
  __call <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>statusline<span class="token punctuation">,</span> mode<span class="token punctuation">)</span>
    <span class="token keyword">return</span> self<span class="token punctuation">[</span><span class="token string">"set_"</span> <span class="token operator">..</span> mode<span class="token punctuation">]</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span>
  <span class="token keyword">end</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>

api<span class="token punctuation">.</span><span class="token function">nvim_exec</span><span class="token punctuation">(</span><span class="token string">[[
  augroup Statusline
  au!
  au WinEnter,BufEnter * setlocal statusline=%!v:lua.Statusline('active')
  au WinLeave,BufLeave * setlocal statusline=%!v:lua.Statusline('inactive')
  au WinEnter,BufEnter,FileType NvimTree setlocal statusline=%!v:lua.Statusline('explorer')
  augroup END
]]</span><span class="token punctuation">,</span> <span class="token keyword">false</span><span class="token punctuation">)</span></code>`,jp,z,Eu,ke,bu,Iu,ms,Cu,Lu,qp,hs,Pa,Pu,Gp,$a,$u,Wp,ws,Ld=`<code class="language-lua"><span class="token keyword">local</span> fn <span class="token operator">=</span> vim<span class="token punctuation">.</span>fn
<span class="token keyword">local</span> api <span class="token operator">=</span> vim<span class="token punctuation">.</span>api

<span class="token keyword">local</span> M <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>

<span class="token comment">-- possible values are 'arrow' | 'rounded' | 'blank'</span>
<span class="token keyword">local</span> active_sep <span class="token operator">=</span> <span class="token string">'blank'</span>

<span class="token comment">-- change them if you want to different separator</span>
M<span class="token punctuation">.</span>separators <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
  arrow <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token string">'\uE0B0'</span><span class="token punctuation">,</span> <span class="token string">'\uE0B2'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  rounded <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token string">'\uE0B4'</span><span class="token punctuation">,</span> <span class="token string">'\uE0B6'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  blank <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token string">''</span><span class="token punctuation">,</span> <span class="token string">''</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">-- highlight groups</span>
M<span class="token punctuation">.</span>colors <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
  active        <span class="token operator">=</span> <span class="token string">'%#StatusLine#'</span><span class="token punctuation">,</span>
  inactive      <span class="token operator">=</span> <span class="token string">'%#StatuslineNC#'</span><span class="token punctuation">,</span>
  mode          <span class="token operator">=</span> <span class="token string">'%#Mode#'</span><span class="token punctuation">,</span>
  mode_alt      <span class="token operator">=</span> <span class="token string">'%#ModeAlt#'</span><span class="token punctuation">,</span>
  git           <span class="token operator">=</span> <span class="token string">'%#Git#'</span><span class="token punctuation">,</span>
  git_alt       <span class="token operator">=</span> <span class="token string">'%#GitAlt#'</span><span class="token punctuation">,</span>
  filetype      <span class="token operator">=</span> <span class="token string">'%#Filetype#'</span><span class="token punctuation">,</span>
  filetype_alt  <span class="token operator">=</span> <span class="token string">'%#FiletypeAlt#'</span><span class="token punctuation">,</span>
  line_col      <span class="token operator">=</span> <span class="token string">'%#LineCol#'</span><span class="token punctuation">,</span>
  line_col_alt  <span class="token operator">=</span> <span class="token string">'%#LineColAlt#'</span><span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span>

M<span class="token punctuation">.</span>trunc_width <span class="token operator">=</span> <span class="token function">setmetatable</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
  mode       <span class="token operator">=</span> <span class="token number">80</span><span class="token punctuation">,</span>
  git_status <span class="token operator">=</span> <span class="token number">90</span><span class="token punctuation">,</span>
  filename   <span class="token operator">=</span> <span class="token number">140</span><span class="token punctuation">,</span>
  line_col   <span class="token operator">=</span> <span class="token number">60</span><span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>
  __index <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
      <span class="token keyword">return</span> <span class="token number">80</span>
  <span class="token keyword">end</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>

M<span class="token punctuation">.</span>is_truncated <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>_<span class="token punctuation">,</span> width<span class="token punctuation">)</span>
  <span class="token keyword">local</span> current_width <span class="token operator">=</span> api<span class="token punctuation">.</span><span class="token function">nvim_win_get_width</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
  <span class="token keyword">return</span> current_width <span class="token operator">&lt;</span> width
<span class="token keyword">end</span>

M<span class="token punctuation">.</span>modes <span class="token operator">=</span> <span class="token function">setmetatable</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
  <span class="token punctuation">[</span><span class="token string">'n'</span><span class="token punctuation">]</span>  <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'Normal'</span><span class="token punctuation">,</span> <span class="token string">'N'</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
  <span class="token punctuation">[</span><span class="token string">'no'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'N\xB7Pending'</span><span class="token punctuation">,</span> <span class="token string">'N\xB7P'</span><span class="token punctuation">&#125;</span> <span class="token punctuation">;</span>
  <span class="token punctuation">[</span><span class="token string">'v'</span><span class="token punctuation">]</span>  <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'Visual'</span><span class="token punctuation">,</span> <span class="token string">'V'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
  <span class="token punctuation">[</span><span class="token string">'V'</span><span class="token punctuation">]</span>  <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'V\xB7Line'</span><span class="token punctuation">,</span> <span class="token string">'V\xB7L'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
  <span class="token punctuation">[</span><span class="token string">''</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'V\xB7Block'</span><span class="token punctuation">,</span> <span class="token string">'V\xB7B'</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span> <span class="token comment">-- this is not ^V, but it's , they're different</span>
  <span class="token punctuation">[</span><span class="token string">'s'</span><span class="token punctuation">]</span>  <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'Select'</span><span class="token punctuation">,</span> <span class="token string">'S'</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
  <span class="token punctuation">[</span><span class="token string">'S'</span><span class="token punctuation">]</span>  <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'S\xB7Line'</span><span class="token punctuation">,</span> <span class="token string">'S\xB7L'</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
  <span class="token punctuation">[</span><span class="token string">''</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'S\xB7Block'</span><span class="token punctuation">,</span> <span class="token string">'S\xB7B'</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span> <span class="token comment">-- same with this one, it's not ^S but it's </span>
  <span class="token punctuation">[</span><span class="token string">'i'</span><span class="token punctuation">]</span>  <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'Insert'</span><span class="token punctuation">,</span> <span class="token string">'I'</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
  <span class="token punctuation">[</span><span class="token string">'ic'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'Insert'</span><span class="token punctuation">,</span> <span class="token string">'I'</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
  <span class="token punctuation">[</span><span class="token string">'R'</span><span class="token punctuation">]</span>  <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'Replace'</span><span class="token punctuation">,</span> <span class="token string">'R'</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
  <span class="token punctuation">[</span><span class="token string">'Rv'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'V\xB7Replace'</span><span class="token punctuation">,</span> <span class="token string">'V\xB7R'</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
  <span class="token punctuation">[</span><span class="token string">'c'</span><span class="token punctuation">]</span>  <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'Command'</span><span class="token punctuation">,</span> <span class="token string">'C'</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
  <span class="token punctuation">[</span><span class="token string">'cv'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'Vim\xB7Ex '</span><span class="token punctuation">,</span> <span class="token string">'V\xB7E'</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
  <span class="token punctuation">[</span><span class="token string">'ce'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'Ex '</span><span class="token punctuation">,</span> <span class="token string">'E'</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
  <span class="token punctuation">[</span><span class="token string">'r'</span><span class="token punctuation">]</span>  <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'Prompt '</span><span class="token punctuation">,</span> <span class="token string">'P'</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
  <span class="token punctuation">[</span><span class="token string">'rm'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'More '</span><span class="token punctuation">,</span> <span class="token string">'M'</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
  <span class="token punctuation">[</span><span class="token string">'r?'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'Confirm '</span><span class="token punctuation">,</span> <span class="token string">'C'</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
  <span class="token punctuation">[</span><span class="token string">'!'</span><span class="token punctuation">]</span>  <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'Shell '</span><span class="token punctuation">,</span> <span class="token string">'S'</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
  <span class="token punctuation">[</span><span class="token string">'t'</span><span class="token punctuation">]</span>  <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'Terminal '</span><span class="token punctuation">,</span> <span class="token string">'T'</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>
  __index <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
      <span class="token keyword">return</span> <span class="token punctuation">&#123;</span><span class="token string">'Unknown'</span><span class="token punctuation">,</span> <span class="token string">'U'</span><span class="token punctuation">&#125;</span> <span class="token comment">-- handle edge cases</span>
  <span class="token keyword">end</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>

M<span class="token punctuation">.</span>get_current_mode <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span>
  <span class="token keyword">local</span> current_mode <span class="token operator">=</span> api<span class="token punctuation">.</span><span class="token function">nvim_get_mode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>mode

  <span class="token keyword">if</span> self<span class="token punctuation">:</span><span class="token function">is_truncated</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>trunc_width<span class="token punctuation">.</span>mode<span class="token punctuation">)</span> <span class="token keyword">then</span>
    <span class="token keyword">return</span> string<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">' %s '</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>modes<span class="token punctuation">[</span>current_mode<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token function">upper</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token keyword">end</span>
  <span class="token keyword">return</span> string<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">' %s '</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>modes<span class="token punctuation">[</span>current_mode<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token function">upper</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">end</span>

M<span class="token punctuation">.</span>get_git_status <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span>
  <span class="token comment">-- use fallback because it doesn't set this variable on the initial &#96;BufEnter&#96;</span>
  <span class="token keyword">local</span> signs <span class="token operator">=</span> vim<span class="token punctuation">.</span>b<span class="token punctuation">.</span>gitsigns_status_dict <span class="token keyword">or</span> <span class="token punctuation">&#123;</span>head <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">,</span> added <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> changed <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> removed <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">&#125;</span>
  <span class="token keyword">local</span> is_head_empty <span class="token operator">=</span> signs<span class="token punctuation">.</span>head <span class="token operator">~=</span> <span class="token string">''</span>

  <span class="token keyword">if</span> self<span class="token punctuation">:</span><span class="token function">is_truncated</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>trunc_width<span class="token punctuation">.</span>git_status<span class="token punctuation">)</span> <span class="token keyword">then</span>
    <span class="token keyword">return</span> is_head_empty <span class="token keyword">and</span> string<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">' \uE725 %s '</span><span class="token punctuation">,</span> signs<span class="token punctuation">.</span>head <span class="token keyword">or</span> <span class="token string">''</span><span class="token punctuation">)</span> <span class="token keyword">or</span> <span class="token string">''</span>
  <span class="token keyword">end</span>

  <span class="token keyword">return</span> is_head_empty <span class="token keyword">and</span> string<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>
    <span class="token string">' +%s ~%s -%s | \uE725 %s '</span><span class="token punctuation">,</span>
    signs<span class="token punctuation">.</span>added<span class="token punctuation">,</span> signs<span class="token punctuation">.</span>changed<span class="token punctuation">,</span> signs<span class="token punctuation">.</span>removed<span class="token punctuation">,</span> signs<span class="token punctuation">.</span>head
  <span class="token punctuation">)</span> <span class="token keyword">or</span> <span class="token string">''</span>
<span class="token keyword">end</span>

M<span class="token punctuation">.</span>get_filename <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span>
  <span class="token keyword">if</span> self<span class="token punctuation">:</span><span class="token function">is_truncated</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>trunc_width<span class="token punctuation">.</span>filename<span class="token punctuation">)</span> <span class="token keyword">then</span> <span class="token keyword">return</span> <span class="token string">" %&lt;%f "</span> <span class="token keyword">end</span>
  <span class="token keyword">return</span> <span class="token string">" %&lt;%F "</span>
<span class="token keyword">end</span>

M<span class="token punctuation">.</span>get_filetype <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token keyword">local</span> file_name<span class="token punctuation">,</span> file_ext <span class="token operator">=</span> fn<span class="token punctuation">.</span><span class="token function">expand</span><span class="token punctuation">(</span><span class="token string">"%:t"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> fn<span class="token punctuation">.</span><span class="token function">expand</span><span class="token punctuation">(</span><span class="token string">"%:e"</span><span class="token punctuation">)</span>
  <span class="token keyword">local</span> icon <span class="token operator">=</span> require<span class="token string">'nvim-web-devicons'</span><span class="token punctuation">.</span><span class="token function">get_icon</span><span class="token punctuation">(</span>file_name<span class="token punctuation">,</span> file_ext<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> default <span class="token operator">=</span> <span class="token keyword">true</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
  <span class="token keyword">local</span> filetype <span class="token operator">=</span> vim<span class="token punctuation">.</span>bo<span class="token punctuation">.</span>filetype

  <span class="token keyword">if</span> filetype <span class="token operator">==</span> <span class="token string">''</span> <span class="token keyword">then</span> <span class="token keyword">return</span> <span class="token string">''</span> <span class="token keyword">end</span>
  <span class="token keyword">return</span> string<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">' %s %s '</span><span class="token punctuation">,</span> icon<span class="token punctuation">,</span> filetype<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token function">lower</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">end</span>

M<span class="token punctuation">.</span>get_line_col <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span>
  <span class="token keyword">if</span> self<span class="token punctuation">:</span><span class="token function">is_truncated</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>trunc_width<span class="token punctuation">.</span>line_col<span class="token punctuation">)</span> <span class="token keyword">then</span> <span class="token keyword">return</span> <span class="token string">' %l:%c '</span> <span class="token keyword">end</span>
  <span class="token keyword">return</span> <span class="token string">' Ln %l, Col %c '</span>
<span class="token keyword">end</span>


M<span class="token punctuation">.</span>set_active <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span>
  <span class="token keyword">local</span> colors <span class="token operator">=</span> self<span class="token punctuation">.</span>colors

  <span class="token keyword">local</span> mode <span class="token operator">=</span> colors<span class="token punctuation">.</span>mode <span class="token operator">..</span> self<span class="token punctuation">:</span><span class="token function">get_current_mode</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token keyword">local</span> mode_alt <span class="token operator">=</span> colors<span class="token punctuation">.</span>mode_alt <span class="token operator">..</span> self<span class="token punctuation">.</span>separators<span class="token punctuation">[</span>active_sep<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>
  <span class="token keyword">local</span> git <span class="token operator">=</span> colors<span class="token punctuation">.</span>git <span class="token operator">..</span> self<span class="token punctuation">:</span><span class="token function">get_git_status</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token keyword">local</span> git_alt <span class="token operator">=</span> colors<span class="token punctuation">.</span>git_alt <span class="token operator">..</span> self<span class="token punctuation">.</span>separators<span class="token punctuation">[</span>active_sep<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>
  <span class="token keyword">local</span> filename <span class="token operator">=</span> colors<span class="token punctuation">.</span>inactive <span class="token operator">..</span> self<span class="token punctuation">:</span><span class="token function">get_filename</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token keyword">local</span> filetype_alt <span class="token operator">=</span> colors<span class="token punctuation">.</span>filetype_alt <span class="token operator">..</span> self<span class="token punctuation">.</span>separators<span class="token punctuation">[</span>active_sep<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span>
  <span class="token keyword">local</span> filetype <span class="token operator">=</span> colors<span class="token punctuation">.</span>filetype <span class="token operator">..</span> self<span class="token punctuation">:</span><span class="token function">get_filetype</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token keyword">local</span> line_col <span class="token operator">=</span> colors<span class="token punctuation">.</span>line_col <span class="token operator">..</span> self<span class="token punctuation">:</span><span class="token function">get_line_col</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token keyword">local</span> line_col_alt <span class="token operator">=</span> colors<span class="token punctuation">.</span>line_col_alt <span class="token operator">..</span> self<span class="token punctuation">.</span>separators<span class="token punctuation">[</span>active_sep<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span>

  <span class="token keyword">return</span> table<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
    colors<span class="token punctuation">.</span>active<span class="token punctuation">,</span> mode<span class="token punctuation">,</span> mode_alt<span class="token punctuation">,</span> git<span class="token punctuation">,</span> git_alt<span class="token punctuation">,</span>
    <span class="token string">"%="</span><span class="token punctuation">,</span> filename<span class="token punctuation">,</span> <span class="token string">"%="</span><span class="token punctuation">,</span>
    filetype_alt<span class="token punctuation">,</span> filetype<span class="token punctuation">,</span> line_col_alt<span class="token punctuation">,</span> line_col
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
<span class="token keyword">end</span>

M<span class="token punctuation">.</span>set_inactive <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span>
  <span class="token keyword">return</span> self<span class="token punctuation">.</span>colors<span class="token punctuation">.</span>inactive <span class="token operator">..</span> <span class="token string">'%= %F %='</span>
<span class="token keyword">end</span>

M<span class="token punctuation">.</span>set_explorer <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span>
  <span class="token keyword">local</span> title <span class="token operator">=</span> self<span class="token punctuation">.</span>colors<span class="token punctuation">.</span>mode <span class="token operator">..</span> <span class="token string">' \uF414  '</span>
  <span class="token keyword">local</span> title_alt <span class="token operator">=</span> self<span class="token punctuation">.</span>colors<span class="token punctuation">.</span>mode_alt <span class="token operator">..</span> self<span class="token punctuation">.</span>separators<span class="token punctuation">[</span>active_sep<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span>

  <span class="token keyword">return</span> table<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> self<span class="token punctuation">.</span>colors<span class="token punctuation">.</span>active<span class="token punctuation">,</span> title<span class="token punctuation">,</span> title_alt <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
<span class="token keyword">end</span>

Statusline <span class="token operator">=</span> <span class="token function">setmetatable</span><span class="token punctuation">(</span>M<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>
  __call <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>statusline<span class="token punctuation">,</span> mode<span class="token punctuation">)</span>
    <span class="token keyword">if</span> mode <span class="token operator">==</span> <span class="token string">"active"</span> <span class="token keyword">then</span> <span class="token keyword">return</span> statusline<span class="token punctuation">:</span><span class="token function">set_active</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">end</span>
    <span class="token keyword">if</span> mode <span class="token operator">==</span> <span class="token string">"inactive"</span> <span class="token keyword">then</span> <span class="token keyword">return</span> statusline<span class="token punctuation">:</span><span class="token function">set_inactive</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">end</span>
    <span class="token keyword">if</span> mode <span class="token operator">==</span> <span class="token string">"explorer"</span> <span class="token keyword">then</span> <span class="token keyword">return</span> statusline<span class="token punctuation">:</span><span class="token function">set_explorer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">end</span>
  <span class="token keyword">end</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>

<span class="token comment">-- set statusline</span>
<span class="token comment">-- TODO: replace this once we can define autocmd using lua</span>
api<span class="token punctuation">.</span><span class="token function">nvim_exec</span><span class="token punctuation">(</span><span class="token string">[[
  augroup Statusline
  au!
  au WinEnter,BufEnter * setlocal statusline=%!v:lua.Statusline('active')
  au WinLeave,BufLeave * setlocal statusline=%!v:lua.Statusline('inactive')
  au WinEnter,BufEnter,FileType NvimTree setlocal statusline=%!v:lua.Statusline('explorer')
  augroup END
]]</span><span class="token punctuation">,</span> <span class="token keyword">false</span><span class="token punctuation">)</span>

<span class="token comment">----[[</span>
<span class="token comment">--  NOTE: I don't use this since the statusline already has</span>
<span class="token comment">--  so much stuff going on. Feel free to use it!</span>
<span class="token comment">--  credit: https://github.com/nvim-lua/lsp-status.nvim</span>
<span class="token comment">--</span>
<span class="token comment">--  I now use &#96;tabline&#96; to display these errors, go to &#96;_bufferline.lua&#96; if you</span>
<span class="token comment">--  want to check that out</span>
<span class="token comment">----]]</span>
<span class="token comment">-- Statusline.get_lsp_diagnostic = function(self)</span>
<span class="token comment">--   local result = &#123;&#125;</span>
<span class="token comment">--   local levels = &#123;</span>
<span class="token comment">--     errors = 'Error',</span>
<span class="token comment">--     warnings = 'Warning',</span>
<span class="token comment">--     info = 'Information',</span>
<span class="token comment">--     hints = 'Hint'</span>
<span class="token comment">--   &#125;</span>

<span class="token comment">--   for k, level in pairs(levels) do</span>
<span class="token comment">--     result[k] = vim.lsp.diagnostic.get_count(0, level)</span>
<span class="token comment">--   end</span>

<span class="token comment">--   if self:is_truncated(120) then</span>
<span class="token comment">--     return ''</span>
<span class="token comment">--   else</span>
<span class="token comment">--     return string.format(</span>
<span class="token comment">--       "| \uF00D:%s \uF12A:%s \uF129:%s \uF834:%s ",</span>
<span class="token comment">--       result['errors'] or 0, result['warnings'] or 0,</span>
<span class="token comment">--       result['info'] or 0, result['hints'] or 0</span>
<span class="token comment">--     )</span>
<span class="token comment">--   end</span>
<span class="token comment">-- end</span></code>`,Up,Aa,Au,Yp,Sa,Da,Ku,zp,dn,Su,vs,Du,Mu,Kp,Ma,xu,Qp,mn,Tu,_s,Hu,Ou,Zp,hn,Jp,V,Nu,gs,Vu,Bu,ys,Ru,Fu,Es,ju,qu,Xp,bs,xa,Gu,no,Ta,Wu,so,Ha,Uu,ao;return J=new Ga({props:{date:"2021-02-26",$$slots:{default:[zd]},$$scope:{ctx:L}}}),nn=new Ga({props:{date:"2021-07-23",$$slots:{default:[Kd]},$$scope:{ctx:L}}}),an=new Ga({props:{date:"2021-01-30",$$slots:{default:[Qd]},$$scope:{ctx:L}}}),en=new Ga({props:{date:"2021-02-26",$$slots:{default:[Zd]},$$scope:{ctx:L}}}),rn=new Ga({props:{date:"2021-07-23",$$slots:{default:[Jd]},$$scope:{ctx:L}}}),hn=new Ga({props:{date:"2021-06-17",$$slots:{default:[Xd]},$$scope:{ctx:L}}}),{c(){f=t("h1"),h=t("a"),d=o("Table of Contents"),w=r(),m=t("ul"),v=t("li"),_=t("p"),P=t("a"),g=o("Introduction"),E=r(),B=t("li"),Q=t("p"),Ss=t("a"),go=o("Prerequisite"),yo=r(),En=t("li"),Wa=t("p"),Ds=t("a"),Eo=o("Creating The Statusline"),bo=r(),y=t("ul"),Ua=t("li"),Ms=t("a"),Io=o("Initial Setup"),Co=r(),Ya=t("li"),xs=t("a"),Lo=o("First Function"),Po=r(),za=t("li"),Ts=t("a"),$o=o("Highlight groups"),Ao=r(),Ka=t("li"),Hs=t("a"),So=o("Separators"),Do=r(),Qa=t("li"),Os=t("a"),Mo=o("Mode Component"),xo=r(),Za=t("li"),Ns=t("a"),To=o("Git Status Component"),Ho=r(),Ja=t("li"),Vs=t("a"),Oo=o("Filename Component"),No=r(),Xa=t("li"),Bs=t("a"),Vo=o("Filetype Component"),Bo=r(),nt=t("li"),Rs=t("a"),Ro=o("Line Component"),Fo=r(),st=t("li"),Fs=t("a"),jo=o("LSP Diagnostic"),qo=r(),bn=t("li"),at=t("p"),js=t("a"),Go=o("Different Statusline"),Wo=r(),R=t("ul"),tt=t("li"),qs=t("a"),Uo=o("Active Statusline"),Yo=r(),et=t("li"),Gs=t("a"),zo=o("Inactive Statusline"),Ko=r(),pt=t("li"),Ws=t("a"),Qo=o("Inactive Statusline"),Zo=r(),ot=t("li"),Us=t("a"),Jo=o("Dynamic statusline"),Xo=r(),lt=t("li"),ct=t("p"),Ys=t("a"),nl=o("Result"),sl=r(),it=t("li"),ut=t("p"),zs=t("a"),al=o("Closing Note"),_e=r(),In=t("h1"),Ks=t("a"),tl=o("Introduction"),ge=r(),Z=t("p"),el=o(`Hello there! So, I\u2019ve been playing around with the latest Neovim feature and
that is it can now use Lua for its config. Quite a while ago I wrote `),Cn=t("a"),pl=o("this post"),ol=o(" where I explain how I made my statusline. Now, it\u2019s time to update that post using Lua :)"),ye=r(),Ln=t("h1"),Qs=t("a"),ll=o("Prerequisite"),Ee=r(),Zs=t("p"),cl=o("If you want to follow along, then these are the prerequisite."),be=r(),$=t("ul"),rt=t("li"),il=o("Neovim 0.5 (we need this version for lua support)"),ul=r(),kt=t("li"),Pn=t("a"),rl=o("gitsigns.nvim"),kl=r(),ft=t("li"),$n=t("a"),fl=o("nerdfont"),dl=r(),dt=t("li"),An=t("a"),ml=o("nvim-web-devicons"),hl=r(),Sn=t("li"),wl=o("Terminal that supports true colour (I use "),Dn=t("a"),vl=o("Alacritty"),_l=o(")"),gl=r(),mt=t("li"),yl=o("Patience"),El=r(),ht=t("li"),bl=o("Googling skills in case something doesn\u2019t work correctly :p"),Ie=r(),Mn=t("h1"),Js=t("a"),Il=o("Creating The Statusline"),Ce=r(),xn=t("h2"),Xs=t("a"),Cl=o("Initial Setup"),Le=r(),K=t("p"),Ll=o("I wrote my statusline on "),wt=t("code"),Pl=o("~/.config/nvim/lua/modules/_statusline.lua"),$l=o(" along with my other lua modules so it will get picked up by Neovim and I can import it by using "),vt=t("code"),Al=o("require('modules._statusline')"),Pe=r(),Tn=t("h2"),na=t("a"),Sl=o("First Function"),$e=r(),H=t("p"),Dl=o("I create an empty table for my statusline and alias for "),_t=t("code"),Ml=o("vim.fn"),xl=o(" and "),gt=t("code"),Tl=o("vim.api"),Hl=o(" to make it shorter. You can call it whatever you want, I call it "),yt=t("code"),Ol=o("M"),Nl=o(" since this variable is just a \u2018temporary\u2019 table that I\u2019m going to use for a metatable. My current file now looks something like this."),Ae=r(),Hn=t("pre"),Se=r(),F=t("p"),Vl=o("This first function is going to be a helper function that will return "),Et=t("code"),Bl=o("true"),Rl=o(" of "),bt=t("code"),Fl=o("false"),jl=o(" based on the current window width. I use this to decide whether or not a component should display a full or a truncated version of it."),De=r(),On=t("pre"),Me=r(),j=t("p"),ql=o("This function calls "),It=t("code"),Gl=o("vim.api.nvim_win_get_width"),Wl=o(" for the current active window which will return its width. This function will return "),Ct=t("code"),Ul=o("true"),Yl=o(" if the current window width is less than the passed argument thus telling a component to truncate its content."),xe=r(),Is(J.$$.fragment),Te=r(),Nn=t("h2"),sa=t("a"),zl=o("Highlight groups"),He=r(),aa=t("p"),Kl=o("I have this table that contains a string for the highlight group. I can then concatenate one of its items with a component and apply the highlight group for that component."),Oe=r(),Vn=t("pre"),Ne=r(),X=t("p"),Ql=o("I made the highlight groups on my "),Lt=t("code"),Zl=o("~/.config/nvim/lua/modules/_appearances.lua"),Jl=o(" along with my other hl-group definitions, but here\u2019s the important snippet."),Ve=r(),Is(nn.$$.fragment),Be=r(),Bn=t("pre"),Re=r(),ta=t("p"),Xl=o("You can define this using VimL but I prefer doing it in Lua because 99% of my config is in Lua and I don\u2019t really like using VimL."),Fe=r(),Rn=t("h2"),ea=t("a"),nc=o("Separators"),je=r(),sn=t("p"),sc=o("Since I use "),Fn=t("a"),ac=o("nerdfont"),tc=o(", I have fancy symbols that I can use. I use these symbols as a separator."),qe=r(),jn=t("pre"),Ge=r(),pa=t("p"),ec=o("I use the arrow separator, either one is fine. It will look empty here because my website doesn\u2019t use Nerdfont."),We=r(),Is(an.$$.fragment),Ue=r(),qn=t("h2"),oa=t("a"),pc=o("Mode Component"),Ye=r(),la=t("p"),oc=o("The first component for my statusline is the one that shows the current mode."),ze=r(),Gn=t("pre"),Ke=r(),b=t("p"),lc=o("You probably notice that "),Pt=t("code"),cc=o("V\xB7Block"),ic=o(" and "),$t=t("code"),uc=o("S\xB7Block"),rc=o(" look empty but they\u2019re not. It\u2019s a special character of "),At=t("code"),kc=o("C-V"),fc=o(" and "),St=t("code"),dc=o("C-S"),mc=o(". If you go to (Neo)vim and press "),Dt=t("code"),hc=o("C-V"),wc=o(" in insert mode twice, it will insert something like "),Mt=t("code"),vc=o("^V"),_c=o(". It\u2019s not the same as "),xt=t("code"),gc=o("^V"),yc=o(", I thought they\u2019re the same but they\u2019re not."),Qe=r(),tn=t("p"),Ec=o("What that code does is creates a key-value pair table with string as a key and a table as its value. I use the table\u2019s key to match what "),Tt=t("code"),bc=o("vim.api.nvim_get_mode().mode"),Ic=o(" returns."),Ze=r(),A=t("p"),Cc=o("Depending on the current window width, it will return different output. For example, if my current window isn\u2019t wide enough, it will return "),Ht=t("code"),Lc=o("N"),Pc=o(" instead of "),Ot=t("code"),$c=o("Normal"),Ac=o(". If you want to change when it will start to change then adjust the argument that is passed to the "),Nt=t("code"),Sc=o("is_truncated"),Dc=o(" function. Remember that "),Vt=t("code"),Mc=o("trunc_width"),xc=o(" table from earlier? We use "),Bt=t("code"),Tc=o("mode"),Hc=o(" value here so that my Mode component will get truncated if my window width is less than "),Rt=t("code"),Oc=o("80"),Nc=o("."),Je=r(),Is(en.$$.fragment),Xe=r(),Wn=t("h2"),ca=t("a"),Vc=o("Git Status Component"),np=r(),q=t("p"),Bc=o("I use "),Un=t("a"),Rc=o("gitsigns.nvim"),Fc=o(" to show the git hunk status on "),Ft=t("code"),jc=o("signcolumn"),qc=o(". It provides some details like how many lines have been changed, added, or removed. It also provides the branch name. So, I\u2019d like to integrate this functionality into my statusline."),sp=r(),Yn=t("pre"),ap=r(),O=t("p"),Gc=o("What that code does is it gets the git hunk status from "),zn=t("a"),Wc=o("gitsigns.nvim"),Uc=o(" and store it on a variable. I use fallback here because it doesn\u2019t get set on initial "),jt=t("code"),Yc=o("BufEnter"),zc=o(" so I\u2019ll get a "),qt=t("code"),Kc=o("nil"),Qc=o(" error if I don\u2019t do that."),tp=r(),ia=t("p"),Zc=o("The next bit is it checks if the branch name exists or not (basically checking if we\u2019re in a git repo or not), if it exists then it will return a formatted status that will look something like this."),ep=r(),ua=t("p"),ra=t("img"),pp=r(),ka=t("p"),Jc=o("If the current window isn\u2019t wide enough, it will remove the git hunk summary and just display the branch name."),op=r(),I=t("p"),Xc=o("If you get confused with "),Gt=t("code"),ni=o("and"),si=o(" and "),Wt=t("code"),ai=o("or"),ti=o(", it\u2019s similar to ternary operator. "),Ut=t("code"),ei=o("cond and true or false"),pi=o(" is the same as "),Yt=t("code"),oi=o("cond ? true : false"),li=o(" because "),zt=t("code"),ci=o("and"),ii=o(" and "),Kt=t("code"),ui=o("or"),ri=o(" is a "),Kn=t("a"),ki=o("short circuit"),fi=o(" in Lua."),lp=r(),Qn=t("h2"),fa=t("a"),di=o("Filename Component"),cp=r(),pn=t("p"),mi=o("My next component is a filename component. I\u2019d like to be able to see the filename without having to press "),Qt=t("code"),hi=o("<C-G>"),wi=o(" every time I want to check the filename and its full path."),ip=r(),Zn=t("pre"),up=r(),on=t("p"),vi=o("Depending on the current window width, it will display an absolute path, relative path to our "),Zt=t("code"),_i=o("$CWD"),gi=o(", or just the current filename."),rp=r(),ln=t("p"),yi=o("The "),Jt=t("code"),Ei=o("%<"),bi=o(" is to tell the statusline to truncate this component if it\u2019s too long or doesn\u2019t have enough space instead of truncating the first component."),kp=r(),Jn=t("h2"),da=t("a"),Ii=o("Filetype Component"),fp=r(),ma=t("p"),Ci=o("I want to see the filetype of the current buffer, so I\u2019d like to include this on my statusline as well."),dp=r(),Xn=t("pre"),mp=r(),G=t("p"),Li=o("It gets a value from "),Xt=t("code"),Pi=o("vim.bo.filetype"),$i=o(" which will return a filetype and I transform it to lowercase using the "),ne=t("code"),Ai=o("lower()"),Si=o(" method. If the current buffer doesn\u2019t have a filetype, it will return nothing."),hp=r(),cn=t("p"),Di=o("I also use "),ns=t("a"),Mi=o("nvim-web-devicons"),xi=o(" to get the fancy icon for the current filetype."),wp=r(),ss=t("h2"),ha=t("a"),Ti=o("Line Component"),vp=r(),W=t("p"),Hi=o("Even though I have "),se=t("code"),Oi=o("number"),Ni=o(" and "),ae=t("code"),Vi=o("relativenumber"),Bi=o(" turned on, I\u2019d like to have this on my statusline as well."),_p=r(),as=t("pre"),gp=r(),U=t("p"),Ri=o("It will display something like "),te=t("code"),Fi=o("Ln 12, Col 2"),ji=o(" which means the cursor is at Line 12 and Column 2. This component also depends on the current window width, if it\u2019s not wide enough then it will display something like "),ee=t("code"),qi=o("12:2"),Gi=o("."),yp=r(),ts=t("h2"),wa=t("a"),Wi=o("LSP Diagnostic"),Ep=r(),un=t("p"),Ui=o("I use the built-in LSP client and it has the diagnostic capability. I can get the diagnostic summary using "),pe=t("code"),Yi=o("vim.lsp.diagnostic.get_count(bufnr, severity)"),zi=o("."),bp=r(),es=t("pre"),Ip=r(),Y=t("p"),Ki=o("I got this section from "),ps=t("a"),Qi=o("this repo"),Zi=o(" with some modification. It will be hidden when the current window width is less than "),oe=t("code"),Ji=o("120"),Xi=o(". I don\u2019t personally use this because I use a small monitor."),Cp=r(),Is(rn.$$.fragment),Lp=r(),os=t("h1"),va=t("a"),nu=o("Different Statusline"),Pp=r(),N=t("p"),su=o("I want to have 3 different statusline for different states which are "),le=t("em"),au=o("Active"),tu=o(" for the currently active window, "),ce=t("em"),eu=o("Inactive"),pu=o(" for the inactive window, and "),ie=t("em"),ou=o("Explorer"),lu=o(" for the file explorer window."),$p=r(),ls=t("h2"),_a=t("a"),cu=o("Active Statusline"),Ap=r(),ga=t("p"),iu=o("I combine all of my components as follows."),Sp=r(),cs=t("pre"),Dp=r(),kn=t("p"),uu=o("The "),ue=t("code"),ru=o("%="),ku=o(" acts like a separator. It will place all of the next components to the right, since I want my filename indicator to be in the middle, I put 2 of them around my filename indicator. It will basically center it. You can play around with it and find which one you like."),Mp=r(),is=t("h2"),ya=t("a"),fu=o("Inactive Statusline"),xp=r(),Ea=t("p"),du=o("I want this inactive statusline to be as boring as possible so it won\u2019t distract me."),Tp=r(),us=t("pre"),Hp=r(),ba=t("p"),mu=o("It\u2019s just displaying the full path of the file with a dimmed colour, super simple."),Op=r(),rs=t("h2"),Ia=t("a"),hu=o("Inactive Statusline"),Np=r(),Ca=t("p"),wu=o("I have [nvim-tree.lua][nvim-tree-lua] as my file explorer and I want to have different statusline for it, so I made this simple statusline."),Vp=r(),ks=t("pre"),Bp=r(),fs=t("h2"),La=t("a"),vu=o("Dynamic statusline"),Rp=r(),fn=t("p"),_u=o("I use metatable to set the statusline from autocmd because the "),re=t("code"),gu=o(":"),yu=o(" symbol conflicts with VimL syntax. I\u2019m probably going to change this once Neovim has the ability to define autocmd using Lua natively."),Fp=r(),ds=t("pre"),jp=r(),z=t("p"),Eu=o("This auto command runs every time we enter or leave a buffer and set the corresponding statusline. It needs to be done using VimL because it doesn\u2019t have lua version "),ke=t("em"),bu=o("yet"),Iu=o(". It\u2019s currently a "),ms=t("a"),Cu=o("work in progress"),Lu=o(" at the time of writing this post."),qp=r(),hs=t("h1"),Pa=t("a"),Pu=o("Result"),Gp=r(),$a=t("p"),$u=o("Here\u2019s how the entire file looks."),Wp=r(),ws=t("pre"),Up=r(),Aa=t("p"),Au=o("And here\u2019s the result."),Yp=r(),Sa=t("p"),Da=t("img"),zp=r(),dn=t("p"),Su=o("Also a "),vs=t("a"),Du=o("preview video"),Mu=o(" for a better demonstration. As you can see in the video, they change their appearance based on the window width."),Kp=r(),Ma=t("p"),xu=o("That\u2019s the active statusline, I don\u2019t think I need to put a screenshot for the inactive one because nothing is interesting going on there :p."),Qp=r(),mn=t("p"),Tu=o("Here\u2019s "),_s=t("a"),Hu=o("my statusline file"),Ou=o(" for a reference."),Zp=r(),Is(hn.$$.fragment),Jp=r(),V=t("p"),Nu=o("There are also some great statusline plugins written in lua if you want to get started quickly such as "),gs=t("a"),Vu=o("tjdevries/express_line.nvim"),Bu=o(", "),ys=t("a"),Ru=o("glepnir/galaxyline.nvim"),Fu=o(", "),Es=t("a"),ju=o("adelarsq/neoline.vim"),qu=o(" and so on."),Xp=r(),bs=t("h1"),xa=t("a"),Gu=o("Closing Note"),no=r(),Ta=t("p"),Wu=o("I really like how it turned out, Lua support on Neovim is probably the best update I\u2019ve ever experienced. It makes me want to play around with Neovim\u2019s API even more. Kudos to all of Neovim contributors!"),so=r(),Ha=t("p"),Uu=o("Anyway, thanks for reading, and gave a great day! :)"),this.h()},l(n){f=e(n,"H1",{id:!0});var c=p(f);h=e(c,"A",{href:!0});var fe=p(h);d=l(fe,"Table of Contents"),fe.forEach(s),c.forEach(s),w=k(n),m=e(n,"UL",{});var M=p(m);v=e(M,"LI",{});var de=p(v);_=e(de,"P",{});var me=p(_);P=e(me,"A",{href:!0});var he=p(P);g=l(he,"Introduction"),he.forEach(s),me.forEach(s),de.forEach(s),E=k(M),B=e(M,"LI",{});var we=p(B);Q=e(we,"P",{});var Qu=p(Q);Ss=e(Qu,"A",{href:!0});var Zu=p(Ss);go=l(Zu,"Prerequisite"),Zu.forEach(s),Qu.forEach(s),we.forEach(s),yo=k(M),En=e(M,"LI",{});var to=p(En);Wa=e(to,"P",{});var Ju=p(Wa);Ds=e(Ju,"A",{href:!0});var Xu=p(Ds);Eo=l(Xu,"Creating The Statusline"),Xu.forEach(s),Ju.forEach(s),bo=k(to),y=e(to,"UL",{});var C=p(y);Ua=e(C,"LI",{});var nr=p(Ua);Ms=e(nr,"A",{href:!0});var sr=p(Ms);Io=l(sr,"Initial Setup"),sr.forEach(s),nr.forEach(s),Co=k(C),Ya=e(C,"LI",{});var ar=p(Ya);xs=e(ar,"A",{href:!0});var tr=p(xs);Lo=l(tr,"First Function"),tr.forEach(s),ar.forEach(s),Po=k(C),za=e(C,"LI",{});var er=p(za);Ts=e(er,"A",{href:!0});var pr=p(Ts);$o=l(pr,"Highlight groups"),pr.forEach(s),er.forEach(s),Ao=k(C),Ka=e(C,"LI",{});var or=p(Ka);Hs=e(or,"A",{href:!0});var lr=p(Hs);So=l(lr,"Separators"),lr.forEach(s),or.forEach(s),Do=k(C),Qa=e(C,"LI",{});var cr=p(Qa);Os=e(cr,"A",{href:!0});var ir=p(Os);Mo=l(ir,"Mode Component"),ir.forEach(s),cr.forEach(s),xo=k(C),Za=e(C,"LI",{});var ur=p(Za);Ns=e(ur,"A",{href:!0});var rr=p(Ns);To=l(rr,"Git Status Component"),rr.forEach(s),ur.forEach(s),Ho=k(C),Ja=e(C,"LI",{});var kr=p(Ja);Vs=e(kr,"A",{href:!0});var fr=p(Vs);Oo=l(fr,"Filename Component"),fr.forEach(s),kr.forEach(s),No=k(C),Xa=e(C,"LI",{});var dr=p(Xa);Bs=e(dr,"A",{href:!0});var mr=p(Bs);Vo=l(mr,"Filetype Component"),mr.forEach(s),dr.forEach(s),Bo=k(C),nt=e(C,"LI",{});var hr=p(nt);Rs=e(hr,"A",{href:!0});var wr=p(Rs);Ro=l(wr,"Line Component"),wr.forEach(s),hr.forEach(s),Fo=k(C),st=e(C,"LI",{});var vr=p(st);Fs=e(vr,"A",{href:!0});var _r=p(Fs);jo=l(_r,"LSP Diagnostic"),_r.forEach(s),vr.forEach(s),C.forEach(s),to.forEach(s),qo=k(M),bn=e(M,"LI",{});var eo=p(bn);at=e(eo,"P",{});var gr=p(at);js=e(gr,"A",{href:!0});var yr=p(js);Go=l(yr,"Different Statusline"),yr.forEach(s),gr.forEach(s),Wo=k(eo),R=e(eo,"UL",{});var wn=p(R);tt=e(wn,"LI",{});var Er=p(tt);qs=e(Er,"A",{href:!0});var br=p(qs);Uo=l(br,"Active Statusline"),br.forEach(s),Er.forEach(s),Yo=k(wn),et=e(wn,"LI",{});var Ir=p(et);Gs=e(Ir,"A",{href:!0});var Cr=p(Gs);zo=l(Cr,"Inactive Statusline"),Cr.forEach(s),Ir.forEach(s),Ko=k(wn),pt=e(wn,"LI",{});var Lr=p(pt);Ws=e(Lr,"A",{href:!0});var Pr=p(Ws);Qo=l(Pr,"Inactive Statusline"),Pr.forEach(s),Lr.forEach(s),Zo=k(wn),ot=e(wn,"LI",{});var $r=p(ot);Us=e($r,"A",{href:!0});var Ar=p(Us);Jo=l(Ar,"Dynamic statusline"),Ar.forEach(s),$r.forEach(s),wn.forEach(s),eo.forEach(s),Xo=k(M),lt=e(M,"LI",{});var Sr=p(lt);ct=e(Sr,"P",{});var Dr=p(ct);Ys=e(Dr,"A",{href:!0});var Mr=p(Ys);nl=l(Mr,"Result"),Mr.forEach(s),Dr.forEach(s),Sr.forEach(s),sl=k(M),it=e(M,"LI",{});var xr=p(it);ut=e(xr,"P",{});var Tr=p(ut);zs=e(Tr,"A",{href:!0});var Hr=p(zs);al=l(Hr,"Closing Note"),Hr.forEach(s),Tr.forEach(s),xr.forEach(s),M.forEach(s),_e=k(n),In=e(n,"H1",{id:!0});var Or=p(In);Ks=e(Or,"A",{href:!0});var Nr=p(Ks);tl=l(Nr,"Introduction"),Nr.forEach(s),Or.forEach(s),ge=k(n),Z=e(n,"P",{});var po=p(Z);el=l(po,`Hello there! So, I\u2019ve been playing around with the latest Neovim feature and
that is it can now use Lua for its config. Quite a while ago I wrote `),Cn=e(po,"A",{href:!0,rel:!0});var Vr=p(Cn);pl=l(Vr,"this post"),Vr.forEach(s),ol=l(po," where I explain how I made my statusline. Now, it\u2019s time to update that post using Lua :)"),po.forEach(s),ye=k(n),Ln=e(n,"H1",{id:!0});var Br=p(Ln);Qs=e(Br,"A",{href:!0});var Rr=p(Qs);ll=l(Rr,"Prerequisite"),Rr.forEach(s),Br.forEach(s),Ee=k(n),Zs=e(n,"P",{});var Fr=p(Zs);cl=l(Fr,"If you want to follow along, then these are the prerequisite."),Fr.forEach(s),be=k(n),$=e(n,"UL",{});var x=p($);rt=e(x,"LI",{});var jr=p(rt);il=l(jr,"Neovim 0.5 (we need this version for lua support)"),jr.forEach(s),ul=k(x),kt=e(x,"LI",{});var qr=p(kt);Pn=e(qr,"A",{href:!0,rel:!0});var Gr=p(Pn);rl=l(Gr,"gitsigns.nvim"),Gr.forEach(s),qr.forEach(s),kl=k(x),ft=e(x,"LI",{});var Wr=p(ft);$n=e(Wr,"A",{href:!0,rel:!0});var Ur=p($n);fl=l(Ur,"nerdfont"),Ur.forEach(s),Wr.forEach(s),dl=k(x),dt=e(x,"LI",{});var Yr=p(dt);An=e(Yr,"A",{href:!0,rel:!0});var zr=p(An);ml=l(zr,"nvim-web-devicons"),zr.forEach(s),Yr.forEach(s),hl=k(x),Sn=e(x,"LI",{});var oo=p(Sn);wl=l(oo,"Terminal that supports true colour (I use "),Dn=e(oo,"A",{href:!0,rel:!0});var Kr=p(Dn);vl=l(Kr,"Alacritty"),Kr.forEach(s),_l=l(oo,")"),oo.forEach(s),gl=k(x),mt=e(x,"LI",{});var Qr=p(mt);yl=l(Qr,"Patience"),Qr.forEach(s),El=k(x),ht=e(x,"LI",{});var Zr=p(ht);bl=l(Zr,"Googling skills in case something doesn\u2019t work correctly :p"),Zr.forEach(s),x.forEach(s),Ie=k(n),Mn=e(n,"H1",{id:!0});var Jr=p(Mn);Js=e(Jr,"A",{href:!0});var Xr=p(Js);Il=l(Xr,"Creating The Statusline"),Xr.forEach(s),Jr.forEach(s),Ce=k(n),xn=e(n,"H2",{id:!0});var nk=p(xn);Xs=e(nk,"A",{href:!0});var sk=p(Xs);Cl=l(sk,"Initial Setup"),sk.forEach(s),nk.forEach(s),Le=k(n),K=e(n,"P",{});var ve=p(K);Ll=l(ve,"I wrote my statusline on "),wt=e(ve,"CODE",{});var ak=p(wt);Pl=l(ak,"~/.config/nvim/lua/modules/_statusline.lua"),ak.forEach(s),$l=l(ve," along with my other lua modules so it will get picked up by Neovim and I can import it by using "),vt=e(ve,"CODE",{});var tk=p(vt);Al=l(tk,"require('modules._statusline')"),tk.forEach(s),ve.forEach(s),Pe=k(n),Tn=e(n,"H2",{id:!0});var ek=p(Tn);na=e(ek,"A",{href:!0});var pk=p(na);Sl=l(pk,"First Function"),pk.forEach(s),ek.forEach(s),$e=k(n),H=e(n,"P",{});var vn=p(H);Dl=l(vn,"I create an empty table for my statusline and alias for "),_t=e(vn,"CODE",{});var ok=p(_t);Ml=l(ok,"vim.fn"),ok.forEach(s),xl=l(vn," and "),gt=e(vn,"CODE",{});var lk=p(gt);Tl=l(lk,"vim.api"),lk.forEach(s),Hl=l(vn," to make it shorter. You can call it whatever you want, I call it "),yt=e(vn,"CODE",{});var ck=p(yt);Ol=l(ck,"M"),ck.forEach(s),Nl=l(vn," since this variable is just a \u2018temporary\u2019 table that I\u2019m going to use for a metatable. My current file now looks something like this."),vn.forEach(s),Ae=k(n),Hn=e(n,"PRE",{class:!0});var Pd=p(Hn);Pd.forEach(s),Se=k(n),F=e(n,"P",{});var Oa=p(F);Vl=l(Oa,"This first function is going to be a helper function that will return "),Et=e(Oa,"CODE",{});var ik=p(Et);Bl=l(ik,"true"),ik.forEach(s),Rl=l(Oa," of "),bt=e(Oa,"CODE",{});var uk=p(bt);Fl=l(uk,"false"),uk.forEach(s),jl=l(Oa," based on the current window width. I use this to decide whether or not a component should display a full or a truncated version of it."),Oa.forEach(s),De=k(n),On=e(n,"PRE",{class:!0});var $d=p(On);$d.forEach(s),Me=k(n),j=e(n,"P",{});var Na=p(j);ql=l(Na,"This function calls "),It=e(Na,"CODE",{});var rk=p(It);Gl=l(rk,"vim.api.nvim_win_get_width"),rk.forEach(s),Wl=l(Na," for the current active window which will return its width. This function will return "),Ct=e(Na,"CODE",{});var kk=p(Ct);Ul=l(kk,"true"),kk.forEach(s),Yl=l(Na," if the current window width is less than the passed argument thus telling a component to truncate its content."),Na.forEach(s),xe=k(n),Cs(J.$$.fragment,n),Te=k(n),Nn=e(n,"H2",{id:!0});var fk=p(Nn);sa=e(fk,"A",{href:!0});var dk=p(sa);zl=l(dk,"Highlight groups"),dk.forEach(s),fk.forEach(s),He=k(n),aa=e(n,"P",{});var mk=p(aa);Kl=l(mk,"I have this table that contains a string for the highlight group. I can then concatenate one of its items with a component and apply the highlight group for that component."),mk.forEach(s),Oe=k(n),Vn=e(n,"PRE",{class:!0});var Ad=p(Vn);Ad.forEach(s),Ne=k(n),X=e(n,"P",{});var lo=p(X);Ql=l(lo,"I made the highlight groups on my "),Lt=e(lo,"CODE",{});var hk=p(Lt);Zl=l(hk,"~/.config/nvim/lua/modules/_appearances.lua"),hk.forEach(s),Jl=l(lo," along with my other hl-group definitions, but here\u2019s the important snippet."),lo.forEach(s),Ve=k(n),Cs(nn.$$.fragment,n),Be=k(n),Bn=e(n,"PRE",{class:!0});var Sd=p(Bn);Sd.forEach(s),Re=k(n),ta=e(n,"P",{});var wk=p(ta);Xl=l(wk,"You can define this using VimL but I prefer doing it in Lua because 99% of my config is in Lua and I don\u2019t really like using VimL."),wk.forEach(s),Fe=k(n),Rn=e(n,"H2",{id:!0});var vk=p(Rn);ea=e(vk,"A",{href:!0});var _k=p(ea);nc=l(_k,"Separators"),_k.forEach(s),vk.forEach(s),je=k(n),sn=e(n,"P",{});var co=p(sn);sc=l(co,"Since I use "),Fn=e(co,"A",{href:!0,rel:!0});var gk=p(Fn);ac=l(gk,"nerdfont"),gk.forEach(s),tc=l(co,", I have fancy symbols that I can use. I use these symbols as a separator."),co.forEach(s),qe=k(n),jn=e(n,"PRE",{class:!0});var Dd=p(jn);Dd.forEach(s),Ge=k(n),pa=e(n,"P",{});var yk=p(pa);ec=l(yk,"I use the arrow separator, either one is fine. It will look empty here because my website doesn\u2019t use Nerdfont."),yk.forEach(s),We=k(n),Cs(an.$$.fragment,n),Ue=k(n),qn=e(n,"H2",{id:!0});var Ek=p(qn);oa=e(Ek,"A",{href:!0});var bk=p(oa);pc=l(bk,"Mode Component"),bk.forEach(s),Ek.forEach(s),Ye=k(n),la=e(n,"P",{});var Ik=p(la);oc=l(Ik,"The first component for my statusline is the one that shows the current mode."),Ik.forEach(s),ze=k(n),Gn=e(n,"PRE",{class:!0});var Md=p(Gn);Md.forEach(s),Ke=k(n),b=e(n,"P",{});var S=p(b);lc=l(S,"You probably notice that "),Pt=e(S,"CODE",{});var Ck=p(Pt);cc=l(Ck,"V\xB7Block"),Ck.forEach(s),ic=l(S," and "),$t=e(S,"CODE",{});var Lk=p($t);uc=l(Lk,"S\xB7Block"),Lk.forEach(s),rc=l(S," look empty but they\u2019re not. It\u2019s a special character of "),At=e(S,"CODE",{});var Pk=p(At);kc=l(Pk,"C-V"),Pk.forEach(s),fc=l(S," and "),St=e(S,"CODE",{});var $k=p(St);dc=l($k,"C-S"),$k.forEach(s),mc=l(S,". If you go to (Neo)vim and press "),Dt=e(S,"CODE",{});var Ak=p(Dt);hc=l(Ak,"C-V"),Ak.forEach(s),wc=l(S," in insert mode twice, it will insert something like "),Mt=e(S,"CODE",{});var Sk=p(Mt);vc=l(Sk,"^V"),Sk.forEach(s),_c=l(S,". It\u2019s not the same as "),xt=e(S,"CODE",{});var Dk=p(xt);gc=l(Dk,"^V"),Dk.forEach(s),yc=l(S,", I thought they\u2019re the same but they\u2019re not."),S.forEach(s),Qe=k(n),tn=e(n,"P",{});var io=p(tn);Ec=l(io,"What that code does is creates a key-value pair table with string as a key and a table as its value. I use the table\u2019s key to match what "),Tt=e(io,"CODE",{});var Mk=p(Tt);bc=l(Mk,"vim.api.nvim_get_mode().mode"),Mk.forEach(s),Ic=l(io," returns."),io.forEach(s),Ze=k(n),A=e(n,"P",{});var T=p(A);Cc=l(T,"Depending on the current window width, it will return different output. For example, if my current window isn\u2019t wide enough, it will return "),Ht=e(T,"CODE",{});var xk=p(Ht);Lc=l(xk,"N"),xk.forEach(s),Pc=l(T," instead of "),Ot=e(T,"CODE",{});var Tk=p(Ot);$c=l(Tk,"Normal"),Tk.forEach(s),Ac=l(T,". If you want to change when it will start to change then adjust the argument that is passed to the "),Nt=e(T,"CODE",{});var Hk=p(Nt);Sc=l(Hk,"is_truncated"),Hk.forEach(s),Dc=l(T," function. Remember that "),Vt=e(T,"CODE",{});var Ok=p(Vt);Mc=l(Ok,"trunc_width"),Ok.forEach(s),xc=l(T," table from earlier? We use "),Bt=e(T,"CODE",{});var Nk=p(Bt);Tc=l(Nk,"mode"),Nk.forEach(s),Hc=l(T," value here so that my Mode component will get truncated if my window width is less than "),Rt=e(T,"CODE",{});var Vk=p(Rt);Oc=l(Vk,"80"),Vk.forEach(s),Nc=l(T,"."),T.forEach(s),Je=k(n),Cs(en.$$.fragment,n),Xe=k(n),Wn=e(n,"H2",{id:!0});var Bk=p(Wn);ca=e(Bk,"A",{href:!0});var Rk=p(ca);Vc=l(Rk,"Git Status Component"),Rk.forEach(s),Bk.forEach(s),np=k(n),q=e(n,"P",{});var Va=p(q);Bc=l(Va,"I use "),Un=e(Va,"A",{href:!0,rel:!0});var Fk=p(Un);Rc=l(Fk,"gitsigns.nvim"),Fk.forEach(s),Fc=l(Va," to show the git hunk status on "),Ft=e(Va,"CODE",{});var jk=p(Ft);jc=l(jk,"signcolumn"),jk.forEach(s),qc=l(Va,". It provides some details like how many lines have been changed, added, or removed. It also provides the branch name. So, I\u2019d like to integrate this functionality into my statusline."),Va.forEach(s),sp=k(n),Yn=e(n,"PRE",{class:!0});var xd=p(Yn);xd.forEach(s),ap=k(n),O=e(n,"P",{});var _n=p(O);Gc=l(_n,"What that code does is it gets the git hunk status from "),zn=e(_n,"A",{href:!0,rel:!0});var qk=p(zn);Wc=l(qk,"gitsigns.nvim"),qk.forEach(s),Uc=l(_n," and store it on a variable. I use fallback here because it doesn\u2019t get set on initial "),jt=e(_n,"CODE",{});var Gk=p(jt);Yc=l(Gk,"BufEnter"),Gk.forEach(s),zc=l(_n," so I\u2019ll get a "),qt=e(_n,"CODE",{});var Wk=p(qt);Kc=l(Wk,"nil"),Wk.forEach(s),Qc=l(_n," error if I don\u2019t do that."),_n.forEach(s),tp=k(n),ia=e(n,"P",{});var Uk=p(ia);Zc=l(Uk,"The next bit is it checks if the branch name exists or not (basically checking if we\u2019re in a git repo or not), if it exists then it will return a formatted status that will look something like this."),Uk.forEach(s),ep=k(n),ua=e(n,"P",{});var Yk=p(ua);ra=e(Yk,"IMG",{src:!0,alt:!0}),Yk.forEach(s),pp=k(n),ka=e(n,"P",{});var zk=p(ka);Jc=l(zk,"If the current window isn\u2019t wide enough, it will remove the git hunk summary and just display the branch name."),zk.forEach(s),op=k(n),I=e(n,"P",{});var D=p(I);Xc=l(D,"If you get confused with "),Gt=e(D,"CODE",{});var Kk=p(Gt);ni=l(Kk,"and"),Kk.forEach(s),si=l(D," and "),Wt=e(D,"CODE",{});var Qk=p(Wt);ai=l(Qk,"or"),Qk.forEach(s),ti=l(D,", it\u2019s similar to ternary operator. "),Ut=e(D,"CODE",{});var Zk=p(Ut);ei=l(Zk,"cond and true or false"),Zk.forEach(s),pi=l(D," is the same as "),Yt=e(D,"CODE",{});var Jk=p(Yt);oi=l(Jk,"cond ? true : false"),Jk.forEach(s),li=l(D," because "),zt=e(D,"CODE",{});var Xk=p(zt);ci=l(Xk,"and"),Xk.forEach(s),ii=l(D," and "),Kt=e(D,"CODE",{});var nf=p(Kt);ui=l(nf,"or"),nf.forEach(s),ri=l(D," is a "),Kn=e(D,"A",{href:!0,rel:!0});var sf=p(Kn);ki=l(sf,"short circuit"),sf.forEach(s),fi=l(D," in Lua."),D.forEach(s),lp=k(n),Qn=e(n,"H2",{id:!0});var af=p(Qn);fa=e(af,"A",{href:!0});var tf=p(fa);di=l(tf,"Filename Component"),tf.forEach(s),af.forEach(s),cp=k(n),pn=e(n,"P",{});var uo=p(pn);mi=l(uo,"My next component is a filename component. I\u2019d like to be able to see the filename without having to press "),Qt=e(uo,"CODE",{});var ef=p(Qt);hi=l(ef,"<C-G>"),ef.forEach(s),wi=l(uo," every time I want to check the filename and its full path."),uo.forEach(s),ip=k(n),Zn=e(n,"PRE",{class:!0});var Td=p(Zn);Td.forEach(s),up=k(n),on=e(n,"P",{});var ro=p(on);vi=l(ro,"Depending on the current window width, it will display an absolute path, relative path to our "),Zt=e(ro,"CODE",{});var pf=p(Zt);_i=l(pf,"$CWD"),pf.forEach(s),gi=l(ro,", or just the current filename."),ro.forEach(s),rp=k(n),ln=e(n,"P",{});var ko=p(ln);yi=l(ko,"The "),Jt=e(ko,"CODE",{});var of=p(Jt);Ei=l(of,"%<"),of.forEach(s),bi=l(ko," is to tell the statusline to truncate this component if it\u2019s too long or doesn\u2019t have enough space instead of truncating the first component."),ko.forEach(s),kp=k(n),Jn=e(n,"H2",{id:!0});var lf=p(Jn);da=e(lf,"A",{href:!0});var cf=p(da);Ii=l(cf,"Filetype Component"),cf.forEach(s),lf.forEach(s),fp=k(n),ma=e(n,"P",{});var uf=p(ma);Ci=l(uf,"I want to see the filetype of the current buffer, so I\u2019d like to include this on my statusline as well."),uf.forEach(s),dp=k(n),Xn=e(n,"PRE",{class:!0});var Hd=p(Xn);Hd.forEach(s),mp=k(n),G=e(n,"P",{});var Ba=p(G);Li=l(Ba,"It gets a value from "),Xt=e(Ba,"CODE",{});var rf=p(Xt);Pi=l(rf,"vim.bo.filetype"),rf.forEach(s),$i=l(Ba," which will return a filetype and I transform it to lowercase using the "),ne=e(Ba,"CODE",{});var kf=p(ne);Ai=l(kf,"lower()"),kf.forEach(s),Si=l(Ba," method. If the current buffer doesn\u2019t have a filetype, it will return nothing."),Ba.forEach(s),hp=k(n),cn=e(n,"P",{});var fo=p(cn);Di=l(fo,"I also use "),ns=e(fo,"A",{href:!0,rel:!0});var ff=p(ns);Mi=l(ff,"nvim-web-devicons"),ff.forEach(s),xi=l(fo," to get the fancy icon for the current filetype."),fo.forEach(s),wp=k(n),ss=e(n,"H2",{id:!0});var df=p(ss);ha=e(df,"A",{href:!0});var mf=p(ha);Ti=l(mf,"Line Component"),mf.forEach(s),df.forEach(s),vp=k(n),W=e(n,"P",{});var Ra=p(W);Hi=l(Ra,"Even though I have "),se=e(Ra,"CODE",{});var hf=p(se);Oi=l(hf,"number"),hf.forEach(s),Ni=l(Ra," and "),ae=e(Ra,"CODE",{});var wf=p(ae);Vi=l(wf,"relativenumber"),wf.forEach(s),Bi=l(Ra," turned on, I\u2019d like to have this on my statusline as well."),Ra.forEach(s),_p=k(n),as=e(n,"PRE",{class:!0});var Od=p(as);Od.forEach(s),gp=k(n),U=e(n,"P",{});var Fa=p(U);Ri=l(Fa,"It will display something like "),te=e(Fa,"CODE",{});var vf=p(te);Fi=l(vf,"Ln 12, Col 2"),vf.forEach(s),ji=l(Fa," which means the cursor is at Line 12 and Column 2. This component also depends on the current window width, if it\u2019s not wide enough then it will display something like "),ee=e(Fa,"CODE",{});var _f=p(ee);qi=l(_f,"12:2"),_f.forEach(s),Gi=l(Fa,"."),Fa.forEach(s),yp=k(n),ts=e(n,"H2",{id:!0});var gf=p(ts);wa=e(gf,"A",{href:!0});var yf=p(wa);Wi=l(yf,"LSP Diagnostic"),yf.forEach(s),gf.forEach(s),Ep=k(n),un=e(n,"P",{});var mo=p(un);Ui=l(mo,"I use the built-in LSP client and it has the diagnostic capability. I can get the diagnostic summary using "),pe=e(mo,"CODE",{});var Ef=p(pe);Yi=l(Ef,"vim.lsp.diagnostic.get_count(bufnr, severity)"),Ef.forEach(s),zi=l(mo,"."),mo.forEach(s),bp=k(n),es=e(n,"PRE",{class:!0});var Nd=p(es);Nd.forEach(s),Ip=k(n),Y=e(n,"P",{});var ja=p(Y);Ki=l(ja,"I got this section from "),ps=e(ja,"A",{href:!0,rel:!0});var bf=p(ps);Qi=l(bf,"this repo"),bf.forEach(s),Zi=l(ja," with some modification. It will be hidden when the current window width is less than "),oe=e(ja,"CODE",{});var If=p(oe);Ji=l(If,"120"),If.forEach(s),Xi=l(ja,". I don\u2019t personally use this because I use a small monitor."),ja.forEach(s),Cp=k(n),Cs(rn.$$.fragment,n),Lp=k(n),os=e(n,"H1",{id:!0});var Cf=p(os);va=e(Cf,"A",{href:!0});var Lf=p(va);nu=l(Lf,"Different Statusline"),Lf.forEach(s),Cf.forEach(s),Pp=k(n),N=e(n,"P",{});var gn=p(N);su=l(gn,"I want to have 3 different statusline for different states which are "),le=e(gn,"EM",{});var Pf=p(le);au=l(Pf,"Active"),Pf.forEach(s),tu=l(gn," for the currently active window, "),ce=e(gn,"EM",{});var $f=p(ce);eu=l($f,"Inactive"),$f.forEach(s),pu=l(gn," for the inactive window, and "),ie=e(gn,"EM",{});var Af=p(ie);ou=l(Af,"Explorer"),Af.forEach(s),lu=l(gn," for the file explorer window."),gn.forEach(s),$p=k(n),ls=e(n,"H2",{id:!0});var Sf=p(ls);_a=e(Sf,"A",{href:!0});var Df=p(_a);cu=l(Df,"Active Statusline"),Df.forEach(s),Sf.forEach(s),Ap=k(n),ga=e(n,"P",{});var Mf=p(ga);iu=l(Mf,"I combine all of my components as follows."),Mf.forEach(s),Sp=k(n),cs=e(n,"PRE",{class:!0});var Vd=p(cs);Vd.forEach(s),Dp=k(n),kn=e(n,"P",{});var ho=p(kn);uu=l(ho,"The "),ue=e(ho,"CODE",{});var xf=p(ue);ru=l(xf,"%="),xf.forEach(s),ku=l(ho," acts like a separator. It will place all of the next components to the right, since I want my filename indicator to be in the middle, I put 2 of them around my filename indicator. It will basically center it. You can play around with it and find which one you like."),ho.forEach(s),Mp=k(n),is=e(n,"H2",{id:!0});var Tf=p(is);ya=e(Tf,"A",{href:!0});var Hf=p(ya);fu=l(Hf,"Inactive Statusline"),Hf.forEach(s),Tf.forEach(s),xp=k(n),Ea=e(n,"P",{});var Of=p(Ea);du=l(Of,"I want this inactive statusline to be as boring as possible so it won\u2019t distract me."),Of.forEach(s),Tp=k(n),us=e(n,"PRE",{class:!0});var Bd=p(us);Bd.forEach(s),Hp=k(n),ba=e(n,"P",{});var Nf=p(ba);mu=l(Nf,"It\u2019s just displaying the full path of the file with a dimmed colour, super simple."),Nf.forEach(s),Op=k(n),rs=e(n,"H2",{id:!0});var Vf=p(rs);Ia=e(Vf,"A",{href:!0});var Bf=p(Ia);hu=l(Bf,"Inactive Statusline"),Bf.forEach(s),Vf.forEach(s),Np=k(n),Ca=e(n,"P",{});var Rf=p(Ca);wu=l(Rf,"I have [nvim-tree.lua][nvim-tree-lua] as my file explorer and I want to have different statusline for it, so I made this simple statusline."),Rf.forEach(s),Vp=k(n),ks=e(n,"PRE",{class:!0});var Rd=p(ks);Rd.forEach(s),Bp=k(n),fs=e(n,"H2",{id:!0});var Ff=p(fs);La=e(Ff,"A",{href:!0});var jf=p(La);vu=l(jf,"Dynamic statusline"),jf.forEach(s),Ff.forEach(s),Rp=k(n),fn=e(n,"P",{});var wo=p(fn);_u=l(wo,"I use metatable to set the statusline from autocmd because the "),re=e(wo,"CODE",{});var qf=p(re);gu=l(qf,":"),qf.forEach(s),yu=l(wo," symbol conflicts with VimL syntax. I\u2019m probably going to change this once Neovim has the ability to define autocmd using Lua natively."),wo.forEach(s),Fp=k(n),ds=e(n,"PRE",{class:!0});var Fd=p(ds);Fd.forEach(s),jp=k(n),z=e(n,"P",{});var qa=p(z);Eu=l(qa,"This auto command runs every time we enter or leave a buffer and set the corresponding statusline. It needs to be done using VimL because it doesn\u2019t have lua version "),ke=e(qa,"EM",{});var Gf=p(ke);bu=l(Gf,"yet"),Gf.forEach(s),Iu=l(qa,". It\u2019s currently a "),ms=e(qa,"A",{href:!0,rel:!0});var Wf=p(ms);Cu=l(Wf,"work in progress"),Wf.forEach(s),Lu=l(qa," at the time of writing this post."),qa.forEach(s),qp=k(n),hs=e(n,"H1",{id:!0});var Uf=p(hs);Pa=e(Uf,"A",{href:!0});var Yf=p(Pa);Pu=l(Yf,"Result"),Yf.forEach(s),Uf.forEach(s),Gp=k(n),$a=e(n,"P",{});var zf=p($a);$u=l(zf,"Here\u2019s how the entire file looks."),zf.forEach(s),Wp=k(n),ws=e(n,"PRE",{class:!0});var jd=p(ws);jd.forEach(s),Up=k(n),Aa=e(n,"P",{});var Kf=p(Aa);Au=l(Kf,"And here\u2019s the result."),Kf.forEach(s),Yp=k(n),Sa=e(n,"P",{});var Qf=p(Sa);Da=e(Qf,"IMG",{src:!0,alt:!0}),Qf.forEach(s),zp=k(n),dn=e(n,"P",{});var vo=p(dn);Su=l(vo,"Also a "),vs=e(vo,"A",{href:!0,rel:!0});var Zf=p(vs);Du=l(Zf,"preview video"),Zf.forEach(s),Mu=l(vo," for a better demonstration. As you can see in the video, they change their appearance based on the window width."),vo.forEach(s),Kp=k(n),Ma=e(n,"P",{});var Jf=p(Ma);xu=l(Jf,"That\u2019s the active statusline, I don\u2019t think I need to put a screenshot for the inactive one because nothing is interesting going on there :p."),Jf.forEach(s),Qp=k(n),mn=e(n,"P",{});var _o=p(mn);Tu=l(_o,"Here\u2019s "),_s=e(_o,"A",{href:!0,rel:!0});var Xf=p(_s);Hu=l(Xf,"my statusline file"),Xf.forEach(s),Ou=l(_o," for a reference."),_o.forEach(s),Zp=k(n),Cs(hn.$$.fragment,n),Jp=k(n),V=e(n,"P",{});var yn=p(V);Nu=l(yn,"There are also some great statusline plugins written in lua if you want to get started quickly such as "),gs=e(yn,"A",{href:!0,rel:!0});var nd=p(gs);Vu=l(nd,"tjdevries/express_line.nvim"),nd.forEach(s),Bu=l(yn,", "),ys=e(yn,"A",{href:!0,rel:!0});var sd=p(ys);Ru=l(sd,"glepnir/galaxyline.nvim"),sd.forEach(s),Fu=l(yn,", "),Es=e(yn,"A",{href:!0,rel:!0});var ad=p(Es);ju=l(ad,"adelarsq/neoline.vim"),ad.forEach(s),qu=l(yn," and so on."),yn.forEach(s),Xp=k(n),bs=e(n,"H1",{id:!0});var td=p(bs);xa=e(td,"A",{href:!0});var ed=p(xa);Gu=l(ed,"Closing Note"),ed.forEach(s),td.forEach(s),no=k(n),Ta=e(n,"P",{});var pd=p(Ta);Wu=l(pd,"I really like how it turned out, Lua support on Neovim is probably the best update I\u2019ve ever experienced. It makes me want to play around with Neovim\u2019s API even more. Kudos to all of Neovim contributors!"),pd.forEach(s),so=k(n),Ha=e(n,"P",{});var od=p(Ha);Uu=l(od,"Anyway, thanks for reading, and gave a great day! :)"),od.forEach(s),this.h()},h(){u(h,"href","#table-of-contents"),u(f,"id","table-of-contents"),u(P,"href","#introduction"),u(Ss,"href","#prerequisite"),u(Ds,"href","#creating-the-statusline"),u(Ms,"href","#initial-setup"),u(xs,"href","#first-function"),u(Ts,"href","#highlight-groups"),u(Hs,"href","#separators"),u(Os,"href","#mode-component"),u(Ns,"href","#git-status-component"),u(Vs,"href","#filename-component"),u(Bs,"href","#filetype-component"),u(Rs,"href","#line-component"),u(Fs,"href","#lsp-diagnostic"),u(js,"href","#different-statusline"),u(qs,"href","#active-statusline"),u(Gs,"href","#inactive-statusline"),u(Ws,"href","#inactive-statusline-1"),u(Us,"href","#dynamic-statusline"),u(Ys,"href","#result"),u(zs,"href","#closing-note"),u(Ks,"href","#introduction"),u(In,"id","introduction"),u(Cn,"href","https://elianiva.my.id/post/vim-statusline"),u(Cn,"rel","nofollow"),u(Qs,"href","#prerequisite"),u(Ln,"id","prerequisite"),u(Pn,"href","https://github.com/lewis6991/gitsigns.nvim"),u(Pn,"rel","nofollow"),u($n,"href","https://nerdfonts.com"),u($n,"rel","nofollow"),u(An,"href","https://github.com/kyazdani42/nvim-web-devicons"),u(An,"rel","nofollow"),u(Dn,"href","https://github.com/alacritty/alacritty"),u(Dn,"rel","nofollow"),u(Js,"href","#creating-the-statusline"),u(Mn,"id","creating-the-statusline"),u(Xs,"href","#initial-setup"),u(xn,"id","initial-setup"),u(na,"href","#first-function"),u(Tn,"id","first-function"),u(Hn,"class","language-lua"),u(On,"class","language-lua"),u(sa,"href","#highlight-groups"),u(Nn,"id","highlight-groups"),u(Vn,"class","language-lua"),u(Bn,"class","language-lua"),u(ea,"href","#separators"),u(Rn,"id","separators"),u(Fn,"href","https://nerdfonts.com"),u(Fn,"rel","nofollow"),u(jn,"class","language-lua"),u(oa,"href","#mode-component"),u(qn,"id","mode-component"),u(Gn,"class","language-lua"),u(ca,"href","#git-status-component"),u(Wn,"id","git-status-component"),u(Un,"href","https://github.com/lewis6991/gitsigns.nvim"),u(Un,"rel","nofollow"),u(Yn,"class","language-lua"),u(zn,"href","https://github.com/lewis6991/gitsigns.nvim"),u(zn,"rel","nofollow"),id(ra.src,zu="/assets/post/neovim-lua-statusline/gitstatus.png")||u(ra,"src",zu),u(ra,"alt","gitstatus"),u(Kn,"href","https://en.m.wikipedia.org/wiki/Short-circuit_evaluation"),u(Kn,"rel","nofollow"),u(fa,"href","#filename-component"),u(Qn,"id","filename-component"),u(Zn,"class","language-lua"),u(da,"href","#filetype-component"),u(Jn,"id","filetype-component"),u(Xn,"class","language-lua"),u(ns,"href","https://github.com/kyazdani42/nvim-web-devicons"),u(ns,"rel","nofollow"),u(ha,"href","#line-component"),u(ss,"id","line-component"),u(as,"class","language-lua"),u(wa,"href","#lsp-diagnostic"),u(ts,"id","lsp-diagnostic"),u(es,"class","language-lua"),u(ps,"href","https://github.com/nvim-lua/lsp-status.nvim"),u(ps,"rel","nofollow"),u(va,"href","#different-statusline"),u(os,"id","different-statusline"),u(_a,"href","#active-statusline"),u(ls,"id","active-statusline"),u(cs,"class","language-lua"),u(ya,"href","#inactive-statusline"),u(is,"id","inactive-statusline"),u(us,"class","language-lua"),u(Ia,"href","#inactive-statusline-1"),u(rs,"id","inactive-statusline-1"),u(ks,"class","language-lua"),u(La,"href","#dynamic-statusline"),u(fs,"id","dynamic-statusline"),u(ds,"class","language-lua"),u(ms,"href","https://github.com/neovim/neovim/pull/12378"),u(ms,"rel","nofollow"),u(Pa,"href","#result"),u(hs,"id","result"),u(ws,"class","language-lua"),id(Da.src,Ku="/assets/post/neovim-lua-statusline/result.png")||u(Da,"src",Ku),u(Da,"alt","result"),u(vs,"href","https://streamable.com/arzm3q"),u(vs,"rel","nofollow"),u(_s,"href","https://github.com/elianiva/dotfiles/blob/master/nvim/.config/nvim/lua/modules/_statusline.lua"),u(_s,"rel","nofollow"),u(gs,"href","https://github.com/tjdevries/express_line.nvim"),u(gs,"rel","nofollow"),u(ys,"href","https://github.com/glepnir/galaxyline.nvim"),u(ys,"rel","nofollow"),u(Es,"href","https://github.com/adelarsq/neoline.vim"),u(Es,"rel","nofollow"),u(xa,"href","#closing-note"),u(bs,"id","closing-note")},m(n,c){i(n,f,c),a(f,h),a(h,d),i(n,w,c),i(n,m,c),a(m,v),a(v,_),a(_,P),a(P,g),a(m,E),a(m,B),a(B,Q),a(Q,Ss),a(Ss,go),a(m,yo),a(m,En),a(En,Wa),a(Wa,Ds),a(Ds,Eo),a(En,bo),a(En,y),a(y,Ua),a(Ua,Ms),a(Ms,Io),a(y,Co),a(y,Ya),a(Ya,xs),a(xs,Lo),a(y,Po),a(y,za),a(za,Ts),a(Ts,$o),a(y,Ao),a(y,Ka),a(Ka,Hs),a(Hs,So),a(y,Do),a(y,Qa),a(Qa,Os),a(Os,Mo),a(y,xo),a(y,Za),a(Za,Ns),a(Ns,To),a(y,Ho),a(y,Ja),a(Ja,Vs),a(Vs,Oo),a(y,No),a(y,Xa),a(Xa,Bs),a(Bs,Vo),a(y,Bo),a(y,nt),a(nt,Rs),a(Rs,Ro),a(y,Fo),a(y,st),a(st,Fs),a(Fs,jo),a(m,qo),a(m,bn),a(bn,at),a(at,js),a(js,Go),a(bn,Wo),a(bn,R),a(R,tt),a(tt,qs),a(qs,Uo),a(R,Yo),a(R,et),a(et,Gs),a(Gs,zo),a(R,Ko),a(R,pt),a(pt,Ws),a(Ws,Qo),a(R,Zo),a(R,ot),a(ot,Us),a(Us,Jo),a(m,Xo),a(m,lt),a(lt,ct),a(ct,Ys),a(Ys,nl),a(m,sl),a(m,it),a(it,ut),a(ut,zs),a(zs,al),i(n,_e,c),i(n,In,c),a(In,Ks),a(Ks,tl),i(n,ge,c),i(n,Z,c),a(Z,el),a(Z,Cn),a(Cn,pl),a(Z,ol),i(n,ye,c),i(n,Ln,c),a(Ln,Qs),a(Qs,ll),i(n,Ee,c),i(n,Zs,c),a(Zs,cl),i(n,be,c),i(n,$,c),a($,rt),a(rt,il),a($,ul),a($,kt),a(kt,Pn),a(Pn,rl),a($,kl),a($,ft),a(ft,$n),a($n,fl),a($,dl),a($,dt),a(dt,An),a(An,ml),a($,hl),a($,Sn),a(Sn,wl),a(Sn,Dn),a(Dn,vl),a(Sn,_l),a($,gl),a($,mt),a(mt,yl),a($,El),a($,ht),a(ht,bl),i(n,Ie,c),i(n,Mn,c),a(Mn,Js),a(Js,Il),i(n,Ce,c),i(n,xn,c),a(xn,Xs),a(Xs,Cl),i(n,Le,c),i(n,K,c),a(K,Ll),a(K,wt),a(wt,Pl),a(K,$l),a(K,vt),a(vt,Al),i(n,Pe,c),i(n,Tn,c),a(Tn,na),a(na,Sl),i(n,$e,c),i(n,H,c),a(H,Dl),a(H,_t),a(_t,Ml),a(H,xl),a(H,gt),a(gt,Tl),a(H,Hl),a(H,yt),a(yt,Ol),a(H,Nl),i(n,Ae,c),i(n,Hn,c),Hn.innerHTML=rd,i(n,Se,c),i(n,F,c),a(F,Vl),a(F,Et),a(Et,Bl),a(F,Rl),a(F,bt),a(bt,Fl),a(F,jl),i(n,De,c),i(n,On,c),On.innerHTML=kd,i(n,Me,c),i(n,j,c),a(j,ql),a(j,It),a(It,Gl),a(j,Wl),a(j,Ct),a(Ct,Ul),a(j,Yl),i(n,xe,c),Ls(J,n,c),i(n,Te,c),i(n,Nn,c),a(Nn,sa),a(sa,zl),i(n,He,c),i(n,aa,c),a(aa,Kl),i(n,Oe,c),i(n,Vn,c),Vn.innerHTML=fd,i(n,Ne,c),i(n,X,c),a(X,Ql),a(X,Lt),a(Lt,Zl),a(X,Jl),i(n,Ve,c),Ls(nn,n,c),i(n,Be,c),i(n,Bn,c),Bn.innerHTML=dd,i(n,Re,c),i(n,ta,c),a(ta,Xl),i(n,Fe,c),i(n,Rn,c),a(Rn,ea),a(ea,nc),i(n,je,c),i(n,sn,c),a(sn,sc),a(sn,Fn),a(Fn,ac),a(sn,tc),i(n,qe,c),i(n,jn,c),jn.innerHTML=md,i(n,Ge,c),i(n,pa,c),a(pa,ec),i(n,We,c),Ls(an,n,c),i(n,Ue,c),i(n,qn,c),a(qn,oa),a(oa,pc),i(n,Ye,c),i(n,la,c),a(la,oc),i(n,ze,c),i(n,Gn,c),Gn.innerHTML=hd,i(n,Ke,c),i(n,b,c),a(b,lc),a(b,Pt),a(Pt,cc),a(b,ic),a(b,$t),a($t,uc),a(b,rc),a(b,At),a(At,kc),a(b,fc),a(b,St),a(St,dc),a(b,mc),a(b,Dt),a(Dt,hc),a(b,wc),a(b,Mt),a(Mt,vc),a(b,_c),a(b,xt),a(xt,gc),a(b,yc),i(n,Qe,c),i(n,tn,c),a(tn,Ec),a(tn,Tt),a(Tt,bc),a(tn,Ic),i(n,Ze,c),i(n,A,c),a(A,Cc),a(A,Ht),a(Ht,Lc),a(A,Pc),a(A,Ot),a(Ot,$c),a(A,Ac),a(A,Nt),a(Nt,Sc),a(A,Dc),a(A,Vt),a(Vt,Mc),a(A,xc),a(A,Bt),a(Bt,Tc),a(A,Hc),a(A,Rt),a(Rt,Oc),a(A,Nc),i(n,Je,c),Ls(en,n,c),i(n,Xe,c),i(n,Wn,c),a(Wn,ca),a(ca,Vc),i(n,np,c),i(n,q,c),a(q,Bc),a(q,Un),a(Un,Rc),a(q,Fc),a(q,Ft),a(Ft,jc),a(q,qc),i(n,sp,c),i(n,Yn,c),Yn.innerHTML=wd,i(n,ap,c),i(n,O,c),a(O,Gc),a(O,zn),a(zn,Wc),a(O,Uc),a(O,jt),a(jt,Yc),a(O,zc),a(O,qt),a(qt,Kc),a(O,Qc),i(n,tp,c),i(n,ia,c),a(ia,Zc),i(n,ep,c),i(n,ua,c),a(ua,ra),i(n,pp,c),i(n,ka,c),a(ka,Jc),i(n,op,c),i(n,I,c),a(I,Xc),a(I,Gt),a(Gt,ni),a(I,si),a(I,Wt),a(Wt,ai),a(I,ti),a(I,Ut),a(Ut,ei),a(I,pi),a(I,Yt),a(Yt,oi),a(I,li),a(I,zt),a(zt,ci),a(I,ii),a(I,Kt),a(Kt,ui),a(I,ri),a(I,Kn),a(Kn,ki),a(I,fi),i(n,lp,c),i(n,Qn,c),a(Qn,fa),a(fa,di),i(n,cp,c),i(n,pn,c),a(pn,mi),a(pn,Qt),a(Qt,hi),a(pn,wi),i(n,ip,c),i(n,Zn,c),Zn.innerHTML=vd,i(n,up,c),i(n,on,c),a(on,vi),a(on,Zt),a(Zt,_i),a(on,gi),i(n,rp,c),i(n,ln,c),a(ln,yi),a(ln,Jt),a(Jt,Ei),a(ln,bi),i(n,kp,c),i(n,Jn,c),a(Jn,da),a(da,Ii),i(n,fp,c),i(n,ma,c),a(ma,Ci),i(n,dp,c),i(n,Xn,c),Xn.innerHTML=_d,i(n,mp,c),i(n,G,c),a(G,Li),a(G,Xt),a(Xt,Pi),a(G,$i),a(G,ne),a(ne,Ai),a(G,Si),i(n,hp,c),i(n,cn,c),a(cn,Di),a(cn,ns),a(ns,Mi),a(cn,xi),i(n,wp,c),i(n,ss,c),a(ss,ha),a(ha,Ti),i(n,vp,c),i(n,W,c),a(W,Hi),a(W,se),a(se,Oi),a(W,Ni),a(W,ae),a(ae,Vi),a(W,Bi),i(n,_p,c),i(n,as,c),as.innerHTML=gd,i(n,gp,c),i(n,U,c),a(U,Ri),a(U,te),a(te,Fi),a(U,ji),a(U,ee),a(ee,qi),a(U,Gi),i(n,yp,c),i(n,ts,c),a(ts,wa),a(wa,Wi),i(n,Ep,c),i(n,un,c),a(un,Ui),a(un,pe),a(pe,Yi),a(un,zi),i(n,bp,c),i(n,es,c),es.innerHTML=yd,i(n,Ip,c),i(n,Y,c),a(Y,Ki),a(Y,ps),a(ps,Qi),a(Y,Zi),a(Y,oe),a(oe,Ji),a(Y,Xi),i(n,Cp,c),Ls(rn,n,c),i(n,Lp,c),i(n,os,c),a(os,va),a(va,nu),i(n,Pp,c),i(n,N,c),a(N,su),a(N,le),a(le,au),a(N,tu),a(N,ce),a(ce,eu),a(N,pu),a(N,ie),a(ie,ou),a(N,lu),i(n,$p,c),i(n,ls,c),a(ls,_a),a(_a,cu),i(n,Ap,c),i(n,ga,c),a(ga,iu),i(n,Sp,c),i(n,cs,c),cs.innerHTML=Ed,i(n,Dp,c),i(n,kn,c),a(kn,uu),a(kn,ue),a(ue,ru),a(kn,ku),i(n,Mp,c),i(n,is,c),a(is,ya),a(ya,fu),i(n,xp,c),i(n,Ea,c),a(Ea,du),i(n,Tp,c),i(n,us,c),us.innerHTML=bd,i(n,Hp,c),i(n,ba,c),a(ba,mu),i(n,Op,c),i(n,rs,c),a(rs,Ia),a(Ia,hu),i(n,Np,c),i(n,Ca,c),a(Ca,wu),i(n,Vp,c),i(n,ks,c),ks.innerHTML=Id,i(n,Bp,c),i(n,fs,c),a(fs,La),a(La,vu),i(n,Rp,c),i(n,fn,c),a(fn,_u),a(fn,re),a(re,gu),a(fn,yu),i(n,Fp,c),i(n,ds,c),ds.innerHTML=Cd,i(n,jp,c),i(n,z,c),a(z,Eu),a(z,ke),a(ke,bu),a(z,Iu),a(z,ms),a(ms,Cu),a(z,Lu),i(n,qp,c),i(n,hs,c),a(hs,Pa),a(Pa,Pu),i(n,Gp,c),i(n,$a,c),a($a,$u),i(n,Wp,c),i(n,ws,c),ws.innerHTML=Ld,i(n,Up,c),i(n,Aa,c),a(Aa,Au),i(n,Yp,c),i(n,Sa,c),a(Sa,Da),i(n,zp,c),i(n,dn,c),a(dn,Su),a(dn,vs),a(vs,Du),a(dn,Mu),i(n,Kp,c),i(n,Ma,c),a(Ma,xu),i(n,Qp,c),i(n,mn,c),a(mn,Tu),a(mn,_s),a(_s,Hu),a(mn,Ou),i(n,Zp,c),Ls(hn,n,c),i(n,Jp,c),i(n,V,c),a(V,Nu),a(V,gs),a(gs,Vu),a(V,Bu),a(V,ys),a(ys,Ru),a(V,Fu),a(V,Es),a(Es,ju),a(V,qu),i(n,Xp,c),i(n,bs,c),a(bs,xa),a(xa,Gu),i(n,no,c),i(n,Ta,c),a(Ta,Wu),i(n,so,c),i(n,Ha,c),a(Ha,Uu),ao=!0},p(n,c){const fe={};c&2&&(fe.$$scope={dirty:c,ctx:n}),J.$set(fe);const M={};c&2&&(M.$$scope={dirty:c,ctx:n}),nn.$set(M);const de={};c&2&&(de.$$scope={dirty:c,ctx:n}),an.$set(de);const me={};c&2&&(me.$$scope={dirty:c,ctx:n}),en.$set(me);const he={};c&2&&(he.$$scope={dirty:c,ctx:n}),rn.$set(he);const we={};c&2&&(we.$$scope={dirty:c,ctx:n}),hn.$set(we)},i(n){ao||(Ps(J.$$.fragment,n),Ps(nn.$$.fragment,n),Ps(an.$$.fragment,n),Ps(en.$$.fragment,n),Ps(rn.$$.fragment,n),Ps(hn.$$.fragment,n),ao=!0)},o(n){$s(J.$$.fragment,n),$s(nn.$$.fragment,n),$s(an.$$.fragment,n),$s(en.$$.fragment,n),$s(rn.$$.fragment,n),$s(hn.$$.fragment,n),ao=!1},d(n){n&&s(f),n&&s(w),n&&s(m),n&&s(_e),n&&s(In),n&&s(ge),n&&s(Z),n&&s(ye),n&&s(Ln),n&&s(Ee),n&&s(Zs),n&&s(be),n&&s($),n&&s(Ie),n&&s(Mn),n&&s(Ce),n&&s(xn),n&&s(Le),n&&s(K),n&&s(Pe),n&&s(Tn),n&&s($e),n&&s(H),n&&s(Ae),n&&s(Hn),n&&s(Se),n&&s(F),n&&s(De),n&&s(On),n&&s(Me),n&&s(j),n&&s(xe),As(J,n),n&&s(Te),n&&s(Nn),n&&s(He),n&&s(aa),n&&s(Oe),n&&s(Vn),n&&s(Ne),n&&s(X),n&&s(Ve),As(nn,n),n&&s(Be),n&&s(Bn),n&&s(Re),n&&s(ta),n&&s(Fe),n&&s(Rn),n&&s(je),n&&s(sn),n&&s(qe),n&&s(jn),n&&s(Ge),n&&s(pa),n&&s(We),As(an,n),n&&s(Ue),n&&s(qn),n&&s(Ye),n&&s(la),n&&s(ze),n&&s(Gn),n&&s(Ke),n&&s(b),n&&s(Qe),n&&s(tn),n&&s(Ze),n&&s(A),n&&s(Je),As(en,n),n&&s(Xe),n&&s(Wn),n&&s(np),n&&s(q),n&&s(sp),n&&s(Yn),n&&s(ap),n&&s(O),n&&s(tp),n&&s(ia),n&&s(ep),n&&s(ua),n&&s(pp),n&&s(ka),n&&s(op),n&&s(I),n&&s(lp),n&&s(Qn),n&&s(cp),n&&s(pn),n&&s(ip),n&&s(Zn),n&&s(up),n&&s(on),n&&s(rp),n&&s(ln),n&&s(kp),n&&s(Jn),n&&s(fp),n&&s(ma),n&&s(dp),n&&s(Xn),n&&s(mp),n&&s(G),n&&s(hp),n&&s(cn),n&&s(wp),n&&s(ss),n&&s(vp),n&&s(W),n&&s(_p),n&&s(as),n&&s(gp),n&&s(U),n&&s(yp),n&&s(ts),n&&s(Ep),n&&s(un),n&&s(bp),n&&s(es),n&&s(Ip),n&&s(Y),n&&s(Cp),As(rn,n),n&&s(Lp),n&&s(os),n&&s(Pp),n&&s(N),n&&s($p),n&&s(ls),n&&s(Ap),n&&s(ga),n&&s(Sp),n&&s(cs),n&&s(Dp),n&&s(kn),n&&s(Mp),n&&s(is),n&&s(xp),n&&s(Ea),n&&s(Tp),n&&s(us),n&&s(Hp),n&&s(ba),n&&s(Op),n&&s(rs),n&&s(Np),n&&s(Ca),n&&s(Vp),n&&s(ks),n&&s(Bp),n&&s(fs),n&&s(Rp),n&&s(fn),n&&s(Fp),n&&s(ds),n&&s(jp),n&&s(z),n&&s(qp),n&&s(hs),n&&s(Gp),n&&s($a),n&&s(Wp),n&&s(ws),n&&s(Up),n&&s(Aa),n&&s(Yp),n&&s(Sa),n&&s(zp),n&&s(dn),n&&s(Kp),n&&s(Ma),n&&s(Qp),n&&s(mn),n&&s(Zp),As(hn,n),n&&s(Jp),n&&s(V),n&&s(Xp),n&&s(bs),n&&s(no),n&&s(Ta),n&&s(so),n&&s(Ha)}}}function sm(L){let f,h;const d=[L[0],ud];let w={$$slots:{default:[nm]},$$scope:{ctx:L}};for(let m=0;m<d.length;m+=1)w=Yu(w,d[m]);return f=new Yd({props:w}),{c(){Is(f.$$.fragment)},l(m){Cs(f.$$.fragment,m)},m(m,v){Ls(f,m,v),h=!0},p(m,[v]){const _=v&1?Ud(d,[v&1&&ld(m[0]),v&0&&ld(ud)]):{};v&2&&(_.$$scope={dirty:v,ctx:m}),f.$set(_)},i(m){h||(Ps(f.$$.fragment,m),h=!0)},o(m){$s(f.$$.fragment,m),h=!1},d(m){As(f,m)}}}const ud={draft:!1,title:"How I made my Neovim statusline in Lua",date:"2020-11-29T00:00:00.000Z",desc:"A post where I explain how I made my custom statusline in Lua",tags:["neovim"]};function am(L,f,h){return L.$$set=d=>{h(0,f=Yu(Yu({},f),cd(d)))},f=cd(f),[f]}class rm extends qd{constructor(f){super();Gd(this,f,am,sm,Wd,{})}}export{rm as default,ud as metadata};
