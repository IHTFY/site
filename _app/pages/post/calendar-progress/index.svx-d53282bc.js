import{S as T,i as j,s as q,C as D,w as F,x as N,y as W,z as Y,A as E,q as J,o as U,B as G,T as S,e as _,t as d,k as H,c as w,a as v,h as g,d as m,m as K,b as f,g as z,J as r}from"../../../chunks/vendor-4e826582.js";import{P as L}from"../../../chunks/post-3ebb664d.js";import"../../../chunks/stores-e638db0f.js";import"../../../chunks/Progress-16f77af8.js";/* empty css                                      */function M(c){let e,n,s,u,t,o,h,k,b,i,x,p,y,B;return{c(){e=_("p"),n=d("I\u2019ve been working on the calendar maker the last two days. You can see the current progress "),s=_("a"),u=d("here"),t=d(". It\u2019s still has a long way to go. I\u2019ve been working on componentizing and getting image uploading to work. I originally tried using filepond as the image uploading component, but after a lot of issues, I realized that was better suited for uploading to a remote server. Now, I\u2019m using a svelte version of "),o=_("a"),h=d("dropzone"),k=d(". It seems to work alright, although the css styling of the component gives me some trouble."),b=H(),i=_("p"),x=d("I still need to get the loading and saving events worked out. Then I\u2019m going to used indexedDB, or more likely dexie which is a wrapper for indexedDB. "),p=_("a"),y=d("IndexedDB"),B=d(" is like localStorage in the browser; it persists between sessions. It\u2019s supposed to be better for larger data like images. For now, I\u2019m still using base64 strings to store the images, but I may move to blobs, since indexedDB supports that too."),this.h()},l(a){e=w(a,"P",{});var l=v(e);n=g(l,"I\u2019ve been working on the calendar maker the last two days. You can see the current progress "),s=w(l,"A",{href:!0,rel:!0});var $=v(s);u=g($,"here"),$.forEach(m),t=g(l,". It\u2019s still has a long way to go. I\u2019ve been working on componentizing and getting image uploading to work. I originally tried using filepond as the image uploading component, but after a lot of issues, I realized that was better suited for uploading to a remote server. Now, I\u2019m using a svelte version of "),o=w(l,"A",{href:!0,rel:!0});var A=v(o);h=g(A,"dropzone"),A.forEach(m),k=g(l,". It seems to work alright, although the css styling of the component gives me some trouble."),l.forEach(m),b=K(a),i=w(a,"P",{});var I=v(i);x=g(I,"I still need to get the loading and saving events worked out. Then I\u2019m going to used indexedDB, or more likely dexie which is a wrapper for indexedDB. "),p=w(I,"A",{href:!0,rel:!0});var P=v(p);y=g(P,"IndexedDB"),P.forEach(m),B=g(I," is like localStorage in the browser; it persists between sessions. It\u2019s supposed to be better for larger data like images. For now, I\u2019m still using base64 strings to store the images, but I may move to blobs, since indexedDB supports that too."),I.forEach(m),this.h()},h(){f(s,"href","https://calendar.ihtfy.com/data"),f(s,"rel","nofollow"),f(o,"href","https://github.com/thecodejack/svelte-file-dropzone"),f(o,"rel","nofollow"),f(p,"href","https://developer.mozilla.org/en-US/docs/Web/API/IndexedDB_API"),f(p,"rel","nofollow")},m(a,l){z(a,e,l),r(e,n),r(e,s),r(s,u),r(e,t),r(e,o),r(o,h),r(e,k),z(a,b,l),z(a,i,l),r(i,x),r(i,p),r(p,y),r(i,B)},d(a){a&&m(e),a&&m(b),a&&m(i)}}}function O(c){let e,n;const s=[c[0],C];let u={$$slots:{default:[M]},$$scope:{ctx:c}};for(let t=0;t<s.length;t+=1)u=D(u,s[t]);return e=new L({props:u}),{c(){F(e.$$.fragment)},l(t){N(e.$$.fragment,t)},m(t,o){W(e,t,o),n=!0},p(t,[o]){const h=o&1?Y(s,[o&1&&E(t[0]),o&0&&E(C)]):{};o&2&&(h.$$scope={dirty:o,ctx:t}),e.$set(h)},i(t){n||(J(e.$$.fragment,t),n=!0)},o(t){U(e.$$.fragment,t),n=!1},d(t){G(e,t)}}}const C={draft:!1,title:"calendar progress",date:"2022-02-11",desc:"Working on a calendar maker",tags:["code"]};function Q(c,e,n){return c.$$set=s=>{n(0,e=D(D({},e),S(s)))},e=S(e),[e]}class te extends T{constructor(e){super();j(this,e,Q,O,q,{})}}export{te as default,C as metadata};
